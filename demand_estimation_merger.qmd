---
title: "応用編"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV
using DataFrames
using StringEncodings
using FixedEffectModels
using RegressionTables
using Plots
using LinearAlgebra
using Statistics
using Optim
using Printf
using ForwardDiff
using Random
using GLM
using Serialization
using Roots
```

```{julia}
mutable struct datalist_struct
    X1::Array{Float64,2};
    X2::Array{Float64,2};
    Z::Array{Float64,2};
    ShareVec::Vector{Float64};
    marketIndex::Vector{Int64};
    logitshare::Vector{Float64};
    randomDrawMat::Array{Float64,2};
    marketIndexMat::BitMatrix
end

mutable struct parameter_struct
    Nsim::Int;
    T::Int;
    N::Int;
end
```


```{julia}
for file in readdir("functions/demand_estimation")
    include("functions/demand_estimation/" * file)
end
```



```{julia}
data = CSV.read("data/demand_estimation_merger/chap3_data.csv", DataFrame);
first(data, 5)
```

## Data cleaning

```{julia}
data[!, :Foreign_d] = data[:, :Type] .== "Foreign";
data[!, :FuelRegular_d] = data[:, :FuelType] .== "レギュラー";
data[!, :capacity_d] = data[:, :capacity] .> 4;
transform!(
    data, 
    [
        :year => ByRow(isequal(v))=> Symbol("year_" * string(v)) 
        for v in unique(data.year)
        ]
    );
select!(data, Not(:year_2006));
```

## 4.2

```{julia}
sort!(data, [:year, :Maker, :price]);
N = nrow(data);
T = length(unique(data.year));
X1 = hcat(
    ones(N),
    Matrix(
        data[:,[
            :price, :FuelEfficiency, :hppw, :size, 
            :capacity_d, :FuelRegular_d, :Foreign_d
            ]]
        ),
    Matrix(data[:, r"^year_"])    
    );
X2 = Matrix(data[:, [:price]]);
Z = hcat(
    ones(N),
    Matrix(
        data[:, [
            :FuelEfficiency, :hppw, :size, 
            :capacity_d, :FuelRegular_d, :Foreign_d
            ]]
        ),
    Matrix(data[:, r"^year_"]),
    Matrix(data[:, r"^iv_GH.*(?<!nest)$"])
    );

Random.seed!(42);
Nsim = 1000;

randomDrawMat = randn(size(X2)[2], Nsim);

```

```{julia}
marketIndex = data.year;
uniqueMarketIndex = sort(unique(data.year));

marketIndexMat = reduce(
    hcat, 
    [marketIndex .== market for market in uniqueMarketIndex]
    );

datalist = datalist_struct(
    X1, 
    X2, 
    Z, 
    data.share, 
    marketIndex, 
    data.logit_share, 
    randomDrawMat, 
    marketIndexMat
    );
parameter = parameter_struct(Nsim, T, N);
```

## 4.3

```{julia}
#| echo: false
#| eval: false
@time calculateMarketShare([0.01], datalist, data.logit_share);
```

```{julia}
#| echo: false
#| eval: false
@time calculateMeanUtil([0.01], datalist, data.logit_share);
```

```{julia}
initial_x = [0.7];
delta_ini = calculateMeanUtil(initial_x, datalist, datalist.logitshare);
```

```{julia}
#| eval: false
objFunc_for_Optim = OnceDifferentiable(
    x -> calculateGMMObjective(x, datalist, delta_ini),
    initial_x;
    autodiff = :forward
    );
@time resultGMM = optimize(
    objFunc_for_Optim,
    [0.0],
    [Inf],
    initial_x,
    Fminbox(),
    Optim.Options(show_trace = false)
)
```

```{julia}
#| echo: false
#| eval: false
serialize("tmp/demand_estimation_merger/resultGMM.ser", resultGMM)
```

```{julia}
#| echo: false
resultGMM = deserialize("tmp/demand_estimation_merger/resultGMM.ser");
```

```{julia}
W = inv(datalist.Z' * datalist.Z);    
delta = calculateMeanUtil(resultGMM.minimizer, datalist, delta_ini);
beta_hat = (
    (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \ 
    (datalist.X1' * datalist.Z * W * datalist.Z' * delta)
);
```

```{julia}
Xi = delta - X1 * beta_hat;
Omega_hat = reduce(+, Z[i,:] * Z[i,:]' .* Xi[i]^2 ./ N for i = 1:N);
Ddelta = ForwardDiff.jacobian(
    x -> delta_ini = calculateMeanUtil(x, datalist, delta), 
    resultGMM.minimizer
    );
G = Z' * hcat(- X1, Ddelta) ./ N;
AsyVarMat = (G' * W * G) \ G' * W * Omega_hat * W * G * inv(G' * W * G);
Ase = sqrt.(diag(AsyVarMat) ./ N);
DataFrame(
    Var = [
        "Const", "Price", "Fuel Efficiency", "hppw", "size", 
        "capacity_d", "FuelRegular_d", "Foreign_d",
        "year_2007", "year_2008", "year_2009", 
        "year_2010", "year_2011", "year_2012", 
        "year_2013", "year_2014", "year_2015", "year_2016", 
        "random_price"
        ],
    Est = vcat(beta_hat, resultGMM.minimizer),
    se = Ase
)
```

```{julia}

market2016Index = data.year .== 2016;
data_2016 = data[market2016Index, :];

@time elasmat_2016 = calculateElasticity(
    data_2016.price,
    X2[market2016Index, :],
    beta_hat,
    resultGMM.minimizer,
    randomDrawMat,
    delta[market2016Index]
);

```

## 5

```{julia}
Pricevec_2016 = data_2016.price;
Sharevec_2016 = data_2016.share;

Xi_2016 = Xi[data.year .== 2016];
Ownership_2016 = data_2016.Maker .== permutedims(data_2016.Maker);
Derivative_2016 = - elasmat_2016 .* Sharevec_2016' ./ Pricevec_2016;
Delta_2016 = Derivative_2016 .* Ownership_2016;
Marginal_Cost_2016 = Pricevec_2016 - (Delta_2016 \ Sharevec_2016);
pred_mc_df = DataFrame(
    Maker = data_2016.Maker, 
    Name = data_2016.Name, 
    Price = data_2016.price,
    MC = Marginal_Cost_2016,
    Margin = (data_2016.price .- Marginal_Cost_2016) ./ data_2016.price
);
first(pred_mc_df, 10)
```


```{julia}
histogram(pred_mc_df.Margin, bins = 40, legend = false)
```

## 6

```{julia}
data_2016 = leftjoin(data_2016, pred_mc_df, on = ["Maker", "Name"]);
dropmissing!(data_2016);

data_2016[data_2016.Maker .== "Honda", :Maker] .= "Nippyo";
data_2016[data_2016.Maker .== "Nissan", :Maker] .= "BrandA";
data_2016[data_2016.Maker .== "Subaru", :Maker] .= "BrandB";
data_2016[data_2016.Maker .== "Toyota", :Maker] .= "BrandC";

data_2016[!, :MakerNippyoA] = data_2016[:, :Maker];
data_2016[!, :MakerNippyoB] = data_2016[:, :Maker];
data_2016[in(["Nippyo", "BrandA"]).(data_2016[:, :Maker]), :MakerNippyoA] .= "NippyoA";
data_2016[in(["Nippyo", "BrandB"]).(data_2016[:, :Maker]), :MakerNippyoB] .= "NippyoB";

Ownership_true = data_2016.Maker .== permutedims(data_2016.Maker);
Ownership_NippyoA = data_2016.MakerNippyoA .== permutedims(data_2016.MakerNippyoA);
Ownership_NippyoB = data_2016.MakerNippyoB .== permutedims(data_2016.MakerNippyoB);
```

## 6.4

```{julia}
mc = data_2016.MC;
datalist_2016 = datalist_struct(
    X1[market2016Index, :],
    X2[market2016Index, :],
    Z[market2016Index, :],
    data_2016.share,
    data_2016.year,
    data_2016.logit_share,
    datalist.randomDrawMat,
    datalist.marketIndexMat[market2016Index, :]
);
```

```{julia}
#| echo: false
#| eval: false
@time updatePrice(
    datalist_2016, 
    ones(169), 
    Ownership_true, 
    beta_hat, 
    resultGMM.minimizer, 
    mc, 
    Xi_2016
    )
```

```{julia}
#| echo: false
#| eval: false
@time calculateEquilibriumPrice(
    datalist_2016,
    ones(169),
    Ownership_true,
    beta_hat,
    resultGMM.minimizer,
    mc,
    Xi_2016
)
```

## 6.5

```{julia}
p_NippyoA = calculateEquilibriumPrice(
    datalist_2016,
    data_2016.price,
    Ownership_NippyoA,
    beta_hat,
    resultGMM.minimizer,
    mc,
    Xi_2016
);

p_NippyoB = calculateEquilibriumPrice(
    datalist_2016,
    data_2016.price,
    Ownership_NippyoB,
    beta_hat,
    resultGMM.minimizer,
    mc,
    Xi_2016
);
```

## 7

## 7.1

```{julia}
merger_sim_df = DataFrame(
    Maker = data_2016.Maker, 
    Name = data_2016.Name, 
    Price_A = (p_NippyoA .- data_2016.price) ./ data_2016.price .* 100.0,
    Share_A = (simulateMarketShare(
                datalist_2016,
                p_NippyoA,
                beta_hat,
                resultGMM.minimizer,
                Xi_2016
            ) .- data_2016.share) ./ data_2016.share .* 100.0,
    Price_B = (p_NippyoB .- data_2016.price) ./ data_2016.price .* 100.0,
    Share_B = (simulateMarketShare(
                datalist_2016,
                p_NippyoB,
                beta_hat,
                resultGMM.minimizer,
                Xi_2016
            ) .- data_2016.share) ./ data_2016.share .* 100.0,
);

merger_sim_df[in(["Nippyo", "BrandA", "BrandB", "BrandC"]).(merger_sim_df.Maker), :]
```

## 7.2

```{julia}

Ownership_2016_A = data_2016.MakerNippyoA .== permutedims(data_2016.MakerNippyoA);
Derivative_2016_A = - elasmat_2016 .* Sharevec_2016' ./ Pricevec_2016;
Delta_2016_A = Derivative_2016_A .* Ownership_2016_A;
mc_NippyoA_pfix = Pricevec_2016 - (Delta_2016_A \ Sharevec_2016);

Ownership_2016_B = data_2016.MakerNippyoB .== permutedims(data_2016.MakerNippyoB);
Derivative_2016_B = - elasmat_2016 .* Sharevec_2016' ./ Pricevec_2016;
Delta_2016_B = Derivative_2016_B .* Ownership_2016_B;
mc_NippyoB_pfix = Pricevec_2016 - (Delta_2016_B \ Sharevec_2016);

mc_sim_df = DataFrame(
    Maker = data_2016.Maker, 
    Name = data_2016.Name, 
    Nippyo_and_Brand_A = (mc_NippyoA_pfix .- mc) ./ mc .* 100.0,
    Nippyo_and_Brand_B = (mc_NippyoB_pfix .- mc) ./ mc .* 100.0,
);

mc_sim_df[in(["Nippyo", "BrandA", "BrandB", "BrandC"]).(mc_sim_df.Maker), :]
```

## 7.4

```{julia}

CS_2016 = calculateCS(
    datalist_2016, 
    data_2016.price, 
    beta_hat, 
    resultGMM.minimizer, 
    Xi_2016,
    data_2016.HH[1]
);

CS_NippyoA = calculateCS(
    datalist_2016, 
    p_NippyoA, 
    beta_hat, 
    resultGMM.minimizer, 
    Xi_2016,
    data_2016.HH[1]
);

CS_NippyoB = calculateCS(
    datalist_2016, 
    p_NippyoB, 
    beta_hat, 
    resultGMM.minimizer, 
    Xi_2016,
    data_2016.HH[1]
);

CV_NippyoA = CS_NippyoA - CS_2016;
CV_NippyoB = CS_NippyoB - CS_2016;
```

```{julia}
pro_rev_2016 = calculateProfit(
    data_2016.Maker,
    data_2016.price,
    mc,
    data_2016.share,
    data_2016.HH
);
pro_rev_NippyoA = calculateProfit(
    data_2016.Maker,
    p_NippyoA,
    mc,
    simulateMarketShare(
                datalist_2016,
                p_NippyoA,
                beta_hat,
                resultGMM.minimizer,
                Xi_2016,
            ),
    data_2016.HH
);
pro_rev_NippyoB = calculateProfit(
    data_2016.Maker,
    p_NippyoB,
    mc,
    simulateMarketShare(
                datalist_2016,
                p_NippyoB,
                beta_hat,
                resultGMM.minimizer,
                Xi_2016,
            ),
    data_2016.HH
);

TS_change_NippyoA = CV_NippyoA + sum(pro_rev_NippyoA.profit - pro_rev_2016.profit);
TS_change_NippyoB = CV_NippyoB + sum(pro_rev_NippyoB.profit - pro_rev_2016.profit);
```

```{julia}
DataFrame(
    Measure = ["Consumer surplus", "Total welfare"],
    Nippyo_and_Brand_A = [CV_NippyoA, TS_change_NippyoA],
    Nippyo_and_Brand_B = [CV_NippyoB, TS_change_NippyoB],
)
```

```{julia}
result_df = DataFrame(
    Maker = pro_rev_2016.Maker,
    Profits_NippyoA = pro_rev_NippyoA.profit - pro_rev_2016.profit,
    Revenue_NippyoA = pro_rev_NippyoA.revenue - pro_rev_2016.revenue,
    Profits_NippyoB = pro_rev_NippyoB.profit - pro_rev_2016.profit,
    Revenue_NippyoB = pro_rev_NippyoB.revenue - pro_rev_2016.revenue,
);

total_df = combine(result_df, 2:5 .=> sum .=> names(result_df)[2:5]);
total_df[!, :Maker] .= "Total"
append!(result_df, total_df)
```

## 8

## 8.2

```{julia}
costReducingFirms = ["Nippyo", "Brand_A"];
distance = 100
lambda = 1e-6;
max_cost_red = 1.0;
min_cost_red = 0.0;

iter = 1;
```

```{julia}
#| echo: false
#| eval: false
@time calculateTSChangeByCostReduction(
    .9,
    costReducingFirms,
    Ownership_NippyoA,
    data_2016,
    mc,
    datalist_2016,
    beta_hat,
    resultGMM.minimizer,
    data_2016.HH,
    p_NippyoA,
    pro_rev_2016,
    CS_2016,
    Xi_2016
    );
```

```{julia}
#| eval: false
#| echo: false
@time cost_red_NippyoA = find_zero(
    x -> calculateTSChangeByCostReduction(
        x,
        costReducingFirms,
        Ownership_NippyoA,
        data_2016,
        mc,
        datalist_2016,
        beta_hat,
        resultGMM.minimizer,
        data_2016.HH,
        p_NippyoA,
        pro_rev_2016,
        CS_2016,
        Xi_2016
    ),
    (.9, 1.0);
    atol = lambda
);
```

```{julia}
#| eval: false
@time while (distance > lambda) & (iter < 100)
    
    mid_cost_red = (max_cost_red + min_cost_red) / 2.0;
    
    mid_eval = calculateTSChangeByCostReduction(
        mid_cost_red,
        costReducingFirms,
        Ownership_NippyoA,
        data_2016,
        mc,
        datalist_2016,
        beta_hat,
        resultGMM.minimizer,
        data_2016.HH,
        p_NippyoA,
        pro_rev_2016,
        CS_2016,
        Xi_2016
    );
    
    if mid_eval > 0
        min_cost_red = mid_cost_red;
    else
        max_cost_red = mid_cost_red;
    end
    
    distance = abs(mid_eval - 0);
    iter += 1
    
end
cost_red_NippyoA = (min_cost_red + min_cost_red) / 2.0;
```


```{julia}
#| echo: false
#| eval: false
serialize("tmp/demand_estimation_2/cost_red_NippyoA.ser", cost_red_NippyoA)
```

```{julia}
#| echo: false
cost_red_NippyoA = deserialize("tmp/demand_estimation_2/cost_red_NippyoA.ser");
```


```{julia}
mc_NippyoA_TSfix = mc[:];
mc_NippyoA_TSfix[in(costReducingFirms).(data_2016.Maker)] .*= cost_red_NippyoA;
```

```{julia}
p_NippyoA_TSfix = calculateEquilibriumPrice(
    datalist_2016, 
    p_NippyoA, 
    Ownership_NippyoA, 
    beta_hat, 
    resultGMM.minimizer, 
    mc_NippyoA_TSfix, 
    Xi_2016
    );
share_NippyoA_TSfix = simulateMarketShare(
    datalist_2016, 
    p_NippyoA_TSfix, 
    beta_hat, 
    resultGMM.minimizer, 
    Xi_2016
    );
```

## 8.3

```{julia}
costReducingFirms = ["Nippyo", "Brand_B"];
distance = 100
lambda = 1e-6;
max_cost_red = 1.0;
min_cost_red = 0.0;

iter = 1;
```

```{julia}
#| eval: false
@time while (distance > lambda) & (iter < 100)
    
    mid_cost_red = (max_cost_red + min_cost_red) / 2.0;
    
    mid_eval = calculateTSChangeByCostReduction(
        mid_cost_red,
        costReducingFirms,
        Ownership_NippyoB,
        data_2016,
        mc,
        datalist_2016,
        beta_hat,
        resultGMM.minimizer,
        data_2016.HH,
        p_NippyoB,
        pro_rev_2016,
        CS_2016,
        Xi_2016
    );
    
    if mid_eval > 0
        min_cost_red = mid_cost_red;
    else
        max_cost_red = mid_cost_red;
    end
    
    distance = abs(mid_eval - 0);
    iter += 1
    
end
cost_red_NippyoB = (min_cost_red + min_cost_red) / 2.0;
```

```{julia}
#| echo: false
#| eval: false
serialize("tmp/demand_estimation_2/cost_red_NippyoB.ser", cost_red_NippyoB);
```

```{julia}
#| echo: false
cost_red_NippyoB = deserialize("tmp/demand_estimation_2/cost_red_NippyoB.ser");
```

```{julia}
mc_NippyoB_TSfix = mc[:];
mc_NippyoB_TSfix[in(costReducingFirms).(data_2016.Maker)] .*= cost_red_NippyoB;
```

```{julia}
p_NippyoB_TSfix = calculateEquilibriumPrice(
    datalist_2016, 
    p_NippyoB, 
    Ownership_NippyoB,
    beta_hat, 
    resultGMM.minimizer, 
    mc_NippyoB_TSfix, 
    Xi_2016
    );
share_NippyoB_TSfix = simulateMarketShare(
    datalist_2016, 
    p_NippyoB_TSfix, 
    beta_hat, 
    resultGMM.minimizer, 
    Xi_2016
    );

```

```{julia}
[1-cost_red_NippyoA 1-cost_red_NippyoB] .* 100
```

## 8.5

```{julia}
pro_rev_NippyoA_rc = calculateProfit(
    data_2016.Maker,
    p_NippyoA_TSfix,
    mc_NippyoA_TSfix,
    share_NippyoA_TSfix,
    data_2016.HH
);
pro_rev_NippyoB_rc = calculateProfit(
    data_2016.Maker,
    p_NippyoB_TSfix,
    mc_NippyoB_TSfix,
    share_NippyoB_TSfix,
    data_2016.HH
);

result2_df = DataFrame(
    Maker = pro_rev_2016.Maker,
    Profits_NippyoA = pro_rev_NippyoA_rc.profit - pro_rev_2016.profit,
    Revenue_NippyoA = pro_rev_NippyoA_rc.revenue - pro_rev_2016.revenue,
    Profits_NippyoB = pro_rev_NippyoB_rc.profit - pro_rev_2016.profit,
    Revenue_NippyoB = pro_rev_NippyoB_rc.revenue - pro_rev_2016.revenue,
);

total2_df = combine(result2_df, 2:5 .=> sum .=> names(result2_df)[2:5]);
total2_df[!, :Maker] .= "Total";
append!(result2_df, total2_df)
```

## 8.6

```{julia}
@printf(
    "Percent change in profit by Brand A merger: %.3f \n", 
    (sum(pro_rev_NippyoA_rc.profit) - sum(pro_rev_2016.profit)) / sum(pro_rev_2016.profit) * 100.0
    )
@printf(
    "Percent change in revenue by brand A merger: %.3f \n", 
    (sum(pro_rev_NippyoA_rc.revenue) - sum(pro_rev_2016.revenue)) / sum(pro_rev_2016.revenue) * 100.0
    )
@printf(
    "Percent change in profit by Brand B merger: %.3f \n", 
    (sum(pro_rev_NippyoB_rc.profit) - sum(pro_rev_2016.profit)) / sum(pro_rev_2016.profit) * 100.0
    )
@printf(
    "Percent change in revenue by Brand B merger: %.3f \n", 
    (sum(pro_rev_NippyoB_rc.revenue) - sum(pro_rev_2016.revenue)) / sum(pro_rev_2016.revenue) * 100.0
    )
```
