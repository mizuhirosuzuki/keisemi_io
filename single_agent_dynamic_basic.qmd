---
title: "基礎編"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV
using LinearAlgebra
using Random
using StatsBase
using Distributions
using DataFrames
using Plots
using ShiftedArrays
using ForwardDiff
using Optim
```

```{julia}
for file in readdir("functions/single_agent_dynamic/")
    include("functions/single_agent_dynamic/" * file)
end
```

```{julia}
theta_true = [0.004, 0.003];

beta = 0.99;
Euler_const = Float64(MathConstants.eulergamma);

num_choice = 2;
```

```{julia}
price_states = 2000:100:2500;
mileage_states = 0:5:100;
num_price_states = length(price_states);
num_mileage_states = length(mileage_states);
num_states = num_price_states * num_mileage_states;

states_matrix = Matrix(
    reshape(
        reinterpret(
            Int, 
            collect(Iterators.product(price_states, mileage_states))
            ),
        (2, :)
        )'
    );
```


```{julia}

kappa_true = [0.25, 0.05];

mileage_trans_mat_true = zeros(
    num_mileage_states, num_mileage_states, num_choice
    );
generateMileageTransition!(
    kappa_true, 
    num_mileage_states, 
    mileage_trans_mat_true
    );

mileage_trans_mat_true[1:4, 1:4, 1]
```

```{julia}

lambda_true = [
    0.1, 0.2, 0.2, 0.2, 0.2,
    0.1, 0.2, 0.2, 0.2, 0.2,
    0.1, 0.1, 0.2, 0.2, 0.1,
    0.1, 0.1, 0.2, 0.2, 0.1,
    0.05, 0.05, 0.1, 0.1, 0.2,
    0.05, 0.05, 0.1, 0.1, 0.2
];

price_trans_mat_true = zeros(num_price_states, num_price_states);
generatePriceTransition!(
    lambda_true, 
    num_price_states, 
    price_trans_mat_true
    );

```

```{julia}
trans_mat_true = Array{Float64}(
    undef, num_states, num_states, num_choice
    );
for i in 1:num_choice
    trans_mat_true[:, :, i] = kron(
        mileage_trans_mat_true[:, :, i], 
        price_trans_mat_true
        );
end
```

```{julia}
price_trans_eigen = eigvecs(price_trans_mat_true');
price_dist_steady = (
    price_trans_eigen[:, end] / sum(price_trans_eigen[:, end])
)
```

```{julia}
@time EV_true = calculateEV(
    theta_true, beta, trans_mat_true, states_matrix
    );
```

```{julia}
U_true = calculateFlowUtil(theta_true, states_matrix);
V_CS_true = U_true + beta .* EV_true;
```

```{julia}
prob_buy_true_mat = reshape(
    exp.(V_CS_true[:, 2]) ./ sum(exp.(V_CS_true), dims = 2), 
    (num_price_states, num_mileage_states)
    )
```

```{julia}
num_consumer = 1000;

num_period = 12 * 50;
num_period_obs = 12 * 10;

num_obs = num_consumer * num_period;

Random.seed!(42);
```


```{julia}

data_gen = reduce(vcat, [generateData(
    consumer_id,
    V_CS_true,
    trans_mat_true,
    price_dist_steady
    ) for consumer_id in 1:num_consumer]) |>
    filter(:period => (x -> x > num_period - num_period_obs))

data_gen[!, :price] = states_matrix[data_gen.state, 1];
data_gen[!, :mileage] = states_matrix[data_gen.state, 2];

```

```{julia}
describe(
    data_gen[:, [:price, :mileage, :action]], :all
    )[:, [:variable, :mean, :std, :min, :max]]
```


```{julia}
histogram(data_gen.price, bar_width = 50, legend=false)
```

```{julia}
histogram(
    data_gen.mileage, 
    bar_width = 3, 
    legend=false, 
    bins = [collect(mileage_states); [105]] .- 2.5
    )
```

```{julia}
bar(
    mileage_states,
    combine(groupby(data_gen, :mileage), :action => mean).action_mean,
    bar_width = 3, 
    legend=false
)
```

```{julia}

bar(
    price_states,
    combine(groupby(data_gen, :price), :action => mean).action_mean,
    bar_width = 50, 
    legend=false
)

```

```{julia}

surface(
    mileage_states,
    price_states,
    reshape(
        combine(
            groupby(data_gen, [:mileage, :price]), 
            :action => mean
            ).action_mean, 
        (num_price_states, num_mileage_states)
    ),
    xlabel = "Mileage",
    ylabel = "Price",
    zlabel = "Purchase prob.",
)

```


## 4

```{julia}
transform!(
    groupby(data_gen, :consumer_id), 
    [:price, :mileage, :action] .=> ShiftedArrays.lag
    );
```


```{julia}

num_cond_obs_mileage = combine(
    groupby(
        transform(
            data_gen |>
                filter(
                    :period => 
                    (x -> x != (num_period - num_period_obs + 1))
                    ),
            [:mileage_lag, :mileage, :action_lag] =>
            ByRow(
                (mileage_lag, mileage, action_lag) ->
                (
                    (
                        (action_lag == 0) & 
                        (5 <= mileage_lag <= 95) & 
                        (mileage_lag == mileage)
                        ) |
                    ((action_lag == 1) & (mileage == 0))
                    ) ? "cond_obs_mileage1" :
                (
                    (
                        (action_lag == 0) & 
                        (5 <= mileage_lag <= 90) & 
                        (mileage_lag == mileage - 5)
                        ) |
                    ((action_lag == 1) & (mileage == 5))
                    ) ? "cond_obs_mileage2" :
                (
                    (
                        (action_lag == 0) & 
                        (5 <= mileage_lag <= 90) & 
                        (mileage_lag == mileage - 10)
                        ) |
                    ((action_lag == 1) & (mileage == 10))
                    ) ? "cond_obs_mileage3" :
                (
                    (
                        (action_lag == 0) & 
                        (mileage_lag == 95) & 
                        (mileage == 100)
                        )
                    ) ? "cond_obs_mileage4" :
                "other"
            ) =>
            :cond_obs_mileage
            ),
        [:cond_obs_mileage]
        ),
    nrow => :num_cond_obs
) |> filter(:cond_obs_mileage => (x -> (x != "other")));

num_cond_obs_mileage = Dict(
    k => v[1, "num_cond_obs"] 
    for ((k, ), v) in pairs(groupby(num_cond_obs_mileage, :cond_obs_mileage))
    );

```

```{julia}

kappa_est = zeros(2);

kappa_est[1] = num_cond_obs_mileage["cond_obs_mileage2"] * (
    num_cond_obs_mileage["cond_obs_mileage2"] +
    num_cond_obs_mileage["cond_obs_mileage3"] +
    num_cond_obs_mileage["cond_obs_mileage4"]
) / (
    (
        num_cond_obs_mileage["cond_obs_mileage2"] + 
        num_cond_obs_mileage["cond_obs_mileage3"]
        ) * (
    num_cond_obs_mileage["cond_obs_mileage1"] +
    num_cond_obs_mileage["cond_obs_mileage2"] +
    num_cond_obs_mileage["cond_obs_mileage3"] +
    num_cond_obs_mileage["cond_obs_mileage4"]
    )
);

kappa_est[2] = num_cond_obs_mileage["cond_obs_mileage3"] * (
    num_cond_obs_mileage["cond_obs_mileage2"] +
    num_cond_obs_mileage["cond_obs_mileage3"] +
    num_cond_obs_mileage["cond_obs_mileage4"]
) / (
    (
        num_cond_obs_mileage["cond_obs_mileage2"] + 
        num_cond_obs_mileage["cond_obs_mileage3"]
        ) * (
    num_cond_obs_mileage["cond_obs_mileage1"] +
    num_cond_obs_mileage["cond_obs_mileage2"] +
    num_cond_obs_mileage["cond_obs_mileage3"] +
    num_cond_obs_mileage["cond_obs_mileage4"]
    )
);

kappa_est
```

```{julia}
Infomat_mileage_est = zeros((2, 2));

Infomat_mileage_est[1, 1] = (
    (
        num_cond_obs_mileage["cond_obs_mileage1"] / 
        (1 - kappa_est[1] - kappa_est[2])^2
        ) +
    (num_cond_obs_mileage["cond_obs_mileage2"] / kappa_est[1]^2) +
    (
        num_cond_obs_mileage["cond_obs_mileage4"] / 
        (kappa_est[1] + kappa_est[2])^2
        )
);

Infomat_mileage_est[1, 2] = (
    (
        num_cond_obs_mileage["cond_obs_mileage1"] / 
        (1 - kappa_est[1] - kappa_est[2])^2
        ) +
    (
        num_cond_obs_mileage["cond_obs_mileage4"] / 
        (kappa_est[1] + kappa_est[2])^2
        )
);

Infomat_mileage_est[2, 1] = Infomat_mileage_est[1, 2];

Infomat_mileage_est[2, 2] = (
    (
        num_cond_obs_mileage["cond_obs_mileage1"] / 
        (1 - kappa_est[1] - kappa_est[2])^2
        ) +
    (num_cond_obs_mileage["cond_obs_mileage3"] / kappa_est[2]^2) +
    (
        num_cond_obs_mileage["cond_obs_mileage4"] / 
        (kappa_est[1] + kappa_est[2])^2
        )
);

kappa_se = sqrt.(diag(inv(Infomat_mileage_est)));

```

```{julia}
DataFrame(kappa_est = kappa_est, kappa_se = kappa_se)
```

```{julia}

num_cond_obs_price = combine(
    groupby(
        data_gen |>
            filter(
                :period => 
                (x -> x != (num_period - num_period_obs + 1))
                ),
        [:price_lag, :price]
    ),
    nrow => :num_cond_obs
)

num_cond_obs_price = [
    (
        num_cond_obs_price |> 
            filter(
                [:price_lag, :price] => 
                (
                    (price_lag, price) -> 
                    ((price_lag == p_lag) & (price == p))
                    )
                    )
    )[1, :num_cond_obs]
    for p_lag in price_states, p in price_states
]

lambda_est_mat = num_cond_obs_price ./ sum(num_cond_obs_price, dims = 2)

```

```{julia}

# TODO
lambda_se = zeros(num_price_states)

```

```{julia}
lambda_est = lambda_est_mat'[lambda_est_mat' .!= diag(lambda_est_mat)]
```

## 5

```{julia}

objFunc_for_Optim_stat = TwiceDifferentiable(
    x -> - calculateLogLikelihoodStatic(x, states_matrix, data_gen),
    theta_true;
    autodiff = :forward
    );

@time logit_stat_opt = optimize(
    objFunc_for_Optim_stat,
    theta_true,
    Optim.Options(show_trace = true)
)
```

```{julia}
theta_est_stat = logit_stat_opt.minimizer;

hessian_stat = ForwardDiff.hessian(
    x -> - calculateLogLikelihoodStatic(x, states_matrix, data_gen),
    logit_stat_opt.minimizer
    );

theta_se_stat = sqrt.(diag(inv(hessian_stat)));
```

```{julia}
DataFrame(theta_est_stat = theta_est_stat, theta_se_stat = theta_se_stat)
```

### 5.2

```{julia}

mileage_trans_mat_hat = zeros(
    num_mileage_states, num_mileage_states, num_choice
    );
generateMileageTransition!(
    kappa_est, 
    num_mileage_states, 
    mileage_trans_mat_hat
    );

price_trans_mat_hat = zeros(num_price_states, num_price_states);
generatePriceTransition!(
    lambda_est, 
    num_price_states, 
    price_trans_mat_hat
    );

trans_mat_hat = Array{Float64}(
    undef, num_states, num_states, num_choice
    );
for i in 1:num_choice
    trans_mat_hat[:, :, i] = kron(mileage_trans_mat_hat[:, :, i], price_trans_mat_hat);
end

```

```{julia}

objFunc_for_Optim = TwiceDifferentiable(
    x -> - logLH(x, beta, trans_mat_hat, states_matrix, data_gen),
    theta_true;
    autodiff = :forward
    );

@time NFXP_opt = optimize(
    objFunc_for_Optim,
    theta_true,
    Optim.Options(show_trace = true)
)
```

```{julia}
theta_est = NFXP_opt.minimizer;

hessian = ForwardDiff.hessian(
    x -> - logLH(x, beta, trans_mat_hat, states_matrix, data_gen),
    NFXP_opt.minimizer
    );

theta_se = sqrt.(diag(inv(hessian)));
```

```{julia}
DataFrame(theta_est = theta_est, theta_se = theta_se)
```

```{julia}
CSV.write("tmp/single_agent_dynamic_basic/data_gen.csv", data_gen);
```
