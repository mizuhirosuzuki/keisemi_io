---
title: "推定 1"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV, Tables
using DataFrames
using Random
using Distributions
using JLD2
using Statistics
using StatsBase
using LinearAlgebra
using Optim
```

```{julia}
mutable struct global_param_struct
    beta::Float64
    eulergamma::Float64
    entryMat::Matrix{Int}
    numFirmsVec::Vector{Int}
    economyVec::Vector{Int}
    possibleActionArray::Array{Int, 3}
end

```

```{julia}
for file in readdir("functions/dynamic_game/")
    include("functions/dynamic_game/" * file)
end
```

```{julia}

NumSimMarkets = 500;
NumSimPeriods = 50;

Random.seed!(123);

```

```{julia}

Parameters = [
    0.3,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

parameterMat = hcat([
    [Parameters[i]; Parameters[3:6]]
    for i in 1:2
]...);

TrueParameterValues = vcat([
    [Parameters[i]; Parameters[3:6]]
    for i in 1:2
]...);

TransitionMat = [0.7 0.3; 0.4 0.6];

```


```{julia}

@load "tmp/dynamic_game/data_workspace.jld2";

```

```{julia}

EstimatedCCP1Mat, EstimatedCCP2Mat = estimateCCPMat(
    FakeData, global_param
);

```

```{julia}

EstimatedTransition = zeros(2, 2);

SubData = hcat(FakeData, [[0]; FakeData[1:(end - 1), 4]]);
SubData = SubData[SubData[:, 2] .!= 1, :];

for z in 1:2
    SubDataZ = SubData[SubData[:, 4] .== z, :];
    EstimatedTransition[z, z] = mean(SubDataZ[:, 9] .== z);
    EstimatedTransition[z, 3 - z] = 1 - EstimatedTransition[z, z];
end

```

```{julia}
hcat(EstimatedCCP1Mat[:, 2], EstimatedCCP2Mat[:, 2])
```

```{julia}
EstimatedTransition
```

## Step 2


```{julia}

output = updateCCP(
    parameterMat,
    CCP1Mat,
    CCP2Mat,
    TransitionMat,
    global_param
);


println("Difference between CCP in GDP and predicted CCP")
```

```{julia}
CCP1Mat - output[1]
```

```{julia}
CCP2Mat - output[2]
```


```{julia}

Normalized_TrueParam = [
    Parameters[1] - ((1 - global_param.beta) / global_param.beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
    Parameters[2] - ((1 - global_param.beta) / global_param.beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
];

output_normalized = updateCCP(
    reshape(Normalized_TrueParam, (:, 2)),
    CCP1Mat,
    CCP2Mat,
    TransitionMat,
    global_param
);

println("Difference: predicted CCP in true parameter and normalized parameter")
```

```{julia}
output_normalized[1] - output[1]
```

```{julia}
output_normalized[2] - output[2]
```


```{julia}

initial = [Parameters[1:4]; Parameters[6]];
mat_initial2 = initial .* reshape(rand(Uniform(0.6, 1.2), 50), (5, :));
result = zeros(6, 10);

@time for i in 1:10
    sol = optimize(
        x -> calculatePSDObjective(
            x,
            EstimatedCCP1Mat, 
            EstimatedCCP2Mat, 
            EstimatedTransition, 
            global_param
            ),
        mat_initial2[:, i],
        Optim.Options(show_trace = false)
    );
    result[:, i] = [sol.minimizer; sol.minimum];
end

result_pick = result[1:5, argmin(result[6, :])];

```

```{julia}

normalized_trueparam = [
    Normalized_TrueParam[1],
    Normalized_TrueParam[6],
    Normalized_TrueParam[2],
    Normalized_TrueParam[3],
    Normalized_TrueParam[5],
];

DataFrame(
    param_est = result_pick,
    normalized_trueparam = normalized_trueparam
)

```


```{julia}

numBootSample = 100;

bootindex = reshape(
    sample(1:NumSimMarkets, NumSimMarkets * numBootSample),
    (NumSimMarkets, numBootSample)
);

```

```{julia}

bootresult_transition = zeros(2, numBootSample);
bootresult_CCP1 = zeros(8, numBootSample);
bootresult_CCP2 = zeros(8, numBootSample);
bootresult_payoff = zeros(5, numBootSample);

```


```{julia}

@time for b in 1:numBootSample
    bootsample = zeros(NumSimPeriods * NumSimMarkets, 8);
    for m in 1:NumSimMarkets
        temp = FakeData[FakeData[:, 1] .== bootindex[m, b], :];
        bootsample[(1 + NumSimPeriods * (m - 1)):(NumSimPeriods * m), :] = temp;
    end

    output = Estimation_PS_bootstrap(bootsample, global_param);

    bootresult_CCP1[:, b] = output[1][:, 2];
    bootresult_CCP2[:, b] = output[2][:, 2];
    bootresult_transition[:, b] = diag(output[3]);
    bootresult_payoff[:, b] = output[4];
end

```

```{julia}
println("CCP for firm 1")
DataFrame(
    "True values" => CCP1Mat[:, 2],
    "Estimated" => vec(EstimatedCCP1Mat[:, 2]),
    "SE" => vec(std(bootresult_CCP1, dims=2))
)
```

```{julia}
println("CCP for firm 2")
DataFrame(
    "True values" => CCP2Mat[:, 2],
    "Estimated" => vec(EstimatedCCP2Mat[:, 2]),
    "SE" => vec(std(bootresult_CCP2, dims=2))
)
```

```{julia}

println("Transition Probability (GG and BB)")
DataFrame(
    "True values" => diag(TransitionMat),
    "Estimated" => diag(EstimatedTransition),
    "SE" => vec(std(bootresult_transition, dims=2))
)

```

```{julia}

DataFrame(
    "True values" => initial,
    "Normalized true values" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimated" => result_pick,
    "SE" => vec(std(bootresult_payoff, dims=2))
    )

```

```{julia}
@save "tmp/dynamic_game/estimates_1.jld2" EstimatedCCP1Mat EstimatedCCP2Mat EstimatedTransition;
```