---
title: "基礎編 1"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---


```{julia}
using CSV
using DataFrames
using StringEncodings
using FixedEffectModels
using RegressionTables
using Plots
using Printf
using Optim
using GLM
```

## 関数の読み込み

```{julia}
for file in ["addIVColumns.jl", "calculateSales.jl"]
    include("functions/demand_estimation/" * file)
end
```

## データの準備

### データの読み込み

```{julia}
dataCar = CSV.File(
    open(read, "data/demand_estimation/CleanData_20180222.csv", enc"shift-jis"),
    missingstring = ["NA", ""],
    ) |> DataFrame
first(select(dataCar, Not([:base_color, :option_color])), 5)
```

```{julia}
dataHH = CSV.read("data/demand_estimation/HHsize.csv", DataFrame)
dataHH[!, :HH] = parse.(Int, replace.(dataHH.HH, "," => ""))
first(dataHH, 5)
```

```{julia}
dataCPI = CSV.File(
    open(read, "data/demand_estimation/zni2015s.csv", enc"shift-jis"), 
    select = 1:2,
    skipto = 7
    ) |> DataFrame
rename!(dataCPI, "類・品目" => "year", "総合" => "CPI")
first(dataCPI, 5)
```

### データクリーニング

```{julia}
dataCar = dataCar[!, [
        :Maker, :Type, :Name, :Year, :Sales, 
        :Model, :price, :kata, :weight, :FuelEfficiency, 
        :HorsePower, :overall_length, :overall_width, :overall_height
        ]]
rename!(dataCar, "Year" => "year")
data = leftjoin(dataCar, dataHH, on = :year)
data = leftjoin(data, dataCPI, on = :year)
first(data, 5)
```

```{julia}
dropmissing!(data, :FuelEfficiency);
```

```{julia}
cpi2016 = dataCPI[dataCPI.year .== 2016, "CPI"][1];
data[!, :price] = data.price ./ (data.CPI / cpi2016) / 100;
```

```{julia}
data[!, :size] = (
    (data[:, :overall_length] / 1000) .* 
    (data[:, :overall_width] / 1000) .* 
    (data[:, :overall_height] / 1000)
);
data[!, :hppw] = data[:, :HorsePower] ./ data[:, :weight];

data[:, :NameID] = groupby(data, :Name).groups;

transform!(
    groupby(data, :year),
    :Sales => sum => :inside_total
);
data[!, :outside_total] = data.HH .- data.inside_total;
data[!, :share] = data.Sales ./ data.HH;
data[!, :share0] = data.outside_total ./ data.HH;
```

### 操作変数の構築

```{julia}
transform!(
    groupby(data, [:year, :Maker]),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        sum .=> 
        [:hppw_sum_own, :FuelEfficiency_sum_own, :size_sum_own]
    ),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        (x -> sum(x.^2)) .=> 
        [:hppw_sqr_sum_own, :FuelEfficiency_sqr_sum_own, :size_sqr_sum_own]
    ),
    nrow => :group_n
);
transform!(
    groupby(data, [:year]),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        sum .=> 
        [:hppw_sum_mkt, :FuelEfficiency_sum_mkt, :size_sum_mkt]
    ),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        (x -> sum(x.^2)) .=> 
        [:hppw_sqr_sum_mkt, :FuelEfficiency_sqr_sum_mkt, :size_sqr_sum_mkt]
    ),
    nrow => :mkt_n
);

```

```{julia}
for variable in ["hppw", "FuelEfficiency", "size"]
    addIVColumns!(data, variable)
end
```

```{julia}
CSV.write("tmp/demand_estimation_1/data.csv", data);
```

## 記述統計と基礎的な分析

### イントロダクションの日評自動車

```{julia}
NIPPYOautoIDvec = [
    260, 4, 76, 104, 64, 54, 152, 153, 71, 197,
    42, 45, 114, 208, 209, 77, 236, 58, 127, 187,
    79, 175, 19, 117, 216, 112, 256, 119, 37, 158
];
```

```{julia}
dataNIPPYO = data[in(NIPPYOautoIDvec).(data.NameID), [:Sales, :price, :hppw, :FuelEfficiency, :size]];
dataNIPPYO[!, :log_sales] = log.(dataNIPPYO[:, :Sales]);
dataNIPPYO[!, :log_price] = log.(dataNIPPYO[:, :price]);
dataNIPPYO[!, :log10_sales] = log10.(dataNIPPYO[:, :Sales]);
dataNIPPYO[!, :log10_price] = log10.(dataNIPPYO[:, :price]);
```


```{julia}
reg(
    dataNIPPYO, 
    @formula(log_sales ~ log_price + hppw + FuelEfficiency + size),
    Vcov.robust()
)
```

```{julia}

OLSFitLine = predict(
    lm(@formula(log10_sales ~ log10_price), dataNIPPYO),
    dataNIPPYO,
    interval = :confidence,
    level = 0.90
    );
plot(
    dataNIPPYO.price, 
    dataNIPPYO.Sales, 
    seriestype = :scatter, 
    legend = false,
    xscale = :log10,
    yscale = :log10,
    xlabel = "Price",
    ylabel = "Sales",
    xticks = ([1, 3, 10], [1, 3, 10]),
)
sortedPrediction = OLSFitLine[sortperm(dataNIPPYO[!, :price]), :]
sortedPrice = sort(dataNIPPYO[!, :price])
plot!(
    sortedPrice,
    10 .^ sortedPrediction.prediction,
    ribbon = (
        10 .^ sortedPrediction.prediction - 10 .^ sortedPrediction.lower,
        10 .^ sortedPrediction.upper - 10 .^ sortedPrediction.prediction,
        )
)

```

### 記述統計

```{julia}
describe(data[:, [:Sales, :price, :FuelEfficiency, :size, :hppw]])
```

## ロジットモデルの推定とその応用

```{julia}
data[!, :logit_share] = log.(data[:, :share]) .- log.(data[:, :share0]);
```

```{julia}
resultOLS = reg(
    data, 
    @formula(logit_share ~ price + hppw + FuelEfficiency + size), 
    Vcov.robust()
    );
resultBLP = reg(
    data, 
    @formula(logit_share ~ (
        price ~ iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + 
            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size
    ) + hppw + FuelEfficiency + size),
    Vcov.robust()
);
resultGH = reg(
    data, 
    @formula(logit_share ~ (
        price ~ iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + 
            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size
    ) + hppw + FuelEfficiency + size),
    Vcov.robust(),
    save = true
);

```

```{julia}
regtable(resultOLS, resultBLP, resultGH)
```

### 1st stage

```{julia}
resultBLP1st = reg(
    data, 
    @formula(price ~ hppw + FuelEfficiency + size +
            iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + 
            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size
        ),
    Vcov.robust()
);
resultGH1st = reg(
    data, 
    @formula(price ~ hppw + FuelEfficiency + size +
            iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + 
            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size
        ),
    Vcov.robust()
);

```

```{julia}
regtable(resultBLP1st, resultGH1st)
```

### 自己価格弾力性の計算

```{julia}
data[!, :own_elas_ols] = (
    resultOLS.coef[resultOLS.coefnames .== "price"] .* 
    data[:, :price] .* 
    (1 .- data[:, :share])
);
data[!, :own_elas_ivblp] = (
    resultBLP.coef[resultBLP.coefnames .== "price"] .* 
    data[:, :price] .* 
    (1 .- data[:, :share])
);
data[!, :own_elas_ivgh] = (
    resultGH.coef[resultGH.coefnames .== "price"] .* 
    data[:, :price] .* 
    (1 .- data[:, :share])
);
```

```{julia}
describe(data[:, r"^own_elas"])
```

## 推定結果の応用

### 需要曲線と収入曲線を書く

```{julia}
data[!, :xi_fit] = resultGH.residuals;
```

```{julia}
targetNameID = 197
data[
    (data.year .== 2016) .& 
    (data.NameID .== targetNameID), 
    :]
```

```{julia}
priceVec = range(0.3, 5, step = 0.05);
salesVec = calculateSales.(
    priceVec, 2016, targetNameID, Ref(data), Ref(resultGH)
    );
```

```{julia}
plot(salesVec, priceVec, xticks = [50000, 100000, 150000], legend = false)
xlabel!("Sales")
ylabel!("Price (million JPY)")
```

```{julia}
plot(priceVec, priceVec .* salesVec / 1000, legend = false)
xlabel!("Price (million JPY)")
ylabel!("Revenue (billion JPY)")
```

### 収入を最大化する価格

```{julia}
@time resultMaxSales = optimize(
    x -> - calculateSales(
        x[1], 
        2016, 
        targetNameID, 
        data, 
        resultGH
        ) * x[1],
    [1.0]
);

@printf("Revenue-maximizing price: %.3f \n", resultMaxSales.minimizer[1])
@printf("Maximized revenue : %.3f", -resultMaxSales.minimum)
```
