---
title: "需要モデルの推定（基礎編 1）"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---


```{julia}
using CSV
using DataFrames
using StringEncodings
using FixedEffectModels
using RegressionTables
using Plots
using Optim
using Printf
using GLM
```

```{julia}
data = CSV.File(
    open(read, "data/demand_estimation/CleanData_20180222.csv", enc"shift-jis"),
    missingstring = ["NA", ""],
    ) |> DataFrame
first(select(data, Not([:base_color, :option_color])), 5)
```

```{julia}
dataHH = CSV.read("data/demand_estimation/HHsize.csv", DataFrame)
dataHH[!, :HH] = parse.(Int, replace.(dataHH.HH, "," => ""))
first(dataHH, 5)
```

```{julia}
dataCPI = CSV.File(
    open(read, "data/demand_estimation/zni2015s.csv", enc"shift-jis"), 
    select = 1:2,
    skipto = 7
    ) |> DataFrame
rename!(dataCPI, "類・品目" => "year", "総合" => "CPI")
first(dataCPI, 5)
```

## Data cleaning

```{julia}
data = data[!, [
        :Maker, :Type, :Name, :Year, :Sales, 
        :Model, :price, :kata, :weight, :FuelEfficiency, 
        :HorsePower, :overall_length, :overall_width, :overall_height
        ]]
rename!(data, "Year" => "year")
data = leftjoin(data, dataHH, on = :year)
data = leftjoin(data, dataCPI, on = :year)
first(data, 5)
```

```{julia}
dropmissing!(data, :FuelEfficiency);
```

```{julia}
cpi2016 = dataCPI[dataCPI.year .== 2016, "CPI"][1]
data[!, :price] = data.price ./ (data.CPI / cpi2016) / 100;
```

```{julia}
data[!, :size] = (data[:, :overall_length] / 1000) .* (data[:, :overall_width] / 1000) .* (data[:, :overall_height] / 1000);
data[!, :hppw] = data[:, :HorsePower] ./ data[:, :weight];

unique_name = unique(data[!, [:Name]])
unique_name[!, :NameID] = rownumber.(eachrow(unique_name))
data = leftjoin(data, unique_name, on = :Name);

data = transform(
    groupby(data, :year),
    :Sales => sum => :inside_total
);
data[!, :outside_total] = data.HH .- data.inside_total;
data[!, :share] = data.Sales ./ data.HH;
data[!, :share0] = data.outside_total ./ data.HH;
```

```{julia}
transform!(
    groupby(data, [:year, :Maker]),
    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_own, :FuelEfficiency_sum_own, :size_sum_own],
    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_own, :FuelEfficiency_sqr_sum_own, :size_sqr_sum_own],
    nrow => "group_n"
);
transform!(
    groupby(data, [:year]),
    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_mkt, :FuelEfficiency_sum_mkt, :size_sum_mkt],
    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_mkt, :FuelEfficiency_sqr_sum_mkt, :size_sqr_sum_mkt],
    nrow => "mkt_n"
);

```

```{julia}
data[!, :iv_BLP_own_hppw]             = data[:, :hppw_sum_own]           .- data[:, :hppw];
data[!, :iv_BLP_own_FuelEfficiency]   = data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency];
data[!, :iv_BLP_own_size]             = data[:, :size_sum_own]           .- data[:, :size];
data[!, :iv_BLP_other_hppw]           = data[:, :hppw_sum_mkt]           .- data[:, :hppw_sum_own];
data[!, :iv_BLP_other_FuelEfficiency] = data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own];
data[!, :iv_BLP_other_size]           = data[:, :size_sum_mkt]           .- data[:, :size_sum_own];

```

```{julia}
data[!, :iv_GH_own_hppw]             = (
    (data[:, :group_n] .- 1) .* data[:, :hppw].^2 .+ 
    (data[:, :hppw_sqr_sum_own] .- data[:, :hppw].^2) .- 
    2 .* data[:, :hppw] .* (data[:, :hppw_sum_own] .- data[:, :hppw])
);
data[!, :iv_GH_own_FuelEfficiency]   = (
    (data[:, :group_n] .- 1) .* data[:, :FuelEfficiency].^2 .+ 
    (data[:, :FuelEfficiency_sqr_sum_own] .- data[:, :FuelEfficiency].^2) .- 
    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency])
);
data[!, :iv_GH_own_size]             = (
    (data[:, :group_n] .- 1) .* data[:, :size].^2 .+ 
    (data[:, :size_sqr_sum_own] .- data[:, :size].^2) .- 
    2 .* data[:, :size] .* (data[:, :size_sum_own] .- data[:, :size])
);
data[!, :iv_GH_other_hppw]           = (
    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :hppw].^2 .+ 
    (data[:, :hppw_sqr_sum_mkt] .- data[:, :hppw_sqr_sum_own]) .- 
    2 .* data[:, :hppw] .* (data[:, :hppw_sum_mkt] .- data[:, :hppw_sum_own])
);
data[!, :iv_GH_other_FuelEfficiency] = (
    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :FuelEfficiency].^2 .+ 
    (data[:, :FuelEfficiency_sqr_sum_mkt] .- data[:, :FuelEfficiency_sqr_sum_own]) .- 
    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own])
);
data[!, :iv_GH_other_size]           = (
    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :size].^2 .+ 
    (data[:, :size_sqr_sum_mkt] .- data[:, :size_sqr_sum_own]) .- 
    2 .* data[:, :size] .* (data[:, :size_sum_mkt] .- data[:, :size_sum_own])
);

```


```{julia}
NIPPYOautoIDvec = [
    260, 4, 76, 104, 64, 54, 152, 153, 71, 197,
    42, 45, 114, 208, 209, 77, 236, 58, 127, 187,
    79, 175, 19, 117, 216, 112, 256, 119, 37, 158
];
```

```{julia}
data_NIPPYO = data[in(NIPPYOautoIDvec).(data[:, :NameID]), [:Sales, :price, :hppw, :FuelEfficiency, :size]];
data_NIPPYO[!, :log_sales] = log.(data_NIPPYO[:, :Sales]);
data_NIPPYO[!, :log_price] = log.(data_NIPPYO[:, :price]);
data_NIPPYO[!, :log10_sales] = log10.(data_NIPPYO[:, :Sales]);
data_NIPPYO[!, :log10_price] = log10.(data_NIPPYO[:, :price]);
```


```{julia}
ols_intro = reg(
    data_NIPPYO, 
    @formula(log_sales ~ log_price + hppw + FuelEfficiency + size),
    Vcov.robust()
)
```

```{julia}
fit_line = predict(
    lm(@formula(log10_sales ~ log10_price), data_NIPPYO)
    );
plot(
    data_NIPPYO.price, 
    data_NIPPYO.Sales, 
    seriestype = :scatter, 
    legend = false,
    xscale = :log10,
    yscale = :log10,
    xlabel = "Price",
    ylabel = "Sales",
    xticks = ([1, 3, 10], [1, 3, 10]),
)
plot!(
    data_NIPPYO.price, 
    10 .^ fit_line,
)
```

```{julia}
describe(data[:, [:Sales, :price, :FuelEfficiency, :size, :hppw]])
```

```{julia}
data[!, :logit_share] = log.(data[:, :share]) .- log.(data[:, :share0]);
```

```{julia}
ols_res = reg(data, @formula(logit_share ~ price + hppw + FuelEfficiency + size), Vcov.robust());
iv_BLP_res = reg(
    data, 
    @formula(logit_share ~ (
        price ~ iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + 
            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size
    ) + hppw + FuelEfficiency + size),
    Vcov.robust()
);
iv_GH_res = reg(
    data, 
    @formula(logit_share ~ (
        price ~ iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + 
            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size
    ) + hppw + FuelEfficiency + size),
    Vcov.robust(),
    save = true
);

```

```{julia}
regtable(ols_res, iv_BLP_res, iv_GH_res)
```


```{julia}
iv1st_BLP_res = reg(
    data, 
    @formula(price ~ hppw + FuelEfficiency + size +
            iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + 
            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size
        ),
    Vcov.robust()
);
iv1st_GH_res = reg(
    data, 
    @formula(price ~ hppw + FuelEfficiency + size +
            iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + 
            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size
        ),
    Vcov.robust()
);

```

```{julia}
regtable(iv1st_BLP_res, iv1st_GH_res)
```

```{julia}
data[!, :own_elas_ols]   = ols_res.coef[ols_res.coefnames .== "price"] .* data[:, :price] .* (1 .- data[:, :share]);
data[!, :own_elas_ivblp] = iv_BLP_res.coef[iv_BLP_res.coefnames .== "price"] .* data[:, :price] .* (1 .- data[:, :share]);
data[!, :own_elas_ivgh]  = iv_GH_res.coef[iv_GH_res.coefnames .== "price"] .* data[:, :price] .* (1 .- data[:, :share]);

```

```{julia}
describe(data[:, r"^own_elas"])
```

```{julia}
dt_application = data[:, [:NameID, :year, :Sales, :price, :FuelEfficiency, :size, :hppw, :HH, :share]];
dt_application[!, :xi_fit] = iv_GH_res.residuals;
```

```{julia}
NameID_target = 197
dt_application[(dt_application.year .== 2016) .& (dt_application.NameID .== NameID_target), :]
```

```{julia}
function f_share(
        price_cand,
        year, 
        NameID_target,
        dt,
        est_res
    )
    
    dt = dt[dt.year .== year, :]
    dt[!, :temp_price] = dt[:, :price]
    dt[(dt[:, :NameID] .== NameID_target), :temp_price] .= price_cand
    dt[!, :delta] = (
        est_res.coef[est_res.coefnames .== "(Intercept)"] .+
        est_res.coef[est_res.coefnames .== "hppw"] .* dt[:, :hppw] .+
        est_res.coef[est_res.coefnames .== "FuelEfficiency"] .* dt[:, :FuelEfficiency] .+
        est_res.coef[est_res.coefnames .== "size"] .* dt[:, :size] .+
        est_res.coef[est_res.coefnames .== "price"] .* dt[:, :temp_price] .+
        dt[:, :xi_fit]
    )
    dt[!, :denom] .= 1 .+ sum(exp.(dt[:, :delta]))
    dt[!, :pred_sales] = exp.(dt[:, :delta]) ./ dt[:, :denom] .* dt[:, :HH]
    dt = dt[dt.NameID .== NameID_target, :]
    
    return dt.pred_sales[1]
    
end
```

```{julia}
pricevec = range(0.3, 5, step = 0.05);
quantvec = f_share.(pricevec, 2016, NameID_target, Ref(dt_application), Ref(iv_GH_res));

```

```{julia}
plot(quantvec, pricevec, xticks = [50000, 100000, 150000], legend = false)
xlabel!("Sales")
ylabel!("Price (million JPY)")
```

```{julia}
plot(pricevec, pricevec .* quantvec / 1000, legend = false)
xlabel!("Price (million JPY)")
ylabel!("Revenue (billion JPY)")
```

```{julia}
opt_res = optimize(
    x -> - f_share(x[1], 2016, NameID_target, dt_application, iv_GH_res) * x[1],
    [1.0]
);

@printf("Revenue-maximizing price: %.3f \n", opt_res.minimizer[1])
@printf("Max revenue : %.3f", -opt_res.minimum)
```
