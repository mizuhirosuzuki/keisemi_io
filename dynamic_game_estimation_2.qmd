---
title: "推定 2"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using DataFrames
using Random
using Distributions
using JLD2
using Statistics
using StatsBase
using LinearAlgebra
using Optim
```

```{julia}
mutable struct global_param_struct
    beta::Float64
    eulergamma::Float64
    entryMat::Matrix{Int}
    numFirmsVec::Vector{Int}
    economyVec::Vector{Int}
    possibleActionArray::Array{Int, 3}
end

```

```{julia}
for file in readdir("functions/dynamic_game/")
    include("functions/dynamic_game/" * file)
end
```

## パラメタの設定


```{julia}
TransitionMat = [0.7 0.3; 0.4 0.6]

Random.seed!(123);

```

```{julia}

Parameters = [
    0.3,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

parameterMat = hcat([
    [Parameters[i]; Parameters[3:6]]
    for i in 1:2
]...);

```

```{julia}

NumSimPeriods = 100;
NumSimFirms = 2;
NumSimulations = 1000;
NumSimMarkets = 8;

NumSimMarketsInData = 500;

numBootSample = 100;

```

## 前章で生成したデータと推定したパラメタの読み込み

```{julia}

@load "tmp/dynamic_game/data_workspace.jld2";
@load "tmp/dynamic_game/estimates_1.jld2";

```

```{julia}
InitialState = hcat(1:8, 1:8);;
```

```{julia}

EVrandom = reshape(
    -log.(-log.(rand(NumSimMarkets * NumSimPeriods * NumSimFirms * NumSimulations * 8 * 3))),
    (NumSimMarkets, NumSimPeriods, NumSimFirms, NumSimulations, 8, 3)
);

UNIrandom = reshape(
    rand(NumSimMarkets * NumSimPeriods * NumSimulations),
    (NumSimMarkets, NumSimPeriods, NumSimulations)
);

```

```{julia}

@time Wstar = VSigmaGeneration(
    CCP1Mat[:, 2],
    CCP2Mat[:, 2],
    TransitionMat,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods,
    global_param
);

W1star = Wstar[1];
W2star = Wstar[2];

```

```{julia}

param1 = [parameterMat[:, 1]; 1];
param2 = [parameterMat[:, 2]; 1];

```

```{julia}
DataFrame(
    "True value" => exanteV1,
    "Simulated value" => W1star' * param1,
    "Difference" => exanteV1 - W1star' * param1
)
```

```{julia}
DataFrame(
    "True value" => exanteV2,
    "Simulated value" => W2star' * param2,
    "Difference" => exanteV2 - W2star' * param2
)
```


```{julia}
Normalized_TrueParam = [
    Parameters[1] - ((1 - global_param.beta) / global_param.beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
    Parameters[2] - ((1 - global_param.beta) / global_param.beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
];

normparam1 = [Normalized_TrueParam[1:5]; 1];
normparam2 = [Normalized_TrueParam[6:10]; 1];

```

```{julia}
DataFrame(
    "True value" => exanteV1,
    "Simulated value (original param)" => W1star' * param1,
    "Simulated value (normalized param)" => W1star' * normparam1
)
```

```{julia}
DataFrame(
    "True value" => exanteV2,
    "Simulated value (original param)" => W2star' * param2,
    "Simulated value (normalized param)" => W2star' * normparam2
)
```

```{julia}
println("Difference b/w two simulated values (with and without normalization)")
DataFrame(
    "Firm 1" => W1star' * param1 - W1star' * normparam1,
    "Firm 2" => W2star' * param2 - W2star' * normparam2,
)
```

## Forward simulationを用いたPesendorfer and Schmidt-Denglerによるパラメタの推定

```{julia}
@time Wstar = VSigmaGeneration(
    EstimatedCCP1Mat[:, 2],
    EstimatedCCP2Mat[:, 2],
    EstimatedTransition,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods,
    global_param
);

W1star = Wstar[1];
W2star = Wstar[2];
```


```{julia}
#| eval: false
#| echo: false
initial = [0.3375, 0.2375, -0.27, 0.45, -2.25];
@time Estimation_forward_PSD(
        initial,
        W1star,
        W2star,
        EstimatedTransition,
        EstimatedCCP1Mat,
        EstimatedCCP2Mat,
        global_param
    )
```

```{julia}
#| eval: false

initial = [0.3375, 0.2375, -0.27, 0.45, -2.25];

@time resultForwardPSD = optimize(
    x -> Estimation_forward_PSD(
        x,
        W1star,
        W2star,
        EstimatedTransition,
        EstimatedCCP1Mat,
        EstimatedCCP2Mat,
        global_param
    ),
    initial,
    Optim.Options(show_trace = false)
)

```

```{julia}
#| eval: false

bootindex = reshape(
    sample(1:NumSimMarketsInData, NumSimMarketsInData * numBootSample),
    (NumSimMarketsInData, numBootSample)
);

bootresult_transition = zeros(2, numBootSample);
bootresult_CCP1 = zeros(8, numBootSample);
bootresult_CCP2 = zeros(8, numBootSample);
bootresult_payoff = zeros(5, numBootSample);

```

```{julia}
#| eval: false

@time for b in 1:numBootSample

    bootsample = vcat(
        [FakeData[FakeData[:, 1] .== bootindex[m, b], :] for m in 1:NumSimMarketsInData]...
        );

    output = Bootstrap_PS_forward(
        bootsample, 
        global_param,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods
        );

    bootresult_payoff[:, b] = output[1].minimizer;
    bootresult_CCP1[:, b] = output[2][:, 2]
    bootresult_CCP2[:, b] = output[3][:, 2]
    bootresult_transition[:, b] = diag(output[4]);

end
```

```{julia}
#| echo: false
#| eval: false
@save "tmp/dynamic_game/estimates_2_Forward_PSD.jld2" bootresult_payoff resultForwardPSD;
```

```{julia}
#| echo: false
@load "tmp/dynamic_game/estimates_2_Forward_PSD.jld2";
```


```{julia}

DataFrame(
    "True param" => [Parameters[1:4]; Parameters[6]],
    "True param (normalized)" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimates" => resultForwardPSD.minimizer,
    "SE" => vec(std(bootresult_payoff, dims = 2))
)

```

## BBLの不等式推定量を用いたパラメタの推定

```{julia}

NumPerturbations = 200;

PerturbedCCP1 = reshape(
    clamp.(
        repeat(EstimatedCCP1Mat[:, 2], NumPerturbations) + 
        rand(Normal(0, .1), 8 * NumPerturbations),
        0.001, 0.999
    ),
    (8, NumPerturbations)
);

PerturbedCCP2 = reshape(
    clamp.(
        repeat(EstimatedCCP2Mat[:, 2], NumPerturbations) + 
        rand(Normal(0, .1), 8 * NumPerturbations),
        0.001, 0.999
    ),
    (8, NumPerturbations)
);

```

```{julia}

W1_all = zeros(6, NumSimMarkets, NumPerturbations);
W2_all = zeros(6, NumSimMarkets, NumPerturbations);

```

```{julia}
#| eval: false

@time for per in 1:NumPerturbations

    W1_p = VSigmaGeneration(
        PerturbedCCP1[:, per],
        EstimatedCCP2Mat[:, 2],
        EstimatedTransition,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        global_param
    );
    W1_all[:, :, per] = W1_p[1];

    W2_p = VSigmaGeneration(
        EstimatedCCP1Mat[:, 2],
        PerturbedCCP2[:, per],
        EstimatedTransition,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        global_param
    );
    W2_all[:, :, per] = W2_p[2];

end

```


```{julia}
#| eval: false
@time BBLobjective(
        initial,
        NumPerturbations,
        W1star,
        W2star,
        W1_all,
        W2_all
    )
```

```{julia}
#| eval: false

initial = [0.3, 0.2, -0.27, 0.45, -2.1];

@time resultBBL = optimize(
    x -> BBLobjective(
        x,
        NumPerturbations,
        W1star,
        W2star,
        W1_all,
        W2_all
    ),
    initial,
    Optim.Options(show_trace = false)
)

```

```{julia}
#| eval: false

bootindex = reshape(
    sample(1:NumSimMarketsInData, NumSimMarketsInData * numBootSample),
    (NumSimMarketsInData, numBootSample)
);

bootresult_transition_BBL = zeros(2, numBootSample);
bootresult_CCP1_BBL = zeros(8, numBootSample);
bootresult_CCP2_BBL = zeros(8, numBootSample);
bootresult_payoff_BBL = zeros(5, numBootSample);

```

```{julia}
#| eval: false

@time for b in 1:numBootSample

    bootsample = vcat(
        [FakeData[FakeData[:, 1] .== bootindex[m, b], :] for m in 1:NumSimMarketsInData]...
        );

    output = Bootstrap_BBL(
        bootsample, 
        global_param,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        NumPerturbations
        );

    bootresult_payoff_BBL[:, b] = output[1].minimizer;
    bootresult_CCP1_BBL[:, b] = output[2][:, 2]
    bootresult_CCP2_BBL[:, b] = output[3][:, 2]
    bootresult_transition_BBL[:, b] = diag(output[4]);

end
```

```{julia}
#| echo: false
#| eval: false
@save "tmp/dynamic_game/estimates_2_BBL.jld2" bootresult_payoff_BBL resultBBL;
```

```{julia}
#| echo: false
@load "tmp/dynamic_game/estimates_2_BBL.jld2";
```

```{julia}

DataFrame(
    "True param" => [Parameters[1:4]; Parameters[6]],
    "True param (normalized)" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimates" => resultBBL.minimizer,
    "SE" => vec(std(bootresult_payoff_BBL, dims = 2))
)

```

```{julia}
DataFrame(
    "True param" => [Parameters[1:4]; Parameters[6]],
    "True param (normalized)" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimates (Forward P-SD)" => resultForwardPSD.minimizer,
    "SE (Forward P-SD)" => vec(std(bootresult_payoff, dims = 2)),
    "Estimates (BBL)" => resultBBL.minimizer,
    "SE (BBL)" => vec(std(bootresult_payoff_BBL, dims = 2))
)
```

