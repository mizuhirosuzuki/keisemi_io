---
title: "推定 2"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using DataFrames
using Random
using Distributions
using JLD2
using Statistics
using StatsBase
using LinearAlgebra
using Optim
```


```{julia}
gamma
beta = 0.8;
eulergamma = Float64(MathConstants.eulergamma);
TransitionMat = [0.7 0.3; 0.4 0.6]

Random.seed!(123);

```

```{julia}

Parameters = [
    0.3,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

TrueParameterValues = [
    0.3,
    -0.27,
    0.45,
    -0.15,
    -2.10,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

```

```{julia}

NumSimPeriods = 100;
NumSimFirms = 2;
NumSimulations = 1000;
NumSimMarkets = 8;

```


```{julia}

@load "tmp/dynamic_game/data_workspace.jld2";
@load "tmp/dynamic_game/estimates_1.jld2";

```

```{julia}
#| code-fold: true
#| code-summary: "Functions defined previously"

function pi1gen(theta)

    base = [
        0,
        0,
        theta[1] + theta[3],
        theta[1] + theta[2] + theta[3],
        0,
        0,
        theta[1],
        theta[1] + theta[2]
    ];

    invdiv = [theta[4], 0, theta[5]];

    base = reshape(repeat(base, 3), (8, :));
    invdiv = reshape(repeat(invdiv, 8), (:, 8))';
    return base + invdiv;
end;

function pi2gen(theta)

    base = [
        0,
        theta[6] + theta[8],
        0,
        theta[6] + theta[7] + theta[8],
        0,
        theta[6],
        0,
        theta[6] + theta[7]
    ];

    invdiv = [theta[9], 0, theta[10]];

    base = reshape(repeat(base, 3), (8, :));
    invdiv = reshape(repeat(invdiv, 8), (:, 8))';
    return base + invdiv;
end;

function CCP1Transform(x)

    return [
        0 x[1] 1-x[1];
        0 x[2] 1-x[2];
        1-x[3] x[3] 0;
        1-x[4] x[4] 0;
        0 x[5] 1-x[5];
        0 x[6] 1-x[6];
        1-x[7] x[7] 0;
        1-x[8] x[8] 0;
    ]

end;

function CCP2Transform(x)

    return [
        0 x[1] 1-x[1];
        1-x[2] x[2] 0;
        0 x[3] 1-x[3];
        1-x[4] x[4] 0;
        0 x[5] 1-x[5];
        1-x[6] x[6] 0;
        0 x[7] 1-x[7];
        1-x[8] x[8] 0;
    ]

end;

function fP(Matrix1, Vec1, Vec2)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat1 = [
        Vec1[1] 1-Vec1[1];
        Vec1[2] 1-Vec1[2];
        1-Vec1[3] Vec1[3];
        1-Vec1[4] Vec1[4];
        Vec1[5] 1-Vec1[5];
        Vec1[6] 1-Vec1[6];
        1-Vec1[7] Vec1[7];
        1-Vec1[8] Vec1[8];
    ];
    TempMat1 = kron(TempMat1, [1 1]);
    TempMat1 = hcat(TempMat1, TempMat1);

    TempMat2 = [
        Vec2[1] 1-Vec2[1];
        1-Vec2[2] Vec2[2];
        Vec2[3] 1-Vec2[3];
        1-Vec2[4] Vec2[4];
        Vec2[5] 1-Vec2[5];
        1-Vec2[6] Vec2[6];
        Vec2[7] 1-Vec2[7];
        1-Vec2[8] Vec2[8];
    ];
    TempMat2 = kron(ones(1, 4), TempMat2);

    return TempMat0 .* TempMat1 .* TempMat2;

end;

function pi1PsigmaGen(pi1, Mat2)

    pi1_dec = pi1[:, 1];
    pi1_0 = pi1[:, 2];
    pi1_inc = pi1[:, 3];

    pi1_dec = (pi1_dec .* Mat2) * ones(3);
    pi1_0 = (pi1_0 .* Mat2) * ones(3);
    pi1_inc = (pi1_inc .* Mat2) * ones(3);

    return hcat(
        pi1_dec, pi1_0, pi1_inc
    )

end

function pi2PsigmaGen(pi2, Mat1)

    pi2_dec = pi2[:, 1];
    pi2_0 = pi2[:, 2];
    pi2_inc = pi2[:, 3];

    pi2_dec = (pi2_dec .* Mat1) * ones(3);
    pi2_0 = (pi2_0 .* Mat1) * ones(3);
    pi2_inc = (pi2_inc .* Mat1) * ones(3);

    return hcat(
        pi2_dec, pi2_0, pi2_inc
    )

end

function CCP1LogTransform(x)

    return [
        0 log(x[1]) log(1 - x[1]);
        0 log(x[2]) log(1 - x[2]);
        log(1 - x[3]) log(x[3]) 0;
        log(1 - x[4]) log(x[4]) 0;
        0 log(x[5]) log(1 - x[5]);
        0 log(x[6]) log(1 - x[6]);
        log(1 - x[7]) log(x[7]) 0;
        log(1 - x[8]) log(x[8]) 0;
    ]

end

function CCP2LogTransform(x)

    return [
        0 log(x[1]) log(1 - x[1]);
        log(1 - x[2]) log(x[2]) 0;
        0 log(x[3]) log(1 - x[3]);
        log(1 - x[4]) log(x[4]) 0;
        0 log(x[5]) log(1 - x[5]);
        log(1 - x[6]) log(x[6]) 0;
        0 log(x[7]) log(1 - x[7]);
        log(1 - x[8]) log(x[8]) 0;
    ]

end

function fP_a1given(Matrix1, Vec2)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat2 = [
        Vec2[1] 1-Vec2[1] Vec2[1] 1-Vec2[1];
        1-Vec2[2] Vec2[2] 1-Vec2[2] Vec2[2];
        Vec2[3] 1-Vec2[3] Vec2[3] 1-Vec2[3];
        1-Vec2[4] Vec2[4] 1-Vec2[4] Vec2[4];
        Vec2[5] 1-Vec2[5] Vec2[5] 1-Vec2[5];
        1-Vec2[6] Vec2[6] 1-Vec2[6] Vec2[6];
        Vec2[7] 1-Vec2[7] Vec2[7] 1-Vec2[7];
        1-Vec2[8] Vec2[8] 1-Vec2[8] Vec2[8];
    ];
    TempMat2 = hcat(TempMat2, TempMat2);

    MatAdjustMinus1 = repeat(vcat(
        zeros(2, 8), ones(2, 8)
    ), 2);
    MatAdjustMinus2 = repeat(vcat(
        ones(2, 8), zeros(2, 8)
    ), 2)';
    output1 = TempMat0 .* TempMat2 .* MatAdjustMinus1 .* MatAdjustMinus2;


    ForZero = diagm(ones(2));
    MatAdjustZero = kron(ForZero, ones(2, 2));
    MatAdjustZero = hcat(MatAdjustZero, MatAdjustZero);
    MatAdjustZero = vcat(MatAdjustZero, MatAdjustZero);
    output2 = TempMat0 .* TempMat2 .* MatAdjustZero;


    MatAdjustPlus1 = repeat(vcat(
        ones(2, 8), zeros(2, 8)
    ), 2);
    MatAdjustPlus2 = repeat(vcat(
        zeros(2, 8), ones(2, 8)
    ), 2)';
    output3 = TempMat0 .* TempMat2 .* MatAdjustPlus1 .* MatAdjustPlus2;

    return [output1, output2, output3]
end

function fP_a2given(Matrix1, Vec1)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat1 = [
        Vec1[1] Vec1[1] 1-Vec1[1] 1-Vec1[1];
        Vec1[2] Vec1[2] 1-Vec1[2] 1-Vec1[2];
        1-Vec1[3] 1-Vec1[3] Vec1[3] Vec1[3];
        1-Vec1[4] 1-Vec1[4] Vec1[4] Vec1[4];
        Vec1[5] Vec1[5] 1-Vec1[5] 1-Vec1[5];
        Vec1[6] Vec1[6] 1-Vec1[6] 1-Vec1[6];
        1-Vec1[7] 1-Vec1[7] Vec1[7] Vec1[7];
        1-Vec1[8] 1-Vec1[8] Vec1[8] Vec1[8];
    ];
    TempMat1 = kron(ones(1, 2), TempMat1);

    MatAdjustMinus1 = repeat(vcat(zeros(1, 8), ones(1, 8)), 4);
    MatAdjustMinus2 = repeat(vcat(ones(1, 8), zeros(1, 8)), 4)';
    output1 = TempMat0 .* TempMat1 .* MatAdjustMinus1 .* MatAdjustMinus2;


    MatAdjustZero = repeat(vcat(
        repeat([1, 0], 4)',
        repeat([0, 1], 4)',
    ), 4);
    output2 = TempMat0 .* TempMat1 .* MatAdjustZero;


    MatAdjustPlus1 = repeat(vcat(ones(1, 8), zeros(1, 8)), 4);
    MatAdjustPlus2 = repeat(vcat(zeros(1, 8), ones(1, 8)), 4)';
    output3 = TempMat0 .* TempMat1 .* MatAdjustPlus1 .* MatAdjustPlus2;

    return [output1, output2, output3]
end


```
```{julia}
InitialState = hcat(1:8, 1:8);;
```

```{julia}

EVrandom = reshape(
    -log.(-log.(rand(NumSimMarkets * NumSimPeriods * NumSimFirms * NumSimulations * 8 * 3))),
    (NumSimMarkets, NumSimPeriods, NumSimFirms, NumSimulations, 8, 3)
);

UNIrandom = reshape(
    rand(NumSimMarkets * NumSimPeriods * NumSimulations),
    (NumSimMarkets, NumSimPeriods, NumSimulations)
);

```

```{julia}
#| code-fold: true
#| code-summary: "Vsigma"

function VSigmaGeneration(
    CCP1,
    CCP2,
    EstimatedTransition,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods,
    beta
)

    W1 = zeros(6, NumSimMarkets, NumSimulations);
    W2 = zeros(6, NumSimMarkets, NumSimulations);

    ThresholdValue1 = log.(CCP1) - log.(1 .- CCP1);
    ThresholdValue2 = log.(CCP2) - log.(1 .- CCP2);

    for mrkt in 1:NumSimMarkets, sim in 1:NumSimulations

        State = InitialState[mrkt, 2];

        for t in 1:NumSimPeriods
        
            DiffEpsilon1inc = -EVrandom[mrkt, t, 1, sim, State, 2] + EVrandom[mrkt, t, 1, sim, State, 3];
            DiffEpsilon1dec = -EVrandom[mrkt, t, 1, sim, State, 2] + EVrandom[mrkt, t, 1, sim, State, 1];

            DiffEpsilon2inc = -EVrandom[mrkt, t, 2, sim, State, 2] + EVrandom[mrkt, t, 2, sim, State, 3];
            DiffEpsilon2dec = -EVrandom[mrkt, t, 2, sim, State, 2] + EVrandom[mrkt, t, 2, sim, State, 1];

            DiffFirm1inc = ThresholdValue1[State] - DiffEpsilon1inc;
            DiffFirm1dec = ThresholdValue1[State] - DiffEpsilon1dec;

            DiffFirm2inc = ThresholdValue2[State] - DiffEpsilon2inc;
            DiffFirm2dec = ThresholdValue2[State] - DiffEpsilon2dec;

            if State in [1, 2, 5, 6]
                a1 = 0 * (DiffFirm1inc > 0) + 1 * (DiffFirm1inc < 0);
                e1 = (1 - a1) * EVrandom[mrkt, t, 1, sim, State, 2] + a1 * EVrandom[mrkt, t, 1, sim, State, 3];
            else
                a1 = 0 * (DiffFirm1dec > 0) + 1 * (DiffFirm1dec < 0);
                e1 = (1 - a1) * EVrandom[mrkt, t, 1, sim, State, 2] + a1 * EVrandom[mrkt, t, 1, sim, State, 1];
            end

            if State in [1, 3, 5, 7]
                a2 = 0 * (DiffFirm2inc > 0) + 1 * (DiffFirm2inc < 0);
                e2 = (1 - a2) * EVrandom[mrkt, t, 2, sim, State, 2] + a2 * EVrandom[mrkt, t, 2, sim, State, 3];
            else
                a2 = 0 * (DiffFirm2dec > 0) + 1 * (DiffFirm2dec < 0);
                e2 = (1 - a2) * EVrandom[mrkt, t, 2, sim, State, 2] + a2 * EVrandom[mrkt, t, 2, sim, State, 1];
            end

            if State == 1
                W1Seed = [0, 0, 0, 0, a1, e1];
                W2Seed = [0, 0, 0, 0, a2, e2];

                NextState = 1 + 2 * a1 + a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] > EstimatedTransition[1, 1])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 2
                W1Seed = [0, 0, 0, 0, a1, e1];
                W2Seed = [1, 0, 1, a2, 0, e2];

                NextState = 2 + 2 * a1 - a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] > EstimatedTransition[1, 1])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 3
                W1Seed = [1, 0, 1, a1, 0, e1];
                W2Seed = [0, 0, 0, 0, a2, e2];

                NextState = 3 - 2 * a1 + a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] > EstimatedTransition[1, 1])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 4
                W1Seed = [1, 1, 1, a1, 0, e1];
                W2Seed = [1, 1, 1, a2, 0, e2];

                NextState = 4 - 2 * a1 - a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] > EstimatedTransition[1, 1])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 5
                W1Seed = [0, 0, 0, 0, a1, e1];
                W2Seed = [0, 0, 0, 0, a2, e2];

                NextState = 1 + 2 * a1 + a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] < EstimatedTransition[2, 2])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 6
                W1Seed = [0, 0, 0, 0, a1, e1];
                W2Seed = [1, 0, 0, a2, 0, e2];

                NextState = 2 + 2 * a1 - a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] < EstimatedTransition[2, 2])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 7
                W1Seed = [1, 0, 0, a1, 0, e1];
                W2Seed = [0, 0, 0, 0, a2, e2];

                NextState = 3 - 2 * a1 + a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] < EstimatedTransition[2, 2])
                NextState = 4 * TransitionSeed + NextState;
            elseif State == 8
                W1Seed = [1, 1, 0, a1, 0, e1];
                W2Seed = [1, 1, 0, a2, 0, e2];

                NextState = 4 - 2 * a1 - a2;
                TransitionSeed = (UNIrandom[mrkt, t, sim] < EstimatedTransition[2, 2])
                NextState = 4 * TransitionSeed + NextState;
            end

            W1[:, mrkt, sim] += (beta.^(t - 1)).*W1Seed;
            W2[:, mrkt, sim] += (beta.^(t - 1)).*W2Seed;

            State = NextState;
        end

    end

    W1out = mean(W1, dims = 3)[:, :, 1];
    W2out = mean(W2, dims = 3)[:, :, 1];

    return [W1out, W2out]

end


```

```{julia}

@time Wstar = VSigmaGeneration(
    CCP1UpdatedMat[:, 2],
    CCP2UpdatedMat[:, 2],
    TransitionMat,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods,
    beta
);

W1star = Wstar[1];
W2star = Wstar[2];

```

```{julia}

param1 = [TrueParameterValues[1:5]; 1];
param2 = [TrueParameterValues[6:10]; 1];

```

```{julia}
DataFrame(
    "True value" => ExanteV1,
    "Simulated value" => W1star' * param1,
    "Difference" => ExanteV1Updated - W1star' * param1
)
```

```{julia}
DataFrame(
    "True value" => ExanteV2,
    "Simulated value" => W2star' * param2,
    "Difference" => ExanteV2Updated - W2star' * param2
)
```


```{julia}
Normalized_TrueParam = [
    Parameters[1] - ((1 - beta) / beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
    Parameters[2] - ((1 - beta) / beta) * Parameters[5],
    Parameters[3],
    Parameters[4],
    0,
    Parameters[6] + Parameters[5],
];

normparam1 = [Normalized_TrueParam[1:5]; 1];
normparam2 = [Normalized_TrueParam[6:10]; 1];

```

```{julia}
DataFrame(
    "True value" => ExanteV1,
    "Simulated value (original param)" => W1star' * param1,
    "Simulated value (normalized param)" => W1star' * normparam1
)
```

```{julia}
DataFrame(
    "True value" => ExanteV2,
    "Simulated value (original param)" => W2star' * param2,
    "Simulated value (normalized param)" => W2star' * normparam2
)
```

```{julia}
println("Difference b/w two simulated values (with and without normalization)")
DataFrame(
    "Firm 1" => W1star' * param1 - W1star' * normparam1,
    "Firm 2" => W2star' * param2 - W2star' * normparam2,
)
```

```{julia}
@time Wstar = VSigmaGeneration(
    EstimatedCCP1,
    EstimatedCCP2,
    EstimatedTransition,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods,
    beta
);

W1star = Wstar[1];
W2star = Wstar[2];
```


```{julia}
#| code-fold: true
#| code-summary: "Estimation with Forward PS-D"

function Estimation_forward_PSD(
    param,
    W1star,
    W2star,
    TransitionMat,
    CCP1,
    CCP2,
    beta
)

    NumMaxchoices = 3;

    param1 = [param[1:5]; 1];
    param2 = [param[6:10]; 1];

    ExanteV1 = W1star' * param1;
    ExanteV2 = W2star' * param2;

    CCP1Adjuster = [
        0 1 1;
        0 1 1;
        1 1 0;
        1 1 0
    ];
    CCP1Adjuster = repeat(CCP1Adjuster, 2);

    CCP2Adjuster = [
        0 1 1;
        1 1 0;
        0 1 1;
        1 1 0
    ];
    CCP2Adjuster = repeat(CCP2Adjuster, 2);

    pi1 = pi1gen(param) .* CCP1Adjuster;
    pi2 = pi2gen(param) .* CCP2Adjuster;

    CCP1Mat = CCP1Transform(CCP1);
    CCP2Mat = CCP2Transform(CCP2);

    fPsigma = fP(TransitionMat, CCP1, CCP2);

    pi1Psigma = pi1PsigmaGen(pi1, CCP2Mat);
    pi2Psigma = pi2PsigmaGen(pi2, CCP1Mat);

    eP1 = eulergamma .- CCP1LogTransform(CCP1);
    eP2 = eulergamma .- CCP2LogTransform(CCP2);

    fP_a1 = fP_a1given(TransitionMat, CCP2);
    fP_a2 = fP_a2given(TransitionMat, CCP1);

    NewSigmaSeed1 = (
        pi1Psigma + beta .* hcat(fP_a1[1] * ExanteV1, fP_a1[2] * ExanteV1, fP_a1[3] * ExanteV1) .* CCP1Adjuster
    );
    NewSigmaDeno1 = (
        sum(exp.(NewSigmaSeed1), dims = 2) .- 1
    );
    NewSigma1 = exp.(NewSigmaSeed1) ./ NewSigmaDeno1;
    CCP1UpdatedMat = NewSigma1 .* CCP1Adjuster;
    CCP1Updated = CCP1UpdatedMat[:, 2];

    NewSigmaSeed2 = (
        pi2Psigma + beta .* hcat(fP_a2[1] * ExanteV2, fP_a2[2] * ExanteV2, fP_a2[3] * ExanteV2) .* CCP2Adjuster
    );
    NewSigmaDeno2 = (
        sum(exp.(NewSigmaSeed2), dims = 2) .- 1
    );
    NewSigma2 = exp.(NewSigmaSeed2) ./ NewSigmaDeno2;
    CCP2UpdatedMat = NewSigma2 .* CCP2Adjuster;
    CCP2Updated = CCP2UpdatedMat[:, 2];

    return sqL2dist(CCP1Updated, CCP1) + sqL2dist(CCP2Updated, CCP2)

end

```


```{julia}

initial = [0.3375, 0.2375, -0.27, 0.45, -2.25];

@time res = optimize(
    x -> Estimation_forward_PSD(
        [x[1]; x[3:4]; [0]; x[5]; x[2]; x[3:4]; [0]; x[5]],
        W1star,
        W2star,
        EstimatedTransition,
        EstimatedCCP1,
        EstimatedCCP2,
        beta
    ),
    initial,
    Optim.Options(show_trace = false)
)

```

```{julia}

function Bootstrap_PS_forward(
    FakeData,
    beta,
    EVrandom,
    UNIrandom,
    InitialState,
    NumSimMarkets,
    NumSimulations,
    NumSimPeriods
)

    EstimatedCCP1 = zeros(8, 1);
    EstimatedCCP2 = zeros(8, 1);

    for s in 1:8
        SubData = FakeData[FakeData[:, 3] .== s, :];
        EstimatedCCP1[s] = mean(SubData[:, 7] .== 0);
        EstimatedCCP2[s] = mean(SubData[:, 8] .== 0);
    end

    EstimatedTransition = zeros(2, 2);

    SubData = hcat(FakeData, [[0]; FakeData[1:(end - 1), 4]]);
    SubData = SubData[SubData[:, 2] .!= 1, :];

    for z in 1:2
        SubDataZ = SubData[SubData[:, 4] .== z, :];
        EstimatedTransition[z, z] = mean(SubDataZ[:, 9] .== z);
        EstimatedTransition[z, 3 - z] = 1 - EstimatedTransition[z, z];
    end

    SubData = hcat(FakeData, [[0]; FakeData[1:(end - 1), 4]]);
    SubData = SubData[SubData[:, 2] .!= 1, :];

    for z in 1:2
        SubDataZ = SubData[SubData[:, 4] .== z, :];
        EstimatedTransition[z, z] = mean(SubDataZ[:, 9] .== z);
        EstimatedTransition[z, 3 - z] = 1 - EstimatedTransition[z, z];
    end




    output = VSigmaGeneration(
        EstimatedCCP1,
        EstimatedCCP2,
        EstimatedTransition,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        beta
    );

    W1star = output[1];
    W2star = output[2];

    initial = [0.3, 0.2, -0.27, 0.45, -2.1];

    result = optimize(
        x -> Estimation_forward_PSD(
            [x[1]; x[3:4]; [0]; x[5]; x[2]; x[3:4]; [0]; x[5]],
            W1star,
            W2star,
            EstimatedTransition,
            EstimatedCCP1,
            EstimatedCCP2,
            beta
        ),
        initial,
        Optim.Options(show_trace = false)
    )

    return [
        result,
        EstimatedCCP1,
        EstimatedCCP2,
        EstimatedTransition
    ]
end

```

```{julia}

numBootSample = 100;

bootindex = reshape(
    sample(1:500, 500 * numBootSample),
    (500, numBootSample)
);

bootresult_transition = zeros(2, numBootSample);
bootresult_CCP1 = zeros(8, numBootSample);
bootresult_CCP2 = zeros(8, numBootSample);
bootresult_payoff = zeros(5, numBootSample);

```

```{julia}

@time for b in 1:numBootSample

    bootsample = zeros(500 * 50, 8);
    for m in 1:500
        temp = FakeData[FakeData[:, 1] .== bootindex[m, b], :];
        bootsample[(1 + 50 * (m - 1)):(50 * m), :] = temp;
    end

    output = Bootstrap_PS_forward(
        bootsample, 
        beta,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods
        );

    bootresult_payoff[:, b] = output[1].minimizer;
    bootresult_CCP1[:, b] = output[2]
    bootresult_CCP2[:, b] = output[3]
    bootresult_transition[:, b] = diag(output[4]);

end
```


```{julia}

DataFrame(
    "True param" => [Parameters[1:4]; Parameters[6]],
    "True param (normalized)" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimates" => res.minimizer,
    "SE" => vec(std(bootresult_payoff, dims = 2))
)

```

# 6

```{julia}

NumPerturbations = 200;

PerturbedCCP1 = reshape(
    clamp.(
        repeat(EstimatedCCP1, NumPerturbations) + 
        rand(Normal(0, .1), 8 * NumPerturbations),
        0.001, 0.999
    ),
    (8, NumPerturbations)
);

PerturbedCCP2 = reshape(
    clamp.(
        repeat(EstimatedCCP2, NumPerturbations) + 
        rand(Normal(0, .1), 8 * NumPerturbations),
        0.001, 0.999
    ),
    (8, NumPerturbations)
);

```

```{julia}

W1_all = zeros(6, NumSimMarkets, NumPerturbations);
W2_all = zeros(6, NumSimMarkets, NumPerturbations);

```

```{julia}

@time for per in 1:NumPerturbations

    W1_p = VSigmaGeneration(
        PerturbedCCP1[:, per],
        EstimatedCCP2,
        EstimatedTransition,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        beta
    );
    W1_all[:, :, per] = W1_p[1];

    W2_p = VSigmaGeneration(
        EstimatedCCP1,
        PerturbedCCP2[:, per],
        EstimatedTransition,
        EVrandom,
        UNIrandom,
        InitialState,
        NumSimMarkets,
        NumSimulations,
        NumSimPeriods,
        beta
    );
    W2_all[:, :, per] = W2_p[2];

end

```

```{julia}

function BBLobjective(
    theta,
    NumPerturbations,
    W1star,
    W2star,
    W1_all,
    W2_all
    )

    Param1 = [theta[1:5]; 1];
    Param2 = [theta[6:10]; 1];

    objvalue = 0;

    for per in 1:NumPerturbations

        temp1 = min.(W1star' * Param1 - W1_all[:, :, per]' * Param1, 0);
        temp2 = min.(W2star' * Param2 - W2_all[:, :, per]' * Param2, 0);

        objvalue += temp1' * temp1 + temp2' * temp2;
    end

    return objvalue
end

```

```{julia}

initial = [0.3, 0.2, -0.27, 0.45, -2.1];

@time opt = optimize(
    x -> BBLobjective(
        [x[1]; x[3:4]; [0]; x[5]; x[2]; x[3:4]; [0]; x[5]],
        NumPerturbations,
        W1star,
        W2star,
        W1_all,
        W2_all
    ),
    initial,
    Optim.Options(show_trace = false)
)

```

```{julia}

# TODO
# Bootstrap

```

```{julia}

DataFrame(
    "True param" => [Parameters[1:4]; Parameters[6]],
    "True param (normalized)" => Normalized_TrueParam[[1, 6, 2, 3, 5]],
    "Estimates" => opt.minimizer
)

```
