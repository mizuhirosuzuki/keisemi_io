---
title: "反実仮想シミュレーション"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using Plots
```

```{julia}

beta = 0.8;
eulergamma = Float64(MathConstants.eulergamma);
TransitionMat = [0.7 0.3; 0.4 0.6]

Random.seed!(123);

NumSimPeriods = 15;

```

```{julia}

BaselineParameterValues = [
    0.3,
    -0.27,
    0.45,
    -0.15,
    -2.10,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

```  

```{julia}

CCP1Adjuster = [
    0 1 1;
    0 1 1;
    1 1 0;
    1 1 0
];
CCP1Adjuster = vcat(CCP1Adjuster, CCP1Adjuster);

CCP2Adjuster = [
    0 1 1;
    1 1 0;
    0 1 1;
    1 1 0
];
CCP2Adjuster = vcat(CCP2Adjuster, CCP2Adjuster);

```

```{julia}
#| code-fold: true
#| code-summary: "Functions defined previously"

function pi1gen(theta)

    base = [
        0,
        0,
        theta[1] + theta[3],
        theta[1] + theta[2] + theta[3],
        0,
        0,
        theta[1],
        theta[1] + theta[2]
    ];

    invdiv = [theta[4], 0, theta[5]];

    base = reshape(repeat(base, 3), (8, :));
    invdiv = reshape(repeat(invdiv, 8), (:, 8))';
    return base + invdiv;
end;

function pi2gen(theta)

    base = [
        0,
        theta[6] + theta[8],
        0,
        theta[6] + theta[7] + theta[8],
        0,
        theta[6],
        0,
        theta[6] + theta[7]
    ];

    invdiv = [theta[9], 0, theta[10]];

    base = reshape(repeat(base, 3), (8, :));
    invdiv = reshape(repeat(invdiv, 8), (:, 8))';
    return base + invdiv;
end;

function CCP1Transform(x)

    return [
        0 x[1] 1-x[1];
        0 x[2] 1-x[2];
        1-x[3] x[3] 0;
        1-x[4] x[4] 0;
        0 x[5] 1-x[5];
        0 x[6] 1-x[6];
        1-x[7] x[7] 0;
        1-x[8] x[8] 0;
    ]

end;

function CCP2Transform(x)

    return [
        0 x[1] 1-x[1];
        1-x[2] x[2] 0;
        0 x[3] 1-x[3];
        1-x[4] x[4] 0;
        0 x[5] 1-x[5];
        1-x[6] x[6] 0;
        0 x[7] 1-x[7];
        1-x[8] x[8] 0;
    ]

end;

function fP(Matrix1, Vec1, Vec2)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat1 = [
        Vec1[1] 1-Vec1[1];
        Vec1[2] 1-Vec1[2];
        1-Vec1[3] Vec1[3];
        1-Vec1[4] Vec1[4];
        Vec1[5] 1-Vec1[5];
        Vec1[6] 1-Vec1[6];
        1-Vec1[7] Vec1[7];
        1-Vec1[8] Vec1[8];
    ];
    TempMat1 = kron(TempMat1, [1 1]);
    TempMat1 = hcat(TempMat1, TempMat1);

    TempMat2 = [
        Vec2[1] 1-Vec2[1];
        1-Vec2[2] Vec2[2];
        Vec2[3] 1-Vec2[3];
        1-Vec2[4] Vec2[4];
        Vec2[5] 1-Vec2[5];
        1-Vec2[6] Vec2[6];
        Vec2[7] 1-Vec2[7];
        1-Vec2[8] Vec2[8];
    ];
    TempMat2 = kron(ones(1, 4), TempMat2);

    return TempMat0 .* TempMat1 .* TempMat2;

end;

function pi1PsigmaGen(pi1, Mat2)

    pi1_dec = pi1[:, 1];
    pi1_0 = pi1[:, 2];
    pi1_inc = pi1[:, 3];

    pi1_dec = (pi1_dec .* Mat2) * ones(3);
    pi1_0 = (pi1_0 .* Mat2) * ones(3);
    pi1_inc = (pi1_inc .* Mat2) * ones(3);

    return hcat(
        pi1_dec, pi1_0, pi1_inc
    )

end

function pi2PsigmaGen(pi2, Mat1)

    pi2_dec = pi2[:, 1];
    pi2_0 = pi2[:, 2];
    pi2_inc = pi2[:, 3];

    pi2_dec = (pi2_dec .* Mat1) * ones(3);
    pi2_0 = (pi2_0 .* Mat1) * ones(3);
    pi2_inc = (pi2_inc .* Mat1) * ones(3);

    return hcat(
        pi2_dec, pi2_0, pi2_inc
    )

end

function CCP1LogTransform(x)

    return [
        0 log(x[1]) log(1 - x[1]);
        0 log(x[2]) log(1 - x[2]);
        log(1 - x[3]) log(x[3]) 0;
        log(1 - x[4]) log(x[4]) 0;
        0 log(x[5]) log(1 - x[5]);
        0 log(x[6]) log(1 - x[6]);
        log(1 - x[7]) log(x[7]) 0;
        log(1 - x[8]) log(x[8]) 0;
    ]

end

function CCP2LogTransform(x)

    return [
        0 log(x[1]) log(1 - x[1]);
        log(1 - x[2]) log(x[2]) 0;
        0 log(x[3]) log(1 - x[3]);
        log(1 - x[4]) log(x[4]) 0;
        0 log(x[5]) log(1 - x[5]);
        log(1 - x[6]) log(x[6]) 0;
        0 log(x[7]) log(1 - x[7]);
        log(1 - x[8]) log(x[8]) 0;
    ]

end

function fP_a1given(Matrix1, Vec2)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat2 = [
        Vec2[1] 1-Vec2[1] Vec2[1] 1-Vec2[1];
        1-Vec2[2] Vec2[2] 1-Vec2[2] Vec2[2];
        Vec2[3] 1-Vec2[3] Vec2[3] 1-Vec2[3];
        1-Vec2[4] Vec2[4] 1-Vec2[4] Vec2[4];
        Vec2[5] 1-Vec2[5] Vec2[5] 1-Vec2[5];
        1-Vec2[6] Vec2[6] 1-Vec2[6] Vec2[6];
        Vec2[7] 1-Vec2[7] Vec2[7] 1-Vec2[7];
        1-Vec2[8] Vec2[8] 1-Vec2[8] Vec2[8];
    ];
    TempMat2 = hcat(TempMat2, TempMat2);

    MatAdjustMinus1 = repeat(vcat(
        zeros(2, 8), ones(2, 8)
    ), 2);
    MatAdjustMinus2 = repeat(vcat(
        ones(2, 8), zeros(2, 8)
    ), 2)';
    output1 = TempMat0 .* TempMat2 .* MatAdjustMinus1 .* MatAdjustMinus2;


    ForZero = diagm(ones(2));
    MatAdjustZero = kron(ForZero, ones(2, 2));
    MatAdjustZero = hcat(MatAdjustZero, MatAdjustZero);
    MatAdjustZero = vcat(MatAdjustZero, MatAdjustZero);
    output2 = TempMat0 .* TempMat2 .* MatAdjustZero;


    MatAdjustPlus1 = repeat(vcat(
        ones(2, 8), zeros(2, 8)
    ), 2);
    MatAdjustPlus2 = repeat(vcat(
        zeros(2, 8), ones(2, 8)
    ), 2)';
    output3 = TempMat0 .* TempMat2 .* MatAdjustPlus1 .* MatAdjustPlus2;

    return [output1, output2, output3]
end

function fP_a2given(Matrix1, Vec1)

    TempMat0 = kron(Matrix1, ones(4, 4));

    TempMat1 = [
        Vec1[1] Vec1[1] 1-Vec1[1] 1-Vec1[1];
        Vec1[2] Vec1[2] 1-Vec1[2] 1-Vec1[2];
        1-Vec1[3] 1-Vec1[3] Vec1[3] Vec1[3];
        1-Vec1[4] 1-Vec1[4] Vec1[4] Vec1[4];
        Vec1[5] Vec1[5] 1-Vec1[5] 1-Vec1[5];
        Vec1[6] Vec1[6] 1-Vec1[6] 1-Vec1[6];
        1-Vec1[7] 1-Vec1[7] Vec1[7] Vec1[7];
        1-Vec1[8] 1-Vec1[8] Vec1[8] Vec1[8];
    ];
    TempMat1 = kron(ones(1, 2), TempMat1);

    MatAdjustMinus1 = repeat(vcat(zeros(1, 8), ones(1, 8)), 4);
    MatAdjustMinus2 = repeat(vcat(ones(1, 8), zeros(1, 8)), 4)';
    output1 = TempMat0 .* TempMat1 .* MatAdjustMinus1 .* MatAdjustMinus2;


    MatAdjustZero = repeat(vcat(
        repeat([1, 0], 4)',
        repeat([0, 1], 4)',
    ), 4);
    output2 = TempMat0 .* TempMat1 .* MatAdjustZero;


    MatAdjustPlus1 = repeat(vcat(ones(1, 8), zeros(1, 8)), 4);
    MatAdjustPlus2 = repeat(vcat(zeros(1, 8), ones(1, 8)), 4)';
    output3 = TempMat0 .* TempMat1 .* MatAdjustPlus1 .* MatAdjustPlus2;

    return [output1, output2, output3]
end


```

```{julia}
pi1 = pi1gen(BaselineParameterValues) .* CCP1Adjuster;
pi2 = pi2gen(BaselineParameterValues) .* CCP2Adjuster;
```

## 2

```{julia}

function f_MPE(
    TransitionMat,
    pi1,
    pi2,
    beta
)

    CCP1Adjuster = [
        0 1 1;
        0 1 1;
        1 1 0;
        1 1 0
    ];
    CCP1Adjuster = vcat(CCP1Adjuster, CCP1Adjuster);

    CCP2Adjuster = [
        0 1 1;
        1 1 0;
        0 1 1;
        1 1 0
    ];
    CCP2Adjuster = vcat(CCP2Adjuster, CCP2Adjuster);

    CCP1 = repeat([0.5], 8);
    CCP2 = repeat([0.5], 8);

    ExanteV1 = ones(8);
    ExanteV2 = ones(8);

    DiffExanteV = 1;

    while DiffExanteV > 1e-12

        CCP1Mat = CCP1Transform(CCP1);
        CCP2Mat = CCP2Transform(CCP2);

        fPsigma = fP(TransitionMat, CCP1, CCP2);

        pi1Psigma = pi1PsigmaGen(pi1, CCP2Mat);
        pi2Psigma = pi2PsigmaGen(pi2, CCP1Mat);

        eP1 = eulergamma .- CCP1LogTransform(CCP1);
        eP2 = eulergamma .- CCP2LogTransform(CCP2);
        
        ExanteV1Updated = (
            (diagm(ones(8)) - beta .* fPsigma) \ 
            ((CCP1Mat .* (pi1Psigma + eP1)) * ones(3))
        );

        ExanteV2Updated = (
            (diagm(ones(8)) - beta .* fPsigma) \ 
            ((CCP2Mat .* (pi2Psigma + eP2)) * ones(3))
        );

        fP_a1 = fP_a1given(TransitionMat, CCP2);
        fP_a2 = fP_a2given(TransitionMat, CCP1);

        NewSigmaSeed1 = (
            pi1Psigma + beta .* hcat(
                fP_a1[1] * ExanteV1Updated, fP_a1[2] * ExanteV1Updated, fP_a1[3] * ExanteV1Updated
                ) .* CCP1Adjuster
        );
        NewSigmaDeno1 = (
            sum(exp.(NewSigmaSeed1), dims = 2) .- 1
        );
        NewSigma1 = exp.(NewSigmaSeed1) ./ NewSigmaDeno1;
        CCP1UpdatedMat = NewSigma1 .* CCP1Adjuster;
        CCP1Updated = CCP1UpdatedMat[:, 2];

        NewSigmaSeed2 = (
            pi2Psigma + beta .* hcat(
                fP_a2[1] * ExanteV2Updated, fP_a2[2] * ExanteV2Updated, fP_a2[3] * ExanteV2Updated
                ) .* CCP2Adjuster
        );
        NewSigmaDeno2 = (
            sum(exp.(NewSigmaSeed2), dims = 2) .- 1
        );
        NewSigma2 = exp.(NewSigmaSeed2) ./ NewSigmaDeno2;
        CCP2UpdatedMat = NewSigma2 .* CCP2Adjuster;
        CCP2Updated = CCP2UpdatedMat[:, 2];

        DiffExanteV = sqL2dist(ExanteV1Updated, ExanteV1) + sqL2dist(ExanteV2Updated, ExanteV2);

        CCP1 = CCP1Updated[:];
        CCP2 = CCP2Updated[:];
        ExanteV1 = ExanteV1Updated[:];
        ExanteV2 = ExanteV2Updated[:];

    end

    return [
        CCP1Transform(CCP1),
        CCP2Transform(CCP2),
        ExanteV1,
        ExanteV2
    ]

end

```

```{julia}

@time output = f_MPE(TransitionMat, pi1, pi2, beta);

CCP1base = output[1];
CCP2base = output[2];
V1base = output[3];
V2base = output[4];

```

```{julia}

fPsigma = fP(TransitionMat, CCP1base[:, 2], CCP2base[:, 2]);

initial_state = [1; zeros(7)];

transitionpath = zeros(NumSimPeriods, 8);

for tt in 1:NumSimPeriods
    transitionpath[tt, :] = (
        tt == 1 ? initial_state :
        fPsigma' * transitionpath[tt - 1, :]
    )
end

```

```{julia}

n1 = sum(transitionpath .* repeat([0, 0, 1, 1, 0, 0, 1, 1]', NumSimPeriods), dims = 2);
n2 = sum(transitionpath .* repeat([0, 1, 0, 1, 0, 1, 0, 1]', NumSimPeriods), dims = 2);

```

## 4

```{julia}

CounterfactualParameterValues = [
    0.6,
    -0.27,
    0.45,
    -0.15,
    -2.10,
    0.2,
    -0.27,
    0.45,
    -0.15,
    -2.10
];

pi1_cf1 = pi1gen(CounterfactualParameterValues) .* CCP1Adjuster;
pi2_cf2 = pi2gen(CounterfactualParameterValues) .* CCP2Adjuster;

```

```{julia}

# CounterfactualParameterValues_2 = [
#     0.3,
#     0,
#     0.45,
#     -0.15,
#     -2.10,
#     0.2,
#     -0.27,
#     0.45,
#     -0.15,
#     -2.10
# ];

```

```{julia}

@time output = f_MPE(TransitionMat, pi1_cf1, pi2_cf2, beta);

CCP1cf = output[1];
CCP2cf = output[2];
V1cf = output[3];
V2cf = output[4];

```

```{julia}

fPsigma = fP(TransitionMat, CCP1cf[:, 2], CCP2cf[:, 2]);

initial_state = [1; zeros(7)];

transitionpathcf = zeros(NumSimPeriods, 8);

for tt in 1:NumSimPeriods
    transitionpathcf[tt, :] = (
        tt == 1 ? initial_state :
        fPsigma' * transitionpathcf[tt - 1, :]
    )
end

n1_cf = sum(transitionpathcf .* repeat([0, 0, 1, 1, 0, 0, 1, 1]', NumSimPeriods), dims = 2);
n2_cf = sum(transitionpathcf .* repeat([0, 1, 0, 1, 0, 1, 0, 1]', NumSimPeriods), dims = 2);

```

```{julia}
plot1 = plot(
    1:NumSimPeriods,
    n1,
    title = "Entry prob for firm 1",
    label = "Base"
);
plot!(
    1:NumSimPeriods,
    n1_cf,
    linestyle = :dash,
    label = "Counterfactual"
);


plot2 = plot(
    1:NumSimPeriods,
    n2,
    title = "Entry prob for firm 2",
    label = "Base"
);
plot!(
    1:NumSimPeriods,
    n2_cf,
    linestyle = :dash,
    label = "Counterfactual"
);


plot(plot1, plot2, layout = (1, 2))

```

```{julia}
diff_value_1 = V1cf - V1base;

DataFrame(
    V1base = V1base,
    V1cf = V1cf,
    diff_value_1 = diff_value_1
)

```
