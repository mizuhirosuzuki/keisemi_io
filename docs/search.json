[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "【非公式】実証ビジネス・エコノミクス Juliaでの実装",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "2  About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "1_demand_estimation_1.html",
    "href": "1_demand_estimation_1.html",
    "title": "2  需要モデルの推定（基礎編1）",
    "section": "",
    "text": "using CSV\nusing DataFrames\nusing StringEncodings\nusing FixedEffectModels\nusing RegressionTables\nusing Plots\nusing Optim\nusing Printf\nusing GLM\n\n\ndata = CSV.File(\n    open(read, \"data/1_demand_estimation_1/CleanData_20180222.csv\", enc\"shift-jis\"),\n    missingstring = [\"NA\", \"\"],\n    ) |> DataFrame\nfirst(data, 5)\n\n\n5×36 DataFrameRowMakerTypeNameYearSalescommentModelYear_trueMonthpricekudoukataTransMissionWheelBaseMinRideHeightweightcapacitySeatRawNumofDoorbase_coloroption_color種類engine過給器displacementFuelTypeTankCapacityHorsePowerMaxTorqueFuelEfficiencyoverall_lengthoverall_widthoverall_heightinterior_lengthinterior_widthinterior_heightString15String7String31Int64Int64String?StringInt64Int64Float64String3String15String3Int64Int64?Int64Int64Int64Int64StringStringString31String15StringInt64String15Int64?Int64?Float64?Float64?Int64Int64Int64Int64?Int64?Int64?1AudiForeignA1シリーズ20114206missing1.4 TFSI20111289.0FFDBA-8XCAX7AT24651151190423アマルフィホワイト、ブリリアントブラック、スクーバブルーメタリック、シラーズレッドメタリック、ティークブラウンメタリック、キュミュラスブルー、スフィアブルーメタリック、アイスシルバーメタリックミサノレッドパールエフェクト、ファントムブラックパールエフェクト直列4気筒DOHCCAXターボ1389ハイオク4512220.419.4397017401440missingmissingmissing2AudiForeignA1シリーズ20124502missing1.4 TFSI20121273.0FFDBA-8XCAX7AT24651151190423アマルフィホワイト、ブリリアントブラック、スクーバブルーメタリック、シラーズレッドメタリック、ティークブラウンメタリック、キュミュラスブルー、スフィアブルーメタリック、アイスシルバーメタリックミサノレッドパールエフェクト、ファントムブラックパールエフェクト直列4気筒DOHCCAXターボ1389ハイオク4512220.419.4397017401440missingmissingmissing3AudiForeignA1シリーズ20135071missing1.4 TFSI20121273.0FFDBA-8XCAX7AT24651151190423アマルフィホワイト、ブリリアントブラック、スクーバブルーメタリック、シラーズレッドメタリック、ティークブラウンメタリック、キュミュラスブルー、スフィアブルーメタリック、アイスシルバーメタリックミサノレッドパールエフェクト、ファントムブラックパールエフェクト直列4気筒DOHCCAXターボ1389ハイオク4512220.419.4397017401440missingmissingmissing4AudiForeignA3シリーズ20064830missingアトラクション20061284.0FFGH-8PBSE6AT25751401360525シルバーレイクメタリック、エボニーブラックパールエフェクト、ドルフィングレーメタリック、アークティックホワイト、ブリリアントレッド、モロブルーパールエフェクト、モーリシャスブルーパールエフェクト、アーコヤンシルバーメタリックアルパカベージュメタリック直列4気筒SOHCBSEなし1595ハイオク5510215.112.2428517651430missingmissingmissing5AudiForeignA3シリーズ20073874missingアトラクション20071286.0FFGH-8PBSE6AT25751401360525ドルフィングレーメタリック、ブリリアントレッド、シルバーメタリックモロブルーパールエフェクト、モーリシャスブルーパールエフェクト、ファントムブラックパールエフェクト直列4気筒SOHCBSEなし1595ハイオク5510215.112.2428517651430missingmissingmissing"
  },
  {
    "objectID": "1_demand_estimation_1.html#data-cleaning",
    "href": "1_demand_estimation_1.html#data-cleaning",
    "title": "2  需要モデルの推定（基礎編1-1）",
    "section": "2.1 Data cleaning",
    "text": "2.1 Data cleaning\n\ndata = data[!, [\n        :Maker, :Type, :Name, :Year, :Sales, \n        :Model, :price, :kata, :weight, :FuelEfficiency, \n        :HorsePower, :overall_length, :overall_width, :overall_height\n        ]]\nrename!(data, \"Year\" => \"year\")\ndata = leftjoin(data, dataHH, on = :year)\ndata = leftjoin(data, dataCPI, on = :year)\nfirst(data, 5)\n\n\n5×16 DataFrameRowMakerTypeNameyearSalesModelpricekataweightFuelEfficiencyHorsePoweroverall_lengthoverall_widthoverall_heightHHCPIString15String7String31Int64Int64StringFloat64String15Int64Float64?Int64?Int64Int64Int64Int64?Float64?1AudiForeignA1シリーズ201142061.4 TFSI289.0DBA-8XCAX119019.41223970174014405378343596.32AudiForeignA1シリーズ201245021.4 TFSI273.0DBA-8XCAX119019.41223970174014405417147596.23AudiForeignA1シリーズ201350711.4 TFSI273.0DBA-8XCAX119019.41223970174014405459474496.64AudiForeignA3シリーズ20064830アトラクション284.0GH-8PBSE136012.21024285176514305110200597.25AudiForeignA3シリーズ20073874アトラクション286.0GH-8PBSE136012.21024285176514305171304897.2\n\n\n\ndropmissing!(data, :FuelEfficiency);\n\n\ncpi2016 = dataCPI[dataCPI.year .== 2016, \"CPI\"][1]\ndata[!, :price] = data.price ./ (data.CPI / cpi2016) / 100;\n\n\ndata[!, :size] = (data[:, :overall_length] / 1000) .* (data[:, :overall_width] / 1000) .* (data[:, :overall_height] / 1000);\ndata[!, :hppw] = data[:, :HorsePower] ./ data[:, :weight];\n\nunique_name = unique(data[!, [:Name]])\nunique_name[!, :NameID] = rownumber.(eachrow(unique_name))\ndata = leftjoin(data, unique_name, on = :Name);\n\ndata = transform(\n    groupby(data, :year),\n    :Sales => sum => :inside_total\n);\ndata[!, :outside_total] = data.HH .- data.inside_total;\ndata[!, :share] = data.Sales ./ data.HH;\ndata[!, :share0] = data.outside_total ./ data.HH;\n\n\ntransform!(\n    groupby(data, [:year, :Maker]),\n    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_own, :FuelEfficiency_sum_own, :size_sum_own],\n    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_own, :FuelEfficiency_sqr_sum_own, :size_sqr_sum_own],\n    nrow => \"group_n\"\n);\ntransform!(\n    groupby(data, [:year]),\n    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_mkt, :FuelEfficiency_sum_mkt, :size_sum_mkt],\n    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_mkt, :FuelEfficiency_sqr_sum_mkt, :size_sqr_sum_mkt],\n    nrow => \"mkt_n\"\n);\n\n\ndata[!, :iv_BLP_own_hppw]             = data[:, :hppw_sum_own]           .- data[:, :hppw];\ndata[!, :iv_BLP_own_FuelEfficiency]   = data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency];\ndata[!, :iv_BLP_own_size]             = data[:, :size_sum_own]           .- data[:, :size];\ndata[!, :iv_BLP_other_hppw]           = data[:, :hppw_sum_mkt]           .- data[:, :hppw_sum_own];\ndata[!, :iv_BLP_other_FuelEfficiency] = data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own];\ndata[!, :iv_BLP_other_size]           = data[:, :size_sum_mkt]           .- data[:, :size_sum_own];\n\n\ndata[!, :iv_GH_own_hppw]             = (\n    (data[:, :group_n] .- 1) .* data[:, :hppw].^2 .+ \n    (data[:, :hppw_sqr_sum_own] .- data[:, :hppw].^2) .- \n    2 .* data[:, :hppw] .* (data[:, :hppw_sum_own] .- data[:, :hppw])\n);\ndata[!, :iv_GH_own_FuelEfficiency]   = (\n    (data[:, :group_n] .- 1) .* data[:, :FuelEfficiency].^2 .+ \n    (data[:, :FuelEfficiency_sqr_sum_own] .- data[:, :FuelEfficiency].^2) .- \n    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency])\n);\ndata[!, :iv_GH_own_size]             = (\n    (data[:, :group_n] .- 1) .* data[:, :size].^2 .+ \n    (data[:, :size_sqr_sum_own] .- data[:, :size].^2) .- \n    2 .* data[:, :size] .* (data[:, :size_sum_own] .- data[:, :size])\n);\ndata[!, :iv_GH_other_hppw]           = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :hppw].^2 .+ \n    (data[:, :hppw_sqr_sum_mkt] .- data[:, :hppw_sqr_sum_own]) .- \n    2 .* data[:, :hppw] .* (data[:, :hppw_sum_mkt] .- data[:, :hppw_sum_own])\n);\ndata[!, :iv_GH_other_FuelEfficiency] = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :FuelEfficiency].^2 .+ \n    (data[:, :FuelEfficiency_sqr_sum_mkt] .- data[:, :FuelEfficiency_sqr_sum_own]) .- \n    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own])\n);\ndata[!, :iv_GH_other_size]           = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :size].^2 .+ \n    (data[:, :size_sqr_sum_mkt] .- data[:, :size_sqr_sum_own]) .- \n    2 .* data[:, :size] .* (data[:, :size_sum_mkt] .- data[:, :size_sum_own])\n);\n\n\nNIPPYOautoIDvec = [\n    260, 4, 76, 104, 64, 54, 152, 153, 71, 197,\n    42, 45, 114, 208, 209, 77, 236, 58, 127, 187,\n    79, 175, 19, 117, 216, 112, 256, 119, 37, 158\n];\n\n\ndata_NIPPYO = data[in(NIPPYOautoIDvec).(data[:, :NameID]), [:Sales, :price, :hppw, :FuelEfficiency, :size]];\ndata_NIPPYO[!, :log_sales] = log.(data_NIPPYO[:, :Sales]);\ndata_NIPPYO[!, :log_price] = log.(data_NIPPYO[:, :price]);\ndata_NIPPYO[!, :log10_sales] = log10.(data_NIPPYO[:, :Sales]);\ndata_NIPPYO[!, :log10_price] = log10.(data_NIPPYO[:, :price]);\n\n\nols_intro = reg(\n    data_NIPPYO, \n    @formula(log_sales ~ log_price + hppw + FuelEfficiency + size),\n    Vcov.robust()\n)\n\n                                 FixedEffectModel                                 \n==================================================================================\nNumber of obs:                       196  Converged:                          true\ndof (model):                           4  dof (residuals):                     190\nR²:                                0.217  R² adjusted:                       0.201\nF-statistic:                     19.1148  P-value:                           0.000\n==================================================================================\n                  Estimate  Std. Error    t-stat  Pr(>|t|)    Lower 95%  Upper 95%\n──────────────────────────────────────────────────────────────────────────────────\nlog_price       -1.24828     0.309545   -4.03262    <1e-04   -1.85886    -0.63769\nhppw            -4.19685     3.97622    -1.05549    0.2925  -12.0401      3.64635\nFuelEfficiency   0.0886034   0.0283887   3.12108    0.0021    0.0326059   0.144601\nsize             0.306896    0.0588927   5.2111     <1e-06    0.190728    0.423063\n(Intercept)      5.76211     1.06127     5.42946    <1e-06    3.66873     7.85549\n==================================================================================\n\n\n\nfit_line = predict(\n    lm(@formula(log10_sales ~ log10_price), data_NIPPYO)\n    );\nplot(\n    data_NIPPYO.price, \n    data_NIPPYO.Sales, \n    seriestype = :scatter, \n    legend = false,\n    xscale = :log10,\n    yscale = :log10,\n    xlabel = \"Price\",\n    ylabel = \"Sales\",\n    xticks = ([1, 3, 10], [1, 3, 10]),\n)\nplot!(\n    data_NIPPYO.price, \n    10 .^ fit_line,\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndescribe(data[:, [:Sales, :price, :FuelEfficiency, :size, :hppw]])\n\n\n5×7 DataFrameRowvariablemeanminmedianmaxnmissingeltypeSymbolFloat64RealFloat64RealInt64DataType1Sales24586.4108544.03176750Int642price2.530470.7051762.0504212.62650Float643FuelEfficiency16.15975.515.440.80Float644size11.50535.90911.472519.15480Float645hppw0.09913120.0450.09268290.3238640Float64\n\n\n\ndata[!, :logit_share] = log.(data[:, :share]) .- log.(data[:, :share0]);\n\n\nols_res = reg(data, @formula(logit_share ~ price + hppw + FuelEfficiency + size), Vcov.robust());\niv_BLP_res = reg(\n    data, \n    @formula(logit_share ~ (\n        price ~ iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + \n            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size\n    ) + hppw + FuelEfficiency + size),\n    Vcov.robust()\n);\niv_GH_res = reg(\n    data, \n    @formula(logit_share ~ (\n        price ~ iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + \n            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size\n    ) + hppw + FuelEfficiency + size),\n    Vcov.robust(),\n    save = true\n);\n\n\nregtable(ols_res, iv_BLP_res, iv_GH_res)\n\n\n--------------------------------------------------------------\n                                       logit_share            \n                          ------------------------------------\n                                 (1)          (2)          (3)\n--------------------------------------------------------------\n(Intercept)               -12.255***   -12.323***   -12.973***\n                             (0.365)      (0.382)      (0.393)\nprice                      -0.255***    -0.283***    -0.552***\n                             (0.026)      (0.067)      (0.080)\nhppw                          -0.654        0.213      8.426**\n                             (1.284)      (2.298)      (2.638)\nFuelEfficiency              0.130***     0.130***     0.127***\n                             (0.010)      (0.010)      (0.010)\nsize                        0.182***     0.187***     0.236***\n                             (0.019)      (0.021)      (0.022)\n--------------------------------------------------------------\nEstimator                        OLS           IV           IV\n--------------------------------------------------------------\nN                              1,823        1,823        1,823\nR2                             0.222        0.222        0.180\nWithin-R2                                                     \nFirst-stage F statistic                    33.926       51.583\n--------------------------------------------------------------\n\n\n\n\niv1st_BLP_res = reg(\n    data, \n    @formula(price ~ hppw + FuelEfficiency + size +\n            iv_BLP_own_hppw + iv_BLP_own_FuelEfficiency + iv_BLP_own_size + \n            iv_BLP_other_hppw + iv_BLP_other_FuelEfficiency + iv_BLP_other_size\n        ),\n    Vcov.robust()\n);\niv1st_GH_res = reg(\n    data, \n    @formula(price ~ hppw + FuelEfficiency + size +\n            iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + \n            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size\n        ),\n    Vcov.robust()\n);\n\n\nregtable(iv1st_BLP_res, iv1st_GH_res)\n\n\n---------------------------------------------------\n                                      price        \n                              ---------------------\n                                    (1)         (2)\n---------------------------------------------------\n(Intercept)                      -3.159    -1.325**\n                                (1.685)     (0.423)\nhppw                          28.749***   23.508***\n                                (0.993)     (1.547)\nFuelEfficiency                   -0.011   -0.072***\n                                (0.008)     (0.014)\nsize                           0.202***    0.189***\n                                (0.015)     (0.020)\niv_BLP_own_hppw                 -0.728*            \n                                (0.336)            \niv_BLP_own_FuelEfficiency     -0.007***            \n                                (0.001)            \niv_BLP_own_size                0.013***            \n                                (0.004)            \niv_BLP_other_hppw                 0.165            \n                                (0.255)            \niv_BLP_other_FuelEfficiency     0.001**            \n                                (0.000)            \niv_BLP_other_size                -0.002            \n                                (0.003)            \niv_GH_own_hppw                            -1.889***\n                                            (0.439)\niv_GH_own_FuelEfficiency                      0.000\n                                            (0.000)\niv_GH_own_size                            -0.001***\n                                            (0.000)\niv_GH_other_hppw                           0.423***\n                                            (0.096)\niv_GH_other_FuelEfficiency                 0.000***\n                                            (0.000)\niv_GH_other_size                           0.000***\n                                            (0.000)\n---------------------------------------------------\nN                                 1,823       1,823\nR2                                0.616       0.623\n---------------------------------------------------\n\n\n\n\ndata[!, :own_elas_ols]   = ols_res.coef[ols_res.coefnames .== \"price\"] .* data[:, :price] .* (1 .- data[:, :share]);\ndata[!, :own_elas_ivblp] = iv_BLP_res.coef[iv_BLP_res.coefnames .== \"price\"] .* data[:, :price] .* (1 .- data[:, :share]);\ndata[!, :own_elas_ivgh]  = iv_GH_res.coef[iv_GH_res.coefnames .== \"price\"] .* data[:, :price] .* (1 .- data[:, :share]);\n\n\ndescribe(data[:, r\"^own_elas\"])\n\n\n3×7 DataFrameRowvariablemeanminmedianmaxnmissingeltypeSymbolFloat64Float64Float64Float64Int64DataType1own_elas_ols-0.645328-3.22104-0.522324-0.1798920Float642own_elas_ivblp-0.717085-3.5792-0.580404-0.1998950Float643own_elas_ivgh-1.3967-6.9714-1.13048-0.3893460Float64\n\n\n\ndt_application = data[:, [:NameID, :year, :Sales, :price, :FuelEfficiency, :size, :hppw, :HH, :share]];\ndt_application[!, :xi_fit] = iv_GH_res.residuals;\n\n\nNameID_target = 197\ndt_application[(dt_application.year .== 2016) .& (dt_application.NameID .== NameID_target), :]\n\n\n1×10 DataFrameRowNameIDyearSalespriceFuelEfficiencysizehppwHHsharexi_fitInt64?Int64Int64Float64Float64Float64Float64Int64?Float64Float64?11972016370693.19811.617.09440.0947917569507570.0006508961.16401\n\n\n\nfunction f_share(\n        price_cand,\n        year, \n        NameID_target,\n        dt,\n        est_res\n    )\n    \n    dt = dt[dt.year .== year, :]\n    dt[!, :temp_price] = dt[:, :price]\n    dt[(dt[:, :NameID] .== NameID_target), :temp_price] .= price_cand\n    dt[!, :delta] = (\n        est_res.coef[est_res.coefnames .== \"(Intercept)\"] .+\n        est_res.coef[est_res.coefnames .== \"hppw\"] .* dt[:, :hppw] .+\n        est_res.coef[est_res.coefnames .== \"FuelEfficiency\"] .* dt[:, :FuelEfficiency] .+\n        est_res.coef[est_res.coefnames .== \"size\"] .* dt[:, :size] .+\n        est_res.coef[est_res.coefnames .== \"price\"] .* dt[:, :temp_price] .+\n        dt[:, :xi_fit]\n    )\n    dt[!, :denom] .= 1 .+ sum(exp.(dt[:, :delta]))\n    dt[!, :pred_sales] = exp.(dt[:, :delta]) ./ dt[:, :denom] .* dt[:, :HH]\n    dt = dt[dt.NameID .== NameID_target, :]\n    \n    return dt.pred_sales[1]\n    \nend\n\nf_share (generic function with 1 method)\n\n\n\npricevec = range(0.3, 5, step = 0.05);\nquantvec = f_share.(pricevec, 2016, NameID_target, Ref(dt_application), Ref(iv_GH_res));\n\n\nplot(quantvec, pricevec, xticks = [50000, 100000, 150000], legend = false)\nxlabel!(\"Sales\")\nylabel!(\"Price (million JPY)\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(pricevec, pricevec .* quantvec / 1000, legend = false)\nxlabel!(\"Price (million JPY)\")\nylabel!(\"Revenue (billion JPY)\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopt_res = optimize(\n    x -> - f_share(x[1], 2016, NameID_target, dt_application, iv_GH_res) * x[1],\n    [1.0]\n);\n\n@printf(\"Revenue-maximizing price: %.3f \\n\", opt_res.minimizer[1])\n@printf(\"Max revenue : %.3f\", -opt_res.minimum)\n\nRevenue-maximizing price: 1.814 \nMax revenue : 144273.836"
  },
  {
    "objectID": "1_demand_estimation_2.html#section",
    "href": "1_demand_estimation_2.html#section",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.1 4.1",
    "text": "3.1 4.1\n\nNIPPYOautoIDvec = [\n    260, 4, 76, 104, 64, 54, 152, 153, 71, 197,\n    42, 45, 114, 208, 209, 77, 236, 58, 127, 187,\n    79, 175, 19, 117, 216, 112, 256, 119, 37, 158\n];\ndata_NIPPYO = data[\n    in(NIPPYOautoIDvec).(data[:, :NameID]), \n    [:year, :share, :NameID, :Sales, :price, :hppw, :FuelEfficiency, :size, :Name]\n    ];\ndata_NIPPYO[!, :log_sales] = log.(data_NIPPYO[:, :Sales]);\ndata_NIPPYO[!, :log_price] = log.(data_NIPPYO[:, :price]);\ndata_NIPPYO[!, :log10_sales] = log10.(data_NIPPYO[:, :Sales]);\ndata_NIPPYO[!, :log10_price] = log10.(data_NIPPYO[:, :price]);\n## 4.2\ndata[!, :logit_share] = log.(data[:, :share]) .- log.(data[:, :share0]);\n\niv_GH_res = reg(\n    data, \n    @formula(logit_share ~ (\n        price ~ iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + \n            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size\n    ) + hppw + FuelEfficiency + size),\n    Vcov.robust(),\n    save = true\n);\n\ndt_2016 = data_NIPPYO[data_NIPPYO.year .== 2016, [:price, :share, :NameID, :Name]]\n\nprice = dt_2016.price\nshare = dt_2016.share\nNameID = dt_2016.NameID\n\nown_elas = iv_GH_res.coef[iv_GH_res.coefnames .== \"price\"][1] .* price .* (1.0 .- share);\ncross_elas = (-1.0) .* iv_GH_res.coef[iv_GH_res.coefnames .== \"price\"][1] .* price .* share;\nJ = length(own_elas);\n\nelas_mat = reduce(hcat, [cross_elas for j = 1:J]);\nelas_mat[diagind(elas_mat)] = own_elas;\n\nelas_mat[[12, 13, 10, 1], [12, 13, 10, 1]]\n\n4×4 Matrix{Float64}:\n -1.76455       0.00114929    0.00114929   0.00114929\n  0.00122042   -0.818689      0.00122042   0.00122042\n  0.000148175   0.000148175  -0.959449     0.000148175\n  0.00184509    0.00184509    0.00184509  -0.67175"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-1",
    "href": "1_demand_estimation_2.html#section-1",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.2 5",
    "text": "3.2 5\n\ntransform!(\n    groupby(data, [:year, :Maker, :Type]),\n    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_own, :FuelEfficiency_sum_own, :size_sum_own],\n    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_own, :FuelEfficiency_sqr_sum_own, :size_sqr_sum_own],\n    nrow => \"group_n\"\n);\ntransform!(\n    groupby(data, [:year, :Type]),\n    [:hppw, :FuelEfficiency, :size] .=> sum .=> [:hppw_sum_mkt, :FuelEfficiency_sum_mkt, :size_sum_mkt],\n    [:hppw, :FuelEfficiency, :size] .=> (x -> sum(x.^2)) .=> [:hppw_sqr_sum_mkt, :FuelEfficiency_sqr_sum_mkt, :size_sqr_sum_mkt],\n    nrow => \"mkt_n\"\n);\n\ndata[!, :iv_BLP_own_hppw_nest]             = data[:, :hppw_sum_own]           .- data[:, :hppw];\ndata[!, :iv_BLP_own_FuelEfficiency_nest]   = data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency];\ndata[!, :iv_BLP_own_size_nest]             = data[:, :size_sum_own]           .- data[:, :size];\ndata[!, :iv_BLP_own_num_nest]              = data[:, :group_n]                .- 1;\n\ndata[!, :iv_BLP_other_hppw_nest]           = data[:, :hppw_sum_mkt]           .- data[:, :hppw_sum_own];\ndata[!, :iv_BLP_other_FuelEfficiency_nest] = data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own];\ndata[!, :iv_BLP_other_size_nest]           = data[:, :size_sum_mkt]           .- data[:, :size_sum_own];\ndata[!, :iv_BLP_other_num_nest]            = data[:, :mkt_n]                  .- data[:, :group_n];\ndata[!, :iv_GH_own_hppw_nest]             = (\n    (data[:, :group_n] .- 1) .* data[:, :hppw].^2 .+ \n    (data[:, :hppw_sqr_sum_own] .- data[:, :hppw].^2) .- \n    2 .* data[:, :hppw] .* (data[:, :hppw_sum_own] .- data[:, :hppw])\n);\ndata[!, :iv_GH_own_FuelEfficiency_nest]   = (\n    (data[:, :group_n] .- 1) .* data[:, :FuelEfficiency].^2 .+ \n    (data[:, :FuelEfficiency_sqr_sum_own] .- data[:, :FuelEfficiency].^2) .- \n    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_own] .- data[:, :FuelEfficiency])\n);\ndata[!, :iv_GH_own_size_nest]             = (\n    (data[:, :group_n] .- 1) .* data[:, :size].^2 .+ \n    (data[:, :size_sqr_sum_own] .- data[:, :size].^2) .- \n    2 .* data[:, :size] .* (data[:, :size_sum_own] .- data[:, :size])\n);\ndata[!, :iv_GH_other_hppw_nest]           = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :hppw].^2 .+ \n    (data[:, :hppw_sqr_sum_mkt] .- data[:, :hppw_sqr_sum_own]) .- \n    2 .* data[:, :hppw] .* (data[:, :hppw_sum_mkt] .- data[:, :hppw_sum_own])\n);\ndata[!, :iv_GH_other_FuelEfficiency_nest] = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :FuelEfficiency].^2 .+ \n    (data[:, :FuelEfficiency_sqr_sum_mkt] .- data[:, :FuelEfficiency_sqr_sum_own]) .- \n    2 .* data[:, :FuelEfficiency] .* (data[:, :FuelEfficiency_sum_mkt] .- data[:, :FuelEfficiency_sum_own])\n);\ndata[!, :iv_GH_other_size_nest]           = (\n    (data[:, :mkt_n] .- data[:, :group_n]) .* data[:, :size].^2 .+ \n    (data[:, :size_sqr_sum_mkt] .- data[:, :size_sqr_sum_own]) .- \n    2 .* data[:, :size] .* (data[:, :size_sum_mkt] .- data[:, :size_sum_own])\n);"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-2",
    "href": "1_demand_estimation_2.html#section-2",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.3 6",
    "text": "3.3 6\n\ndata = transform(\n    groupby(data, [:year, :Type]),\n    :Sales => sum => :sum_year_body\n);\ndata[!, :inside_share] = data.Sales ./ data.sum_year_body;\ndata[!, :log_inside_share] = log.(data.Sales ./ data.sum_year_body);\nols_res = reg(data, @formula(logit_share ~ price + log_inside_share + hppw + FuelEfficiency + size))\n\niv_BLP2_res = reg(\n    data, \n    @formula(logit_share ~ (\n        price + log_inside_share ~ iv_BLP_own_hppw_nest + iv_BLP_own_FuelEfficiency_nest + iv_BLP_own_size_nest + \n            iv_BLP_other_hppw_nest + iv_BLP_other_FuelEfficiency_nest + iv_BLP_other_size_nest +\n            iv_BLP_own_num_nest + iv_BLP_other_num_nest\n    ) + hppw + FuelEfficiency + size),\n    Vcov.robust()\n);\n\nregtable(ols_res, iv_BLP2_res)\n\n\n-----------------------------------------------\n                               logit_share     \n                          ---------------------\n                                (1)         (2)\n-----------------------------------------------\n(Intercept)               -7.557***   -9.548***\n                            (0.166)     (0.239)\nprice                     -0.307***   -0.654***\n                            (0.013)     (0.053)\nlog_inside_share           0.782***    0.595***\n                            (0.009)     (0.035)\nhppw                      10.636***   18.925***\n                            (0.657)     (1.965)\nFuelEfficiency             0.055***    0.069***\n                            (0.004)     (0.006)\nsize                       0.156***    0.227***\n                            (0.008)     (0.012)\n-----------------------------------------------\nEstimator                       OLS          IV\n-----------------------------------------------\nN                             1,823       1,823\nR2                            0.862       0.765\nWithin-R2                                      \nFirst-stage F statistic                   1.667\n-----------------------------------------------"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-3",
    "href": "1_demand_estimation_2.html#section-3",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.4 6.1",
    "text": "3.4 6.1\n\nalpha1 = ols_res.coef[ols_res.coefnames .== \"price\"][1]\nsigma1 = ols_res.coef[ols_res.coefnames .== \"log_inside_share\"][1]\n\nalpha2 = iv_BLP2_res.coef[iv_BLP2_res.coefnames .== \"price\"][1]\nsigma2 = iv_BLP2_res.coef[iv_BLP2_res.coefnames .== \"log_inside_share\"][1]\n\ndata[!, :own_elas_ols] = alpha1 .* data[:, :price] .* (\n    1.0 .- sigma1 .* data[:, :inside_share] .- \n    (1.0 .- sigma1) .* data[:, :share]\n) ./ (1.0 .- sigma1);\ndata[!, :own_elas_ivglp] = alpha2 .* data[:, :price] .* (\n    1.0 .- sigma2 .* data[:, :inside_share] .- \n    (1.0 .- sigma2) .* data[:, :share]\n) ./ (1.0 .- sigma2);\n\ndescribe(data[:, r\"^own_elas\"], :mean, :std, :median, :min, :max)\ndata_NIPPYO = data[\n    in(NIPPYOautoIDvec).(data[:, :NameID]), \n    [:year, :share, :Type, :inside_share, :NameID, :Sales, :price, :hppw, :FuelEfficiency, :size, :Name]\n    ];\ndata_NIPPYO[!, :log_sales] = log.(data_NIPPYO[:, :Sales]);\ndata_NIPPYO[!, :log_price] = log.(data_NIPPYO[:, :price]);\n\ndt_2016 = data_NIPPYO[data_NIPPYO.year .== 2016, [:price, :Type, :share, :inside_share, :NameID, :Name]]\n\nprice = dt_2016.price;\nshare = dt_2016.share;\nNameID = dt_2016.NameID;\ninside_share = dt_2016.inside_share;\ngroup = dt_2016.Type;\nown_elas = alpha2 .* price .* (1.0 .- sigma2 .* inside_share .- (1.0 .- sigma2) .* share) ./ (1.0 .- sigma2);\ncross_elas_othergroup = (-1.0) .* alpha2 .* price .* share;\nJ = length(own_elas);\n\ncross_elas_othergroup = reduce(hcat, [cross_elas_othergroup for j = 1:J]);\nelas_mat[diagind(elas_mat)] = own_elas;\n\nprice_1_mat       = reduce(hcat, [price for j = 1:J]);\nshare_1_mat       = reduce(hcat, [share for j = 1:J]);\ninsideshare_1_mat = reduce(hcat, [inside_share for j = 1:J]);\n\ncross_elas_samegroup = (-1.0) .* alpha2 .* price_1_mat .* (\n    sigma2 .* insideshare_1_mat .+ (1.0 .- sigma2) .* share_1_mat\n) ./ (1.0 .- sigma2);\n\ntemp_mat1 = reduce(hcat, [group for j = 1:J]);\ntemp_mat2 = permutedims(temp_mat1);\nind_same_group  = (temp_mat1 .== temp_mat2);\nind_other_group = (temp_mat1 .!== temp_mat2);\n\nelas_mat_nl = cross_elas_samegroup .* ind_same_group .+ cross_elas_othergroup .* ind_other_group;\nelas_mat_nl[diagind(elas_mat_nl)] = own_elas;\n\nelas_mat_nl[[12, 13, 10, 1], [12, 13, 10, 1]]\n\n4×4 Matrix{Float64}:\n -5.1197       0.0477573    0.0477573    0.00136172\n  0.050713    -2.34881      0.050713     0.001446\n  0.00615725   0.00615725  -2.80217      0.000175564\n  0.00218614   0.00218614   0.00218614  -1.83296"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-4",
    "href": "1_demand_estimation_2.html#section-4",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.5 7",
    "text": "3.5 7\n\n3.5.1 Step 1\n\nsort!(data, [:year, :NameID]);\nN = nrow(data);\nT = length(unique(data.year));\nX1 = hcat(repeat([1], N), Matrix(data[:, [:price, :FuelEfficiency, :hppw, :size]]));\nX2 = hcat(data.price, repeat([1], N), data.size);\nZ = hcat(\n    repeat([1], N),\n    Matrix(data[:, [:FuelEfficiency, :hppw, :size]]),\n    Matrix(data[:, r\"^iv_GH.*(?<!nest)$\"])\n    );\nRandom.seed!(123);\nNsim = 500;\n\ndraw_vec = reduce(hcat, [randn(size(X2, 2)) for j =1:Nsim]);\n\ntheta2 = [0.001, 0.001, 0.001];\n\nmarketindex = data.year;\nuniquemarketindex = sort(unique(data.year));\n\ntemp1 = reduce(hcat, [uniquemarketindex for j = 1:N])';\ntemp2 = reduce(hcat, [data.year for j = 1:T]);\ntempmat = (temp1 .== temp2);\nmutable struct datalist_struct\n    X1::Array{Float64,2};\n    X2::Array{Float64,2};\n    Z::Array{Float64,2};\n    ShareVec::Vector{Float64};\n    marketindex::Vector{Int64};\n    logitshare::Vector{Float64};\n    draw_vec::Array{Float64,2};\n    tempmat::BitMatrix\nend\n\nmutable struct parameter_struct\n    Nsim::Int;\n    T::Int;\n    N::Int;\nend\ndatalist = datalist_struct(X1, X2, Z, data.share, marketindex, data.logit_share, draw_vec, tempmat);\nparameter = parameter_struct(Nsim, T, N);\n\n\n\n3.5.2 Step 2\n\nfunction f_mktshare(\n        theta2,\n        datalist::datalist_struct,\n        parameter::parameter_struct,\n        delta\n    )\n        \n    mu = datalist.X2 * Diagonal(theta2) * datalist.draw_vec;\n    \n    delta_mu = delta .* ones((1, parameter.Nsim)) .+ mu;\n    exp_delta_mu = exp.(delta_mu .- maximum(delta_mu));\n    denom_outside = exp.(-maximum(delta_mu));\n    \n    denom_temp = (exp_delta_mu' * datalist.tempmat)' .+ denom_outside;\n    denom = datalist.tempmat * denom_temp;\n    \n    s_jt_i = exp_delta_mu ./ denom;\n    s_jt = vec(mean(s_jt_i, dims = 2));\n    \n    return s_jt\n    \nend\n@time f_mktshare([0.01, 0.01, 0.01], datalist, parameter, data.logit_share);\n\n  0.096863 seconds (42.00 k allocations: 37.354 MiB, 76.10% compilation time)\n\n\n\n\n3.5.3 Step 3\n\nfunction f_contraction(\n        theta2,\n        datalist::datalist_struct,\n        parameter::parameter_struct,\n        delta_ini\n    )\n    \n    tol = 1e-11;\n    norm = 1e+10\n\n    delta_old = delta_ini;\n    exp_delta_old = exp.(delta_old);\n    \n    iter = 0;\n        \n    while ((norm > tol) & (iter < 1000))\n        \n#         print(iter, \"\\n\")\n        \n        pred_mkt_share = f_mktshare(theta2, datalist, parameter, delta_old);\n        \n        exp_delta = exp_delta_old .* datalist.ShareVec ./ pred_mkt_share;\n        \n        norm = maximum(abs.(exp_delta .- exp_delta_old));\n        \n        exp_delta_old = exp_delta;\n        delta_old = log.(exp_delta);\n        iter += 1;\n        \n    end\n    \n#     print(iter, \"\\n\")\n    \n    return delta_old;\n    \nend\n    \n@time f_contraction([0.1, 0.01, 0.01], datalist, parameter, data.logit_share);\n\n  0.278492 seconds (18.44 k allocations: 280.696 MiB, 16.32% gc time, 15.77% compilation time)\n\n\n\n\n3.5.4 Step 4\n\nfunction f_GMMobj(\n        theta2,\n        parameter::parameter_struct,\n        datalist::datalist_struct,\n        delta_ini::Vector{Float64}\n    )\n    \n#     delta_ini = delta_global;\n#     delta_ini = datalist.logitshare;\n    delta = f_contraction(theta2, datalist, parameter, delta_ini);\n#     global delta_global = delta\n    \n#     if (datalist.weight_mat_option == \"2SLS\") \n        W = inv(datalist.Z' * datalist.Z);\n#     elseif (datalist.weight_mat_option == \"Ident\")\n#         W = I(size(datalist.Z, 2));\n#     end\n    \n    beta_hat = (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \\ (datalist.X1' * datalist.Z * W * datalist.Z' * delta);\n    \n    Xi = delta - datalist.X1 * beta_hat;\n    \n    output = Xi' * datalist.Z * W * datalist.Z' * Xi\n        \n    return output\n    \nend    \n    \ninitial_x = [0.1, 1.0, 0.1];\ndelta_ini = f_contraction(initial_x, datalist, parameter, datalist.logitshare);\n\n\nobjFunc_for_Optim = TwiceDifferentiable(\n    x -> f_GMMobj(x, parameter, datalist, delta_ini),\n    initial_x;\n    autodiff = :forward\n    );\n@time gmm_res = optimize(\n    objFunc_for_Optim,\n#     x -> f_GMMobj(x, parameter, datalist, delta_ini),\n    [0.0, 0.00, 0.00],\n    [Inf, Inf, Inf],\n    initial_x,\n    Optim.Options(show_trace = true)\n)\n\n\n\n * Status: success\n\n * Candidate solution\n    Final objective value:     1.720392e+02\n\n * Found with\n    Algorithm:     Interior Point Newton\n\n * Convergence measures\n    |x - x'|               = 0.00e+00 ≤ 0.0e+00\n    |x - x'|/|x'|          = 0.00e+00 ≤ 0.0e+00\n    |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00\n    |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00\n    |g(x)|                 = 9.27e+00 ≰ 1.0e-08\n\n * Work counters\n    Seconds run:   376  (vs limit Inf)\n    Iterations:    24\n    f(x) calls:    218\n    ∇f(x) calls:   218\n\n\n\ngmm_res.minimizer\n\n3-element Vector{Float64}:\n  0.28734533108108296\n 15.767041571288186\n  0.07564921477989821\n\n\n\nW = inv(datalist.Z' * datalist.Z);    \ndelta = f_contraction(gmm_res.minimizer, datalist, parameter, delta_ini);\nbeta_hat = (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \\ (datalist.X1' * datalist.Z * W * datalist.Z' * delta);\n\nbeta_hat\n\n5-element Vector{Float64}:\n -30.94355607145988\n  -0.9028865616490973\n   0.11090678367437005\n   9.193592802875408\n   0.28736901935168374\n\n\n\n\n3.5.5 Step 5\n\nXi = delta - X1 * beta_hat;\nOmega_hat = reduce(+, Z[i,:] * Z[i,:]' .* Xi[i]^2 ./ N for i = 1:N);\nDdelta = ForwardDiff.jacobian(x -> delta_ini = f_contraction(x, datalist, parameter, delta), gmm_res.minimizer);\nG = Z' * hcat(- X1, Ddelta) ./ N;\nAsyVarMat = (G' * W * G) \\ G' * W * Omega_hat * W * G * inv(G' * W * G);\nAse = sqrt.(diag(AsyVarMat) ./ N);\n\nDataFrame(\n    Var = [\"Const\", \"Price\", \"Fuel Efficiency\", \"hppw\", \"size\", \"random_price\", \"random_constant\", \"random_size\"],\n    Est = vcat(beta_hat, gmm_res.minimizer),\n    se = Ase\n)\n\n\n8×3 DataFrameRowVarEstseStringFloat64Float641Const-30.943615.51382Price-0.9028870.4330623Fuel Efficiency0.1109070.01105714hppw9.193593.113645size0.2873690.05171996random_price0.2873450.4324577random_constant15.767101.9688random_size0.07564920.290593"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-5",
    "href": "1_demand_estimation_2.html#section-5",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.6 8",
    "text": "3.6 8\n\nmu = X2 * Diagonal(gmm_res.minimizer) * draw_vec;\ndelta_mu = delta .+ mu;\nexp_delta_mu = exp.(delta_mu);\ndenom_outside = exp.(0.0);\ndenom_temp = (exp_delta_mu' * tempmat)' .+ denom_outside;\ndenom = tempmat * denom_temp;\n\ns_jt_i = exp_delta_mu ./ denom;\ndraw_for_price = draw_vec[1,:];\nalpha_i = beta_hat[2] .+ gmm_res.minimizer[1] .* draw_for_price;\nyear = 2016\nJ_t = sum(data.year .== year);\n\nag_model_s_i = s_jt_i[data.year .== year, :]\nag_model_s = mean(ag_model_s_i, dims = 2);\nprice_t = data.price[data.year .== year];\n\nelasmat = zeros((J_t, J_t));\n\nfor k in 1:J_t, j in 1:J_t\n    if (k != j)\n        elasmat[k, j] = (-1.0) .* price_t[k] ./ ag_model_s[j] * mean(alpha_i .* ag_model_s_i[j, :] .* ag_model_s_i[k, :])\n    elseif (k == j)\n        elasmat[k, j] = price_t[j] ./ ag_model_s[j] * mean(alpha_i .* ag_model_s_i[j, :] .* (1.0 .- ag_model_s_i[j, :]))\n    end\nend\n\n\nelasmat[[12, 13, 10, 1], [12, 13, 10, 1]]\n\n4×4 Matrix{Float64}:\n -1.10253      0.0451789    0.0435272    0.0324128\n  0.0153236   -0.832714     0.0153759    0.0109914\n  0.0184981    0.0192656   -1.12275      0.0138002\n  0.00450168   0.00450075   0.00450998  -2.50034"
  },
  {
    "objectID": "1_demand_estimation_2.html#section-6",
    "href": "1_demand_estimation_2.html#section-6",
    "title": "3  需要モデルの推定（基礎編1-2）",
    "section": "3.7 9",
    "text": "3.7 9\n\nfunction f_revenue(\n        price_cand,\n        data,\n        datalist,\n        parameter,\n        delta,\n        beta_hat,\n        theta2,\n        option\n    )\n\n    mc_betado = 3.198 * (1.0 - 1.0 / abs(-2.16720791));\n\n    tempprice = data.price[:];\n    tempprice[(data.NameID .== 197) .& (data.year .== 2016)] .= price_cand;\n    \n    X1_new = datalist.X1[:,:];\n    X2_new = datalist.X2[:,:];\n    X1_new[:, 2] = tempprice;\n    X2_new[:, 1] = tempprice;\n    \n    org_xi = delta .- datalist.X1 * beta_hat;\n    new_delta = X1_new * beta_hat .+ org_xi;\n    \n    datalist_temp = datalist_struct(\n        X1_new, X2_new, datalist.Z, data.share, datalist.marketindex, \n        data.logit_share, datalist.draw_vec, datalist.tempmat\n        );\n    \n    mktshare = f_mktshare(theta2, datalist_temp, parameter, new_delta);\n    \n    quant = mktshare .* data.HH;\n    revenue = tempprice .* quant;\n        \n    revenuevec  = revenue[(data.NameID .== 197) .& (data.year .== 2016)];\n    revenuevec2 = sum(revenue[in(NIPPYOautoIDvec).(data[:, :NameID]) .& (data.year .== 2016)]);\n    \n    pivec  = revenuevec  .- mc_betado .* quant[(data.NameID .== 197) .& (data.year .== 2016)];\n    pivec2 = revenuevec2 .- mc_betado .* quant[(data.NameID .== 197) .& (data.year .== 2016)];\n\n    if option == \"own\"\n        return(revenuevec[1])\n    elseif option == \"total\"\n        return(revenuevec2[1])\n    elseif option == \"ownpi\"\n        return(pivec[1])\n    elseif option == \"totalpi\"\n        return(pivec2[1])\n    end\n    \nend\nprice_range = range(1.8, 4.0, step = 0.05);\nownpi_res = f_revenue.(\n    price_range, \n    Ref(data), Ref(datalist), Ref(parameter), Ref(delta), Ref(beta_hat), Ref(gmm_res.minimizer),\n    \"ownpi\"\n);\nplot(price_range, ownpi_res, legend = false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprice_range = range(1.8, 4.0, step = 0.05);\ntotalpi_res = f_revenue.(\n    price_range, \n    Ref(data), Ref(datalist), Ref(parameter), Ref(delta), Ref(beta_hat), Ref(gmm_res.minimizer),\n    \"totalpi\"\n);\nplot(price_range, totalpi_res, legend = false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nownpi_optim_res = optimize(\n    x -> - f_revenue(x[1], data, datalist, parameter, delta, beta_hat, gmm_res.minimizer, \"ownpi\"),\n    [3.0]\n)\n\nownpi_optim_res.minimizer\n\n1-element Vector{Float64}:\n 2.967175245285034\n\n\n\ntotalpi_optim_res = optimize(\n    x -> - f_revenue(x[1], data, datalist, parameter, delta, beta_hat, gmm_res.minimizer, \"totalpi\"),\n    [3.0]\n)\ntotalpi_optim_res.minimizer\n\n1-element Vector{Float64}:\n 3.136022758483887"
  }
]