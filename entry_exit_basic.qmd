---
title: "基礎編"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV
using DataFrames
using StringEncodings
using LinearAlgebra
using Optim
using ForwardDiff
using Distributions
```

```{julia}
for file in ["calculateBRObjective.jl"]
    include("functions/entry_exit/" * file)
end
```

```{julia}
data = CSV.File(
    open(read, "data/entry_exit_basic/MRIData.csv", enc"UTF-8"),
    missingstring = ["NA", ""],
    ) |> DataFrame
first(data, 5)
```

```{julia}
dataset = combine(
    groupby(data, :CityCode),
    :MRIOwnDum => sum => :NumMRI,
    [:Population, :Menseki, :PopDensity, :TaxableIncome] .=> mean .=> [:Pop, :Menseki, :PopDen, :Income],   
);
dataset[!, :Pop] = dataset.Pop / 1e+6;
dropmissing!(dataset, :);
numObs = nrow(dataset)
```

## 4

```{julia}
hospitalNumCap = 6;
dataset[dataset.NumMRI .> hospitalNumCap, :NumMRI] .= hospitalNumCap;
```

```{julia}
#| echo: false
#| eval: false

@time calculateBRObjective(ones(hospitalNumCap + 1), dataset, hospitalNumCap)
```

```{julia}
obj_for_Optim = TwiceDifferentiable(
    x -> calculateBRObjective(x, dataset, hospitalNumCap),
    ones(hospitalNumCap + 1);
    autodiff = :forward
);
@time optim_res = optimize(
    obj_for_Optim,
    zeros(hospitalNumCap + 1),
    repeat([Inf], hospitalNumCap + 1),
    ones(hospitalNumCap + 1),
    Optim.Options(show_trace = false)
);
```

```{julia}
se = sqrt.(diag(inv(obj_for_Optim.H) ./ numObs));
DataFrame(
    estimates = optim_res.minimizer,
    se = se
)
```

## 5

```{julia}
alpha_est = optim_res.minimizer[1:hospitalNumCap];
gamma_est = optim_res.minimizer[hospitalNumCap + 1];

EntryThreshold = zeros(Int64, (hospitalNumCap, 2));

deno = alpha_est[1];
EntryThreshold[1,:] .= round(gamma_est / deno .* 1e+6);
for i = 2:hospitalNumCap
    deno = deno - alpha_est[i];
    EntryThreshold[i, :] = round.([gamma_est / deno .* 1e+6, gamma_est / deno .* 1e+6 / i]);
end

EntryThreshold    
```

