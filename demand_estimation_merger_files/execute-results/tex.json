{
  "hash": "54fe1121db9da83d63a7f100b5978270",
  "result": {
    "markdown": "---\ntitle: 需要モデルの推定（応用編）\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n---\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing CSV\nusing DataFrames\nusing StringEncodings\nusing FixedEffectModels\nusing RegressionTables\nusing Plots\nusing LinearAlgebra\nusing Statistics\nusing Optim\nusing Printf\nusing ForwardDiff\nusing Random\nusing GLM\nusing Serialization\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ndata = CSV.read(\"data/demand_estimation_merger/chap3_data.csv\", DataFrame);\nfirst(data, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\begin{tabular}{r|cccccccccc}\n\t& NameID & year & Maker & Type & Name & Sales & Model & price & kata & \\\\\n\t\\hline\n\t& Int64 & Int64 & String15 & String7 & String31 & Int64 & String & Float64 & String15 & \\\\\n\t\\hline\n\t1 & 14 & 2011 & Audi & Foreign & A1シリーズ & 4206 & 1.4 TFSI & 2.99804 & DBA-8XCAX & $\\dots$ \\\\\n\t2 & 14 & 2012 & Audi & Foreign & A1シリーズ & 4502 & 1.4 TFSI & 2.835 & DBA-8XCAX & $\\dots$ \\\\\n\t3 & 14 & 2013 & Audi & Foreign & A1シリーズ & 5071 & 1.4 TFSI & 2.82326 & DBA-8XCAX & $\\dots$ \\\\\n\t4 & 15 & 2006 & Audi & Foreign & A3シリーズ & 4830 & アトラクション & 2.91889 & GH-8PBSE & $\\dots$ \\\\\n\t5 & 15 & 2007 & Audi & Foreign & A3シリーズ & 3874 & アトラクション & 2.93944 & GH-8PBSE & $\\dots$ \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n## Data cleaning\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ndata[!, :Foreign_d] = data[:, :Type] .== \"Foreign\";\ndata[!, :FuelRegular_d] = data[:, :FuelType] .== \"レギュラー\";\ndata[!, :capacity_d] = data[:, :capacity] .> 4;\ntransform!(data, [:year => ByRow(isequal(v))=> Symbol(\"year_\" * string(v)) for v in unique(data.year)]);\nselect!(data, Not(:year_2006));\n```\n:::\n\n\n## 4.2\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nsort!(data, [:year, :Maker, :price]);\nN = nrow(data);\nT = length(unique(data.year));\nX1 = hcat(\n    repeat([1], N), \n    Matrix(data[:, [:price, :FuelEfficiency, :hppw, :size, :capacity_d, :FuelRegular_d, :Foreign_d]]),\n    Matrix(data[:, r\"^year_\"])    \n    );\nX2 = Matrix(data[:, [:price]]);\nZ = hcat(\n    repeat([1], N),\n    Matrix(data[:, [:FuelEfficiency, :hppw, :size, :capacity_d, :FuelRegular_d, :Foreign_d]]),\n    Matrix(data[:, r\"^year_\"]),\n    Matrix(data[:, r\"^iv_GH.*(?<!nest)$\"])\n    );\nRandom.seed!(42);\nNsim = 1000;\n\ndraw_vec = reduce(hcat, [randn(size(X2, 2)) for j =1:Nsim]);\n\nmarketindex = data.year;\nuniquemarketindex = sort(unique(data.year));\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ntemp1 = reduce(hcat, [uniquemarketindex for j = 1:N])';\ntemp2 = reduce(hcat, [data.year for j = 1:T]);\nmkt_denom_d = (temp1 .== temp2);\n\nmutable struct datalist_struct\n    X1::Array{Float64,2};\n    X2::Array{Float64,2};\n    Z::Array{Float64,2};\n    ShareVec::Vector{Float64};\n    marketindex::Vector{Int64};\n    logitshare::Vector{Float64};\n    draw_vec::Array{Float64,2};\n    mkt_denom_d::BitMatrix\nend\n\nmutable struct parameter_struct\n    Nsim::Int;\n    T::Int;\n    N::Int;\nend\ndatalist = datalist_struct(X1, X2, Z, data.share, marketindex, data.logit_share, draw_vec, mkt_denom_d);\nparameter = parameter_struct(Nsim, T, N);\n```\n:::\n\n\n## 4.3\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nfunction f_mktshare(\n        theta2,\n        datalist::datalist_struct,\n        parameter::parameter_struct,\n#         delta::Vector{Float64}\n        delta\n    )\n        \n    mu = datalist.X2 * Diagonal(theta2) * datalist.draw_vec;\n    \n    delta_mu = delta .* ones((1, parameter.Nsim)) .+ mu;\n    exp_delta_mu = exp.(delta_mu .- maximum(delta_mu));\n    denom_outside = exp.(-maximum(delta_mu));\n    \n    denom_temp = (exp_delta_mu' * datalist.mkt_denom_d)' .+ denom_outside;\n    denom = datalist.mkt_denom_d * denom_temp;\n    \n    s_jt_i = exp_delta_mu ./ denom;\n    s_jt = vec(mean(s_jt_i, dims = 2));\n    \n    return s_jt\n    \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nf_mktshare (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nfunction f_contraction(\n        theta2,\n        datalist::datalist_struct,\n        parameter::parameter_struct,\n        delta_ini::Vector{Float64}\n    )\n    \n    tol = 1e-11;\n    norm = 1e+10\n\n    delta_old = delta_ini;\n    exp_delta_old = exp.(delta_old);\n    \n    iter = 0;\n        \n    while ((norm > tol) & (iter < 1000))\n        \n        # print(iter, \"\\n\")\n        \n        pred_mkt_share = f_mktshare(theta2, datalist, parameter, delta_old);\n        \n        exp_delta = exp_delta_old .* datalist.ShareVec ./ pred_mkt_share;\n        \n        norm = maximum(abs.(exp_delta .- exp_delta_old));\n        \n        exp_delta_old = exp_delta;\n        delta_old = log.(exp_delta_old);\n        iter += 1;\n        \n    end\n    \n#     print(iter, \"\\n\")\n    \n    return delta_old;\n    \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nf_contraction (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nfunction f_GMMobj(\n        theta2,\n        parameter::parameter_struct,\n        datalist::datalist_struct,\n        delta_ini::Vector{Float64}\n    )\n    \n#     delta_ini = delta_global;\n#     delta_ini = datalist.logitshare;\n    delta = f_contraction(theta2, datalist, parameter, delta_ini);\n#     global delta_global = delta\n    \n#     if (datalist.weight_mat_option == \"2SLS\") \n        W = inv(datalist.Z' * datalist.Z);\n#     elseif (datalist.weight_mat_option == \"Ident\")\n#         W = I(size(datalist.Z, 2));\n#     end\n    \n    beta_hat = (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \\ (datalist.X1' * datalist.Z * W * datalist.Z' * delta);\n    \n    Xi = delta - datalist.X1 * beta_hat;\n    \n    output = Xi' * datalist.Z * W * datalist.Z' * Xi\n        \n    return output\n    \nend    \n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nf_GMMobj (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\ninitial_x = [0.1];\ndelta_ini = f_contraction(initial_x, datalist, parameter, datalist.logitshare);\nobjFunc_for_Optim = TwiceDifferentiable(\n    x -> f_GMMobj(x, parameter, datalist, delta_ini),\n    initial_x;\n    autodiff = :forward\n    );\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\n@time gmm_res = optimize(\n    objFunc_for_Optim,\n#     x -> f_GMMobj(x, parameter, datalist, delta_ini),\n    [0.0],\n    [Inf],\n    initial_x,\n    Optim.Options(show_trace = true)\n)\n```\n:::\n\n\n\n\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nW = inv(datalist.Z' * datalist.Z);    \ndelta = f_contraction(gmm_res.minimizer, datalist, parameter, delta_ini);\nbeta_hat = (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \\ (datalist.X1' * datalist.Z * W * datalist.Z' * delta);\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nXi = delta - X1 * beta_hat;\nOmega_hat = reduce(+, Z[i,:] * Z[i,:]' .* Xi[i]^2 ./ N for i = 1:N);\nDdelta = ForwardDiff.jacobian(x -> delta_ini = f_contraction(x, datalist, parameter, delta), gmm_res.minimizer);\nG = Z' * hcat(- X1, Ddelta) ./ N;\nAsyVarMat = (G' * W * G) \\ G' * W * Omega_hat * W * G * inv(G' * W * G);\nAse = sqrt.(diag(AsyVarMat) ./ N);\nDataFrame(\n    Var = [\n        \"Const\", \"Price\", \"Fuel Efficiency\", \"hppw\", \"size\", \n        \"capacity_d\", \"FuelRegular_d\", \"Foreign_d\",\n        \"year_2007\", \"year_2008\", \"year_2009\", \n        \"year_2010\", \"year_2011\", \"year_2012\", \n        \"year_2013\", \"year_2014\", \"year_2015\", \"year_2016\", \n        \"random_price\"\n        ],\n    Est = vcat(beta_hat, gmm_res.minimizer),\n    se = Ase\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=tex}\n\\begin{tabular}{r|ccc}\n\t& Var & Est & se\\\\\n\t\\hline\n\t& String & Float64 & Float64\\\\\n\t\\hline\n\t1 & Const & -13.8731 & 0.57026 \\\\\n\t2 & Price & -2.26772 & 0.654208 \\\\\n\t3 & Fuel Efficiency & 0.195358 & 0.0125426 \\\\\n\t4 & hppw & 14.123 & 3.47038 \\\\\n\t5 & size & 0.545374 & 0.0755396 \\\\\n\t6 & capacity\\_d & -0.313033 & 0.137174 \\\\\n\t7 & FuelRegular\\_d & -1.09267 & 0.283308 \\\\\n\t8 & Foreign\\_d & 1.02095 & 0.188846 \\\\\n\t9 & year\\_2007 & -0.832913 & 0.173999 \\\\\n\t10 & year\\_2008 & -0.701377 & 0.167621 \\\\\n\t11 & year\\_2009 & -0.85305 & 0.168625 \\\\\n\t12 & year\\_2010 & -0.0979013 & 0.15156 \\\\\n\t13 & year\\_2011 & -0.251012 & 0.150935 \\\\\n\t14 & year\\_2012 & -0.482276 & 0.159593 \\\\\n\t15 & year\\_2013 & -0.623362 & 0.165287 \\\\\n\t16 & year\\_2014 & -1.04477 & 0.180093 \\\\\n\t17 & year\\_2015 & -1.1434 & 0.178264 \\\\\n\t18 & year\\_2016 & -1.24577 & 0.181075 \\\\\n\t19 & random\\_price & 0.647326 & 0.218627 \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nmu = X2 * Diagonal(gmm_res.minimizer) * draw_vec;\ndelta_mu = delta .+ mu;\nexp_delta_mu = exp.(delta_mu);\ndenom_outside = exp.(0.0);\ndenom_temp = (exp_delta_mu' * mkt_denom_d)' .+ denom_outside;\ndenom = mkt_denom_d * denom_temp;\n\ns_jt_i = exp_delta_mu ./ denom;\ndraw_for_price = draw_vec[1,:];\nalpha_i = beta_hat[2] .+ gmm_res.minimizer[1] .* draw_for_price;\nyear = 2016\nJ_t = sum(data.year .== year);\ndata_t = data[data.year .== year, :];\n\nag_model_s_i = s_jt_i[data.year .== year, :]\nag_model_s = mean(ag_model_s_i, dims = 2);\nprice_t = data.price[data.year .== year];\n\nelasmat_t = zeros((J_t, J_t));\n\nfor k in 1:J_t, j in 1:J_t\n    if (k != j)\n        elasmat_t[k, j] = (-1.0) .* price_t[k] ./ ag_model_s[j] * mean(alpha_i .* ag_model_s_i[j, :] .* ag_model_s_i[k, :])\n    elseif (k == j)\n        elasmat_t[k, j] = price_t[j] ./ ag_model_s[j] * mean(alpha_i .* ag_model_s_i[j, :] .* (1.0 .- ag_model_s_i[j, :]))\n    end\nend\n```\n:::\n\n\n## 5\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nPricevec_t = data_t.price;\nSharevec_t = data_t.share;\n\nOwnership_t = data_t.Maker .== permutedims(data_t.Maker);\nDerivative_t = - elasmat_t .* Sharevec_t' ./ Pricevec_t;\nDelta_t = Derivative_t .* Ownership_t;\nMarginal_Cost_t = Pricevec_t - (Delta_t \\ Sharevec_t);\npred_mc_df = DataFrame(\n    Maker = data_t.Maker, \n    Name = data_t.Name, \n    Price = data_t.price,\n    MC = Vector{Float64}(Marginal_Cost_t),\n    Margin = (data_t.price .- Marginal_Cost_t) ./ data_t.price\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=tex}\n\\begin{tabular}{r|ccccc}\n\t& Maker & Name & Price & MC & Margin\\\\\n\t\\hline\n\t& String15 & String31 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & Audi & A3シリーズ & 3.28 & 2.37501 & 0.275912 \\\\\n\t2 & Audi & A4シリーズ & 5.18 & 3.63239 & 0.298766 \\\\\n\t3 & BMW & ミニ & 2.4 & 1.68184 & 0.299235 \\\\\n\t4 & BMW & 1シリーズ & 3.1 & 2.23582 & 0.278768 \\\\\n\t5 & BMW & X1 & 3.67 & 2.65528 & 0.276489 \\\\\n\t6 & BMW & 2シリーズ & 3.81 & 2.75368 & 0.27725 \\\\\n\t7 & BMW & 3シリーズ & 4.49 & 3.2058 & 0.286013 \\\\\n\t8 & Daihatsu & ミラ & 0.885 & 0.367591 & 0.584643 \\\\\n\t9 & Daihatsu & ムーヴ & 1.134 & 0.590801 & 0.479012 \\\\\n\t10 & Daihatsu & ブーン & 1.15 & 0.605056 & 0.473864 \\\\\n\t11 & Daihatsu & キャスト & 1.22 & 0.667293 & 0.453039 \\\\\n\t12 & Daihatsu & タント & 1.22 & 0.667293 & 0.453039 \\\\\n\t13 & Daihatsu & ウェイク & 1.35 & 0.782294 & 0.420523 \\\\\n\t14 & Daihatsu & アトレーワゴン & 1.404 & 0.829833 & 0.408951 \\\\\n\t15 & Daihatsu & トール & 1.463 & 0.881614 & 0.397393 \\\\\n\t16 & Daihatsu & ビーゴ & 1.738 & 1.12062 & 0.355223 \\\\\n\t17 & Daihatsu & コペン & 1.852 & 1.2185 & 0.342064 \\\\\n\t18 & Daihatsu & メビウス & 2.571 & 1.8168 & 0.29335 \\\\\n\t19 & Daihatsu & アルティス & 2.745 & 1.956 & 0.28743 \\\\\n\t20 & Fiat & 500 & 1.998 & 1.34902 & 0.324817 \\\\\n\t21 & Honda & N-WGN & 1.164 & 0.613683 & 0.472781 \\\\\n\t22 & Honda & N-ONE & 1.185 & 0.632313 & 0.466402 \\\\\n\t23 & Honda & N-BOX & 1.27 & 0.707519 & 0.442898 \\\\\n\t24 & Honda & フィット & 1.3 & 0.733983 & 0.435398 \\\\\n\t25 & Honda & バモス & 1.374 & 0.799078 & 0.418429 \\\\\n\t26 & Honda & シャトル & 1.695 & 1.07825 & 0.363862 \\\\\n\t27 & Honda & グレイス & 1.75 & 1.12553 & 0.356839 \\\\\n\t28 & Honda & フリード & 1.88 & 1.23659 & 0.342242 \\\\\n\t29 & Honda & ヴェゼル & 1.92 & 1.27055 & 0.338254 \\\\\n\t30 & Honda & S660 & 1.98 & 1.32132 & 0.332666 \\\\\n\t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nhistogram(pred_mc_df.Margin, bins = 40, legend = false)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](demand_estimation_merger_files/figure-pdf/cell-20-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n## 6\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\ndata_2016 = data[data.year .== 2016, :];\ndata_2016 = leftjoin(data_2016, pred_mc_df, on = [\"Maker\", \"Name\"]);\ndropmissing!(data_2016);\n\ndata_2016[data_2016.Maker .== \"Honda\", :Maker] .= \"Nippyo\";\ndata_2016[data_2016.Maker .== \"Nissan\", :Maker] .= \"BrandA\";\ndata_2016[data_2016.Maker .== \"Subaru\", :Maker] .= \"BrandB\";\ndata_2016[data_2016.Maker .== \"Toyota\", :Maker] .= \"BrandC\";\n\ndata_2016[!, :MakerNippyoA] = data_2016[:, :Maker];\ndata_2016[!, :MakerNippyoB] = data_2016[:, :Maker];\ndata_2016[in([\"Nippyo\", \"BrandA\"]).(data_2016[:, :Maker]), :MakerNippyoA] .= \"NippyoA\";\ndata_2016[in([\"Nippyo\", \"BrandB\"]).(data_2016[:, :Maker]), :MakerNippyoB] .= \"NippyoB\";\nJ = nrow(data_2016);\n\nOwnership_true = data_2016.Maker .== permutedims(data_2016.Maker);\nOwnership_NippyoA = data_2016.MakerNippyoA .== permutedims(data_2016.MakerNippyoA);\nOwnership_NippyoB = data_2016.MakerNippyoB .== permutedims(data_2016.MakerNippyoB);\n```\n:::\n\n\n## 6.4\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nmc = data_2016.MC;\ndatalist_2016 = datalist_struct(\n    X1[data.year .== 2016, :],\n    X2[data.year .== 2016, :],\n    Z[data.year .== 2016, :],\n    data_2016.share,\n    data_2016.year,\n    data_2016.logit_share,\n    datalist.draw_vec,\n    datalist.mkt_denom_d[data.year .== 2016, :]\n);\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nfunction f_update(\n        datalist::datalist_struct,\n        p_old::Vector{Float64},\n        Ownership::BitMatrix,\n        parameter::parameter_struct,\n        theta1::Vector{Float64},\n        theta2::Vector{Float64},\n        mc::Vector{Float64},\n        Xi::Vector{Float64}\n    )\n    \n    X1_new = datalist.X1[:, :];\n    X2_new = reshape(p_old, (:, 1));\n    X1_new[:, 2] .= p_old;\n    \n    delta = (X1_new * theta1) .+ Xi;\n    datalist_new = datalist_struct(\n        X1_new, X2_new, datalist.Z, datalist.ShareVec, datalist.marketindex, \n        datalist.logitshare, datalist.draw_vec, datalist.mkt_denom_d\n        );\n    Sharevec = f_mktshare(\n        theta2, datalist_new, parameter, delta\n    );\n    \n    # elasticity\n    mu = datalist_new.X2 * Diagonal(theta2) * datalist_new.draw_vec;\n    delta_mu = delta .+ mu;\n    exp_delta_mu = exp.(delta_mu);\n    denom_outside = exp.(0.0);\n    denom_temp = (exp_delta_mu' * datalist_new.mkt_denom_d)' .+ denom_outside;\n    denom = datalist_new.mkt_denom_d * denom_temp;\n\n    s_jt_i = exp_delta_mu ./ denom;\n    draw_for_price = datalist_new.draw_vec[1,:];\n    alpha_i = theta1[2] .+ theta2[1] .* draw_for_price;\n    \n    J = size(X1_new, 1);\n    \n    ag_model_s = mean(s_jt_i, dims = 2);\n    elasmat = zeros((J, J));\n\n    for k in 1:J, j in 1:J\n        if (k != j)\n            elasmat[k, j] = (-1.0) .* p_old[k] ./ ag_model_s[j] * mean(alpha_i .* s_jt_i[j, :] .* s_jt_i[k, :])\n        elseif (k == j)\n            elasmat[k, j] = p_old[j] ./ ag_model_s[j] * mean(alpha_i .* s_jt_i[j, :] .* (1.0 .- s_jt_i[j, :]))\n        end\n    end\n\n    Derivative = - elasmat .* Sharevec' ./ p_old;\n    Delta = Derivative .* Ownership;\n    p_new = mc .+ (Delta \\ Sharevec)\n\n    return p_new\n    \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nf_update (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nfunction f_eqprice(\n        datalist::datalist_struct,\n        p_ini::Vector{Float64},\n        Ownership::BitMatrix,\n        parameter::parameter_struct,\n        theta1::Vector{Float64},\n        theta2::Vector{Float64},\n        mc::Vector{Float64},\n        Xi::Vector{Float64}\n    )\n    \n    lambda = 1e-6;\n    p_old = p_ini;\n    distance = 10000;\n    \n    local p_new\n    \n    while (distance > lambda)\n        p_new = f_update(datalist, p_old, Ownership, parameter, theta1, theta2, mc, Xi);\n        distance = maximum(abs.(p_new - p_old));\n        p_old = p_new[:];\n        # print(distance, \"\\n\")\n    end\n    \n    return p_new\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nf_eqprice (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n## 6.5\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\np_ini = data_2016.price;\np_NippyoA = f_eqprice(\n    datalist_2016,\n    p_ini,\n    Ownership_NippyoA,\n    parameter,\n    beta_hat,\n    gmm_res.minimizer,\n    mc,\n    Xi[data.year .== 2016]\n);\n\np_ini = data_2016.price;\np_NippyoB = f_eqprice(\n    datalist_2016,\n    p_ini,\n    Ownership_NippyoB,\n    parameter,\n    beta_hat,\n    gmm_res.minimizer,\n    mc,\n    Xi[data.year .== 2016]\n);\n```\n:::\n\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nfunction f_mktshare_sim(\n        datalist::datalist_struct,\n        p::Vector{Float64},\n        parameter::parameter_struct,\n        theta1::Vector{Float64},\n        theta2::Vector{Float64},\n        Xi::Vector{Float64}\n    )\n    \n    X1_new = datalist.X1[:, :];\n    X2_new = reshape(p[:], (:, 1));\n    X1_new[:, 2] .= p;\n    \n    delta = (X1_new * theta1) .+ Xi;\n    datalist_new = datalist_struct(\n        X1_new, X2_new, datalist.Z, datalist.ShareVec, datalist.marketindex, \n        datalist.logitshare, datalist.draw_vec, datalist.mkt_denom_d\n        );\n    Sharevec = f_mktshare(\n        theta2, datalist_new, parameter, delta\n    );\n    \n    return(Sharevec)\n    \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nf_mktshare_sim (generic function with 1 method)\n```\n:::\n:::\n\n\n## 7\n\n## 7.1\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\nmerger_sim_df = DataFrame(\n    Maker = data_2016.Maker, \n    Name = data_2016.Name, \n    Price_A = (p_NippyoA .- data_2016.price) ./ data_2016.price .* 100.0,\n    Share_A = (f_mktshare_sim(\n                datalist_2016,\n                p_NippyoA,\n                parameter,\n                beta_hat,\n                gmm_res.minimizer,\n                Xi[data.year .== 2016]\n            ) .- data_2016.share) ./ data_2016.share .* 100.0,\n    Price_B = (p_NippyoB .- data_2016.price) ./ data_2016.price .* 100.0,\n    Share_B = (f_mktshare_sim(\n                datalist_2016,\n                p_NippyoB,\n                parameter,\n                beta_hat,\n                gmm_res.minimizer,\n                Xi[data.year .== 2016]\n            ) .- data_2016.share) ./ data_2016.share .* 100.0,\n);\n\nmerger_sim_df[in([\"Nippyo\", \"BrandA\", \"BrandB\", \"BrandC\"]).(merger_sim_df.Maker), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=tex}\n\\begin{tabular}{r|cccccc}\n\t& Maker & Name & Price\\_A & Share\\_A & Price\\_B & Share\\_B\\\\\n\t\\hline\n\t& String15 & String31 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & Nippyo & N-WGN & 0.528904 & -1.08573 & 0.200634 & -0.412253 \\\\\n\t2 & Nippyo & N-ONE & 0.525627 & -1.09385 & 0.199727 & -0.416064 \\\\\n\t3 & Nippyo & N-BOX & 0.514136 & -1.12708 & 0.196685 & -0.431724 \\\\\n\t4 & Nippyo & フィット & 0.510693 & -1.13894 & 0.19583 & -0.43734 \\\\\n\t5 & Nippyo & バモス & 0.503396 & -1.16852 & 0.194146 & -0.451391 \\\\\n\t6 & Nippyo & シャトル & 0.486998 & -1.3015 & 0.192368 & -0.515434 \\\\\n\t7 & Nippyo & グレイス & 0.486127 & -1.32499 & 0.192777 & -0.526882 \\\\\n\t8 & Nippyo & フリード & 0.485831 & -1.38128 & 0.194403 & -0.55445 \\\\\n\t9 & Nippyo & ヴェゼル & 0.486195 & -1.3988 & 0.195076 & -0.563071 \\\\\n\t10 & Nippyo & S660 & 0.48711 & -1.42526 & 0.196225 & -0.576117 \\\\\n\t11 & Nippyo & ステップワゴン & 0.497936 & -1.56393 & 0.204493 & -0.645058 \\\\\n\t12 & Nippyo & CR-V & 0.5085 & -1.64777 & 0.211013 & -0.687093 \\\\\n\t13 & Nippyo & ジェイド & 0.51258 & -1.67565 & 0.213399 & -0.701116 \\\\\n\t14 & Nippyo & CR-Z & 0.525636 & -1.75519 & 0.220757 & -0.741194 \\\\\n\t15 & Nippyo & オデッセイ & 0.530747 & -1.7834 & 0.223555 & -0.755435 \\\\\n\t16 & Nippyo & アコード & 0.660597 & -2.28975 & 0.288767 & -1.00943 \\\\\n\t17 & Nippyo & シビック & 0.725064 & -2.47056 & 0.319031 & -1.09739 \\\\\n\t18 & Nippyo & レジェンド & 1.01613 & -2.89885 & 0.434637 & -1.25531 \\\\\n\t19 & BrandA & クリッパーリオ & 0.898453 & -1.7457 & 0.0019763 & 0.0135295 \\\\\n\t20 & BrandA & デイズ & 0.869238 & -1.7888 & 0.00192515 & 0.0139051 \\\\\n\t21 & BrandA & モコ & 0.856046 & -1.81156 & 0.00190211 & 0.0141043 \\\\\n\t22 & BrandA & ノート & 0.795432 & -1.96576 & 0.00179521 & 0.0154693 \\\\\n\t23 & BrandA & キューブ & 0.778427 & -2.04207 & 0.00176288 & 0.0161547 \\\\\n\t24 & BrandA & ウイングロード & 0.773318 & -2.07273 & 0.00175226 & 0.0164318 \\\\\n\t25 & BrandA & ジューク & 0.768641 & -2.10673 & 0.00174171 & 0.0167405 \\\\\n\t26 & BrandA & NV200バネット & 0.761601 & -2.18091 & 0.00172206 & 0.0174183 \\\\\n\t27 & BrandA & シルフィ & 0.758471 & -2.24688 & 0.00170711 & 0.0180265 \\\\\n\t28 & BrandA & キャラバンコーチ & 0.757988 & -2.26996 & 0.0017022 & 0.0182403 \\\\\n\t29 & BrandA & エクストレイル & 0.759575 & -2.38167 & 0.0016787 & 0.0192849 \\\\\n\t30 & BrandA & ラフェスタ & 0.761311 & -2.41707 & 0.00167082 & 0.0196191 \\\\\n\t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n## 7.2\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nPricevec = data_2016.price;\nSharevec = data_2016.share;\nOwnership = data_2016.MakerNippyoA .== permutedims(data_2016.MakerNippyoA);\nDerivative = - elasmat_t .* Sharevec' ./ Pricevec;\nDelta = Derivative .* Ownership;\nmc_NippyoA_pfix = Pricevec - (Delta \\ Sharevec);\nOwnership = data_2016.MakerNippyoB .== permutedims(data_2016.MakerNippyoB);\nDerivative = - elasmat_t .* Sharevec' ./ Pricevec;\nDelta = Derivative .* Ownership;\nmc_NippyoB_pfix = Pricevec - (Delta \\ Sharevec);\nmc_sim_df = DataFrame(\n    Maker = data_2016.Maker, \n    Name = data_2016.Name, \n    Nippyo_and_Brand_A = (mc_NippyoA_pfix .- mc) ./ mc .* 100.0,\n    Nippyo_and_Brand_B = (mc_NippyoB_pfix .- mc) ./ mc .* 100.0,\n);\n\nmc_sim_df[in([\"Nippyo\", \"BrandA\", \"BrandB\", \"BrandC\"]).(mc_sim_df.Maker), :]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=tex}\n\\begin{tabular}{r|cccc}\n\t& Maker & Name & Nippyo\\_and\\_Brand\\_A & Nippyo\\_and\\_Brand\\_B\\\\\n\t\\hline\n\t& String15 & String31 & Float64 & Float64\\\\\n\t\\hline\n\t1 & Nippyo & N-WGN & -0.913246 & -0.347271 \\\\\n\t2 & Nippyo & N-ONE & -0.895623 & -0.341138 \\\\\n\t3 & Nippyo & N-BOX & -0.83478 & -0.320098 \\\\\n\t4 & Nippyo & フィット & -0.816657 & -0.313882 \\\\\n\t5 & Nippyo & バモス & -0.777854 & -0.300681 \\\\\n\t6 & Nippyo & シャトル & -0.672993 & -0.266414 \\\\\n\t7 & Nippyo & グレイス & -0.661754 & -0.262989 \\\\\n\t8 & Nippyo & フリード & -0.640238 & -0.256743 \\\\\n\t9 & Nippyo & ヴェゼル & -0.63483 & -0.255265 \\\\\n\t10 & Nippyo & S660 & -0.627628 & -0.253382 \\\\\n\t11 & Nippyo & ステップワゴン & -0.604134 & -0.248681 \\\\\n\t12 & Nippyo & CR-V & -0.598054 & -0.248784 \\\\\n\t13 & Nippyo & ジェイド & -0.596997 & -0.249167 \\\\\n\t14 & Nippyo & CR-Z & -0.596106 & -0.251026 \\\\\n\t15 & Nippyo & オデッセイ & -0.596445 & -0.25192 \\\\\n\t16 & Nippyo & アコード & -0.638315 & -0.280322 \\\\\n\t17 & Nippyo & シビック & -0.664184 & -0.293867 \\\\\n\t18 & Nippyo & レジェンド & -0.790266 & -0.34094 \\\\\n\t19 & BrandA & クリッパーリオ & -1.63352 & 0.0 \\\\\n\t20 & BrandA & デイズ & -1.48946 & 0.0 \\\\\n\t21 & BrandA & モコ & -1.42786 & 0.0 \\\\\n\t22 & BrandA & ノート & -1.1613 & 0.0 \\\\\n\t23 & BrandA & キューブ & -1.08501 & 0.0 \\\\\n\t24 & BrandA & ウイングロード & -1.06039 & 0.0 \\\\\n\t25 & BrandA & ジューク & -1.03626 & 0.0 \\\\\n\t26 & BrandA & NV200バネット & -0.993043 & 0.0 \\\\\n\t27 & BrandA & シルフィ & -0.963119 & 0.0 \\\\\n\t28 & BrandA & キャラバンコーチ & -0.954175 & 0.0 \\\\\n\t29 & BrandA & エクストレイル & -0.919671 & 0.0 \\\\\n\t30 & BrandA & ラフェスタ & -0.911261 & 0.0 \\\\\n\t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n## 7.4\n\n\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\nalpha_i = - (beta_hat[2] .+ gmm_res.minimizer[1] * draw_for_price)\ndata_2016.HH[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n56950757\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\nfunction f_CS(\n        datalist::datalist_struct,\n        p::Vector{Float64},\n        parameter::parameter_struct,\n        theta1::Vector{Float64},\n        theta2::Vector{Float64},\n        Xi::Vector{Float64},\n        HH::Int64\n    )\n    \n    X1_new = datalist.X1[:, :];\n    X2_new = reshape(p, (:, 1));\n    X1_new[:, 2] .= p;\n    \n    delta = (X1_new * theta1) .+ Xi;\n    \n    # elasticity\n    mu = X2_new * Diagonal(theta2) * datalist.draw_vec;\n    \n    V = delta .+ mu;\n    exp_V = exp.(V);\n    \n    numerator = log.(vec(sum(exp_V, dims = 1)) .+ 1.0);\n    \n    draw_for_price = datalist.draw_vec[1,:];\n    alpha_i = - (theta1[2] .+ theta2[1] .* draw_for_price);\n    \n    CS = mean(numerator ./ alpha_i) .* HH;\n\n    return CS\n    \nend\n\nCS_2016 = f_CS(\n    datalist_2016, \n    data_2016.price, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    Xi[data.year .== 2016], \n    data_2016.HH[1]\n);\n\nCS_NippyoA = f_CS(\n    datalist_2016, \n    p_NippyoA, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    Xi[data.year .== 2016], \n    data_2016.HH[1]\n);\n\nCS_NippyoB = f_CS(\n    datalist_2016, \n    p_NippyoB, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    Xi[data.year .== 2016], \n    data_2016.HH[1]\n);\n\nCV_NippyoA = CS_NippyoA - CS_2016;\nCV_NippyoB = CS_NippyoB - CS_2016;\n```\n:::\n\n\n::: {.cell execution_count=33}\n``` {.julia .cell-code}\nf_profit = function(\n        Maker::AbstractVector, \n        price::Vector{Float64}, \n        mc::Vector{Float64}, \n        share::Vector{Float64}, \n        HH::Vector{Int64}\n    )\n    \n    dt = DataFrame(\n        Maker = Maker,\n        price = price,\n        mc = mc,\n        share = share,\n        HH = HH,\n        profit = (price - mc) .* share .* HH,\n        revenue = price.* share .* HH\n    )\n    \n    return(combine(groupby(dt, :Maker), [:profit, :revenue] .=> sum .=> [:profit, :revenue]))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n#27 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\npro_rev_2016 = f_profit(\n    data_2016.Maker,\n    data_2016.price,\n    mc,\n    data_2016.share,\n    data_2016.HH\n);\npro_rev_NippyoA = f_profit(\n    data_2016.Maker,\n    p_NippyoA,\n    mc,\n    f_mktshare_sim(\n                datalist_2016,\n                p_NippyoA,\n                parameter,\n                beta_hat,\n                gmm_res.minimizer,\n                Xi[data.year .== 2016]\n            ),\n    data_2016.HH\n);\npro_rev_NippyoB = f_profit(\n    data_2016.Maker,\n    p_NippyoB,\n    mc,\n    f_mktshare_sim(\n                datalist_2016,\n                p_NippyoB,\n                parameter,\n                beta_hat,\n                gmm_res.minimizer,\n                Xi[data.year .== 2016]\n            ),\n    data_2016.HH\n);\n\nTS_change_NippyoA = CV_NippyoA + sum(pro_rev_NippyoA.profit - pro_rev_2016.profit);\nTS_change_NippyoB = CV_NippyoB + sum(pro_rev_NippyoB.profit - pro_rev_2016.profit);\n```\n:::\n\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nDataFrame(\n    Measure = [\"Consumer surplus\", \"Total welfare\"],\n    Nippyo_and_Brand_A = [CV_NippyoA, TS_change_NippyoA],\n    Nippyo_and_Brand_B = [CV_NippyoB, TS_change_NippyoB],\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=tex}\n\\begin{tabular}{r|ccc}\n\t& Measure & Nippyo\\_and\\_Brand\\_A & Nippyo\\_and\\_Brand\\_B\\\\\n\t\\hline\n\t& String & Float64 & Float64\\\\\n\t\\hline\n\t1 & Consumer surplus & -11486.1 & -4617.72 \\\\\n\t2 & Total welfare & -10275.0 & -4082.23 \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nresult_df = DataFrame(\n    Maker = pro_rev_2016.Maker,\n    Profits_NippyoA = pro_rev_NippyoA.profit - pro_rev_2016.profit,\n    Revenue_NippyoA = pro_rev_NippyoA.revenue - pro_rev_2016.revenue,\n    Profits_NippyoB = pro_rev_NippyoB.profit - pro_rev_2016.profit,\n    Revenue_NippyoB = pro_rev_NippyoB.revenue - pro_rev_2016.revenue,\n);\n\ntotal_df = combine(result_df, 2:5 .=> sum .=> names(result_df)[2:5]);\ntotal_df[!, :Maker] .= \"Total\"\nappend!(result_df, total_df)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=tex}\n\\begin{tabular}{r|ccccc}\n\t& Maker & Profits\\_NippyoA & Revenue\\_NippyoA & Profits\\_NippyoB & Revenue\\_NippyoB\\\\\n\t\\hline\n\t& String15 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & Audi & 11.42 & 39.3669 & 5.00774 & 17.2094 \\\\\n\t2 & BMW & 37.8657 & 123.311 & 16.4744 & 52.9189 \\\\\n\t3 & Daihatsu & 108.936 & 208.968 & 44.2344 & 83.5685 \\\\\n\t4 & Fiat & 1.52418 & 4.14223 & 0.639666 & 1.70164 \\\\\n\t5 & Lexas & 59.8269 & 199.098 & 25.9303 & 87.8 \\\\\n\t6 & Matsuda & 59.4818 & 151.83 & 24.8492 & 62.3322 \\\\\n\t7 & Mercedes & 52.2646 & 174.885 & 22.6072 & 77.1302 \\\\\n\t8 & Mitsubishi & 20.5141 & 50.3782 & 8.53346 & 20.6598 \\\\\n\t9 & Suzuki & 114.119 & 216.394 & 46.3145 & 86.5724 \\\\\n\t10 & Volkswagen & 19.5327 & 58.8824 & 8.34637 & 24.6511 \\\\\n\t11 & Volvo & 9.3833 & 32.0072 & 4.1136 & 13.8844 \\\\\n\t12 & Nippyo & 78.9811 & -9184.5 & 42.7737 & -3672.28 \\\\\n\t13 & BrandA & 14.0327 & -10407.1 & 57.2739 & 142.533 \\\\\n\t14 & BrandB & 55.1002 & 153.123 & -12.0312 & -4885.14 \\\\\n\t15 & BrandC & 568.091 & 1412.74 & 240.429 & 584.277 \\\\\n\t16 & Total & 1211.07 & -16766.5 & 535.496 & -7302.18 \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n## 8\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nfunction f_effect_cost_reduction(\n        cost_red::Float64,\n        cost_red_firm::AbstractVector,\n        Ownership::BitMatrix,\n        data::DataFrame,\n        mc::Vector{Float64},\n        datalist::datalist_struct,\n        parameter::parameter_struct,\n        theta1::Vector{Float64},\n        theta2::Vector{Float64},\n        HH::Vector{Int64},\n        p_pre::Vector{Float64},\n        pro_rev_pre::DataFrame,\n        CS_pre::Float64,\n        Xi::Vector{Float64}\n    )\n   \n    mc_new = mc[:];\n    mc_new[in(cost_red_firm).(data.Maker)] = mc_new[in(cost_red_firm).(data.Maker)] .* cost_red;\n    \n    p_post = f_eqprice(datalist, p_pre, Ownership, parameter, theta1, theta2, mc_new, Xi);\n    \n    CV = f_CS(datalist, p_post, parameter, theta1, theta2, Xi, HH[1]) - CS_pre;\n    \n    share_post = f_mktshare_sim(datalist, p_post, parameter, theta1, theta2, Xi);\n    pro_rev_post = f_profit(data.Maker, p_post, mc, share_post, HH);\n    \n    TS_change = CV + sum(pro_rev_post.profit .- pro_rev_pre.profit);\n    return TS_change\n    \nend\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nf_effect_cost_reduction (generic function with 1 method)\n```\n:::\n:::\n\n\n## 8.2\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\ncost_red_firm = [\"Nippyo\", \"Brand_A\"];\ndistance = 100\nlambda = 1e-6;\nmax_cost_red = 1.0;\nmin_cost_red = 0.0;\n\niter = 1;\n```\n:::\n\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\n@time while (distance > lambda) & (iter < 100)\n    \n    mid_cost_red = (max_cost_red + min_cost_red) / 2.0;\n    \n    mid_eval = f_effect_cost_reduction(\n        mid_cost_red,\n        cost_red_firm,\n        Ownership_NippyoA,\n        data_2016,\n        mc,\n        datalist_2016,\n        parameter,\n        beta_hat,\n        gmm_res.minimizer,\n        data_2016.HH,\n        p_NippyoA,\n        pro_rev_2016,\n        CS_2016,\n        Xi[data.year .== 2016]\n    );\n    \n    if mid_eval > 0\n        min_cost_red = mid_cost_red;\n    else\n        max_cost_red = mid_cost_red;\n    end\n    \n    distance = abs(mid_eval - 0);\n    print(distance, \"\\n\")\n#     print(min_cost_red, \",\", max_cost_red, \",\", mid_cost_red, \"\\n\")\n    iter += 1\n    \nend\ncost_red_NippyoA = (min_cost_red + min_cost_red) / 2.0;\n```\n:::\n\n\n\n\n::: {.cell execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n0.9856680991833855\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\nmc_NippyoA_TSfix = mc[:];\nmc_NippyoA_TSfix[in(cost_red_firm).(data_2016.Maker)] = (\n    mc_NippyoA_TSfix[in(cost_red_firm).(data_2016.Maker)] .* cost_red_NippyoA\n    );\n```\n:::\n\n\n::: {.cell execution_count=43}\n``` {.julia .cell-code}\np_NippyoA_TSfix = f_eqprice(\n    datalist_2016, \n    p_NippyoA, \n    Ownership_NippyoA, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    mc_NippyoA_TSfix, \n    Xi[data.year .== 2016]\n    );\nshare_NippyoA_TSfix = f_mktshare_sim(\n    datalist_2016, \n    p_NippyoA_TSfix, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    Xi[data.year .== 2016]\n    );\n```\n:::\n\n\n## 8.3\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\ncost_red_firm = [\"Nippyo\", \"Brand_B\"];\ndistance = 100\nlambda = 1e-6;\nmax_cost_red = 1.0;\nmin_cost_red = 0.0;\n\niter = 1;\n```\n:::\n\n\n::: {.cell execution_count=45}\n``` {.julia .cell-code}\n@time while (distance > lambda) & (iter < 100)\n    \n    mid_cost_red = (max_cost_red + min_cost_red) / 2.0;\n    \n    mid_eval = f_effect_cost_reduction(\n        mid_cost_red,\n        cost_red_firm,\n        Ownership_NippyoB,\n        data_2016,\n        mc,\n        datalist_2016,\n        parameter,\n        beta_hat,\n        gmm_res.minimizer,\n        data_2016.HH,\n        p_NippyoB,\n        pro_rev_2016,\n        CS_2016,\n        Xi[data.year .== 2016]\n    );\n    \n    if mid_eval > 0\n        min_cost_red = mid_cost_red;\n    else\n        max_cost_red = mid_cost_red;\n    end\n    \n    distance = abs(mid_eval - 0);\n    print(distance, \"\\n\")\n#     print(min_cost_red, \",\", max_cost_red, \",\", mid_cost_red, \"\\n\")\n    iter += 1\n    \nend\ncost_red_NippyoB = (min_cost_red + min_cost_red) / 2.0;\n```\n:::\n\n\n\n\n::: {.cell execution_count=47}\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n0.9943264803296188\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\nmc_NippyoB_TSfix = mc[:];\nmc_NippyoB_TSfix[in(cost_red_firm).(data_2016.Maker)] = (\n    mc_NippyoB_TSfix[in(cost_red_firm).(data_2016.Maker)] .* cost_red_NippyoB\n    );\n```\n:::\n\n\n::: {.cell execution_count=49}\n``` {.julia .cell-code}\np_NippyoB_TSfix = f_eqprice(\n    datalist_2016, \n    p_NippyoB, \n    Ownership_NippyoB,\n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    mc_NippyoB_TSfix, \n    Xi[data.year .== 2016]\n    );\nshare_NippyoB_TSfix = f_mktshare_sim(\n    datalist_2016, \n    p_NippyoB_TSfix, \n    parameter, \n    beta_hat, \n    gmm_res.minimizer, \n    Xi[data.year .== 2016]\n    );\n```\n:::\n\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\n[1 - cost_red_NippyoA 1 - cost_red_NippyoB] .* 100\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n1×2 Matrix{Float64}:\n 1.43319  0.567352\n```\n:::\n:::\n\n\n## 8.5\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\npro_rev_NippyoA_rc = f_profit(\n    data_2016.Maker,\n    p_NippyoA_TSfix,\n    mc_NippyoA_TSfix,\n    share_NippyoA_TSfix,\n    data_2016.HH\n);\npro_rev_NippyoB_rc = f_profit(\n    data_2016.Maker,\n    p_NippyoB_TSfix,\n    mc_NippyoB_TSfix,\n    share_NippyoB_TSfix,\n    data_2016.HH\n);\n\nresult2_df = DataFrame(\n    Maker = pro_rev_2016.Maker,\n    Profits_NippyoA = pro_rev_NippyoA_rc.profit - pro_rev_2016.profit,\n    Revenue_NippyoA = pro_rev_NippyoA_rc.revenue - pro_rev_2016.revenue,\n    Profits_NippyoB = pro_rev_NippyoB_rc.profit - pro_rev_2016.profit,\n    Revenue_NippyoB = pro_rev_NippyoB_rc.revenue - pro_rev_2016.revenue,\n    \n);\n\ntotal2_df = combine(result2_df, 2:5 .=> sum .=> names(result2_df)[2:5]);\ntotal2_df[!, :Maker] .= \"Total\";\nappend!(result2_df, total2_df)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=tex}\n\\begin{tabular}{r|ccccc}\n\t& Maker & Profits\\_NippyoA & Revenue\\_NippyoA & Profits\\_NippyoB & Revenue\\_NippyoB\\\\\n\t\\hline\n\t& String15 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & Audi & 0.578278 & 0.637611 & 0.709338 & 1.85086 \\\\\n\t2 & BMW & 1.16365 & 0.743377 & 1.92048 & 4.30378 \\\\\n\t3 & Daihatsu & -1.23683 & -3.20943 & 0.510195 & -0.652691 \\\\\n\t4 & Fiat & -0.000300335 & -0.0395873 & 0.034865 & 0.0422145 \\\\\n\t5 & Lexas & 5.24057 & 7.2343 & 4.29229 & 11.7282 \\\\\n\t6 & Matsuda & -0.0455557 & -1.40967 & 1.23194 & 1.52314 \\\\\n\t7 & Mercedes & 4.44846 & 6.19975 & 3.65229 & 10.2477 \\\\\n\t8 & Mitsubishi & -0.0396423 & -0.471821 & 0.378446 & 0.481087 \\\\\n\t9 & Suzuki & -1.3003 & -3.30166 & 0.50768 & -0.632405 \\\\\n\t10 & Volkswagen & 0.208558 & -0.216559 & 0.681591 & 1.20412 \\\\\n\t11 & Volvo & 0.380303 & 0.354901 & 0.543972 & 1.33128 \\\\\n\t12 & Nippyo & 9976.91 & 10995.0 & 3925.25 & 4286.01 \\\\\n\t13 & BrandA & -125.931 & -10955.2 & 3.06225 & 4.28647 \\\\\n\t14 & BrandB & 0.323965 & -0.879382 & -34.1722 & -4980.65 \\\\\n\t15 & BrandC & 4.27964 & -11.8808 & 16.7721 & 18.9825 \\\\\n\t16 & Total & 9864.98 & 33.5695 & 3925.37 & -639.946 \\\\\n\\end{tabular}\n```\n:::\n:::\n\n\n## 8.6\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\nprint(\"Change in profit by Brand A merger (%): \", (sum(pro_rev_NippyoA_rc.profit) .- sum(pro_rev_2016.profit)) ./ sum(pro_rev_2016.profit) .* 100.0, \"\\n\")\nprint(\"Change in revenue by Brand A merger (%): \", (sum(pro_rev_NippyoA_rc.revenue) .- sum(pro_rev_2016.revenue)) ./ sum(pro_rev_2016.revenue) .* 100.0, \"\\n\")\nprint(\"Change in profit by Brand B merger (%): \", (sum(pro_rev_NippyoB_rc.profit) .- sum(pro_rev_2016.profit)) ./ sum(pro_rev_2016.profit) .* 100.0, \"\\n\")\nprint(\"Change in revenue by Brand B merger (%): \", (sum(pro_rev_NippyoB_rc.revenue) .- sum(pro_rev_2016.revenue)) ./ sum(pro_rev_2016.revenue) .* 100.0, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChange in profit by Brand A merger (%): 0.36380146936382757\nChange in revenue by Brand A merger (%): 0.00044982645552334383\nChange in profit by Brand B merger (%): 0.14476020559469857\nChange in revenue by Brand B merger (%): -0.008575171067045903\n```\n:::\n:::\n\n\n",
    "supporting": [
      "demand_estimation_merger_files/figure-pdf"
    ],
    "filters": []
  }
}