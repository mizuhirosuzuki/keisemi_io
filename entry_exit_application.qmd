---
title: "参入ゲームの推定（応用編）"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV
using DataFrames
using StringEncodings
using FixedEffectModels
using RegressionTables
using Plots
using LinearAlgebra
using Statistics
using Optim
using StatsBase
using Printf
using ForwardDiff
using Random
using GLM
using NLopt
using StatsPlots
using Distributions
using CategoricalArrays
# using BenchmarkTools
```

```{julia}
data_raw = data = CSV.File(
    open(read, "data/entry_exit_application/data_hospital_chapter6.csv", enc"UTF-8"),
    missingstring = ["NA", ""],
    ) |> DataFrame
first(data, 5)
```

```{julia}
data_cleaned = data_raw[:, :];
replace!(data_cleaned.Management, missing => "");
data_cleaned[!, :DaigakuDum] = in(["公立大学法人", "国（国立大学法人）", "私立学校法人"]).(data_cleaned.Management);
data_cleaned[!, :ZeroBedDum] = (data_cleaned[:, :NumBeds] .== 0);

data_cleaned[!, :NumBeds] = data_cleaned[:, :NumBeds] ./ 100.0;
data_cleaned[!, :LogNumBeds] = log.(data_cleaned[:, :NumBeds] .+ 0.01);
data_cleaned[!, :Population] = data_cleaned[:, :Population] ./ 1e+6;
data_cleaned[!, :Menseki] = data_cleaned[:, :Menseki] ./ 100.0;
data_cleaned[!, :TaxableIncome] = data_cleaned[:, :TaxableIncome] ./ 1000.0;
data_cleaned[!, :LogPop] = log.(data_cleaned[:, :Population]);
data_cleaned[!, :LogIncome] = log.(data_cleaned[:, :TaxableIncome]);
```

## 4

```{julia}
table_mean = combine(
    groupby(data_cleaned, :MRIOwnDum),
    [:Kyukyu, :Kinou, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :NumBeds, :ZeroBedDum, :DaigakuDum] .=> x -> mean(skipmissing(x))
);
table_sd = combine(
    groupby(data_cleaned, :MRIOwnDum),
    [:Kyukyu, :Kinou, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :NumBeds, :ZeroBedDum, :DaigakuDum] .=> x -> std(skipmissing(x))
);

table_sumstat = DataFrame(table_mean[2, :]);
append!(table_sumstat, DataFrame(table_sd[2, :]));
append!(table_sumstat, DataFrame(table_mean[1, :]));
append!(table_sumstat, DataFrame(table_sd[1, :]));

DataFrame([[names(table_sumstat)]; collect.(eachrow(table_sumstat))], [:column; Symbol.(axes(table_sumstat, 1))])
```

```{julia}
function per_MRI_cal(df)

    output = combine(df, nrow => :Total, :MRIOwnDum => sum => :MRIHos)
    output[!, :PerMRI] = round.(output.MRIHos ./ output.Total .* 100.0, digits = 2)
    
    return Matrix(output)
    
end

vcat(
    per_MRI_cal(data_cleaned),
    per_MRI_cal(dropmissing(data_cleaned, :Kyukyu)[dropmissing(data_cleaned, :Kyukyu).Kyukyu .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :Sien)[dropmissing(data_cleaned, :Sien).Sien .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :Hyoka)[dropmissing(data_cleaned, :Hyoka).Hyoka .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :DepNeurology)[dropmissing(data_cleaned, :DepNeurology).DepNeurology .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :DepNeurosurgery)[dropmissing(data_cleaned, :DepNeurosurgery).DepNeurosurgery .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :LogNumBeds)[dropmissing(data_cleaned, :LogNumBeds).LogNumBeds .>= log(1.2), :]),
    per_MRI_cal(dropmissing(data_cleaned, :DaigakuDum)[dropmissing(data_cleaned, :DaigakuDum).DaigakuDum .== 1, :]),
    per_MRI_cal(dropmissing(data_cleaned, :ZeroBedDum)[dropmissing(data_cleaned, :ZeroBedDum).ZeroBedDum .== 1, :]),
)
```

## 5

```{julia}
data_processed_pre = dropmissing(data_cleaned[:, [
            :CityCode, :Kyukyu, :Kinou, :Sien, :Hyoka,
            :DepNeurology, :DepNeurosurgery, :LogNumBeds,
            :ZeroBedDum, :DaigakuDum,
            :Menseki, :LogPop, :LogIncome, :MRIOwnDum
            ]]);
first(data_processed_pre, 5)
```

```{julia}
function berry_process_data(df)
    
    data_processed = df[:, :];
#     sort!(data_processed, :CityCode);
    data_processed[!, :TieEntryOrder] = rand(Uniform(), nrow(df));
    
    transform!(
        groupby(data_processed, :CityCode),
        nrow => :NumPotenHos,
        :MRIOwnDum => sum => :NumEntryObs
    );
    sort!(data_processed, [:CityCode, :LogNumBeds, :TieEntryOrder], rev = [false, true, true]);
    transform!(groupby(data_processed, :CityCode), :NumPotenHos => (x -> 1:length(x)) => :EntryOrderId);
    
    return data_processed
        
end
```

```{julia}
Random.seed!(123)
data_processed = berry_process_data(data_processed_pre);
first(data_processed, 5)
```

```{julia}
NumPotenHos_max = 4;
data_processed = data_processed[data_processed.EntryOrderId .<= NumPotenHos_max, :];
transform!(
    groupby(data_processed, :CityCode),
    :MRIOwnDum => sum => :NumEntryObs,
    nrow => :NumPotenHos
);
data_processed[!, :Const] = ones(nrow(data_processed));
data_processed[!, :LogEntryOrderId] = log.(data_processed[:, :EntryOrderId]);
vcat(
    per_MRI_cal(data_processed),
    per_MRI_cal(dropmissing(data_processed, :Kyukyu)[dropmissing(data_processed, :Kyukyu).Kyukyu .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :Sien)[dropmissing(data_processed, :Sien).Sien .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :Hyoka)[dropmissing(data_processed, :Hyoka).Hyoka .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :DepNeurology)[dropmissing(data_processed, :DepNeurology).DepNeurology .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :DepNeurosurgery)[dropmissing(data_processed, :DepNeurosurgery).DepNeurosurgery .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :LogNumBeds)[dropmissing(data_processed, :LogNumBeds).LogNumBeds .>= log(1.2), :]),
    per_MRI_cal(dropmissing(data_processed, :DaigakuDum)[dropmissing(data_processed, :DaigakuDum).DaigakuDum .== 1, :]),
    per_MRI_cal(dropmissing(data_processed, :ZeroBedDum)[dropmissing(data_processed, :ZeroBedDum).ZeroBedDum .== 1, :]),
)

```

```{julia}
ns = 100;

uniqueCityCode = unique(data_processed.CityCode);
M = length(uniqueCityCode);
NumHos = nrow(data_processed);
NumEntryObs = combine(groupby(data_processed, :CityCode), :NumEntryObs => mean).NumEntryObs_mean;
NumPotenHos_vec = combine(first, groupby(data_processed, :CityCode)).NumPotenHos;
```

```{julia}
u_m0 = (uniqueCityCode .== permutedims(data_processed.CityCode))' * rand(Normal(), (M, ns));
u_mIm = rand(Normal(), (NumHos, ns));
```

```{julia}
param_init = [
    -0.612340533,   -5.525423772,   -0.505275676,   
    -0.32531026,    -1.04162392,    -0.991878025,   
    -3.87040966,    -1.272714254,   2.684741676,    
    0.040555764,    0.426448612,    -1.399627382,   
    0.990975782,    0.958075433
];
function berry_obj(
        param,
        df::DataFrame,
        u_m0::Matrix{Float64},
        u_mIm::Matrix{Float64},
        NumEntryObs::Vector{Float64},
        uniqueCityCode::Vector{Int64},
        NumPotenHos_vec::Vector{Int64}
    )
    
    alpha = param[1:8];
    beta = param[9:12];
    delta = param[13];
    rho = param[14];
    
    var_profit = Matrix(df[:, [:Const, :Menseki, :LogPop, :LogIncome]]) * beta .+ 
        rho .* u_m0;
    fixed_cost = Matrix(df[:, [:Kyukyu, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :LogNumBeds, :ZeroBedDum, :DaigakuDum]]) * alpha .-
        (sqrt.(1.0 - rho^2) .* u_mIm);

    prof_excl_comp = var_profit - fixed_cost;
    
    function each_entry_func(i)
        entry_decision_df = hcat(df[:, [:CityCode]], DataFrame((prof_excl_comp .- delta .* log(i) .>= 0), :auto));
        return (Matrix(combine(groupby(entry_decision_df, :CityCode), Not(:CityCode) .=> sum)[:, Not(:CityCode)]) .>= i) .* i
    end
    
    each_entry_mat = max.(
        each_entry_func(1),
        each_entry_func(2),
        each_entry_func(3),
        each_entry_func(4)
    );
    n_exp = mean(each_entry_mat, dims = 2);
    
    diff = mean((NumEntryObs .- n_exp).^2);

    return diff
    
end
@time berry_obj(param_init, data_processed, u_m0, u_mIm, NumEntryObs, uniqueCityCode, NumPotenHos_vec)

```

```{julia}
# @benchmark berry_obj(param_init, data_processed, u_m0, u_mIm, NumEntryObs)
function test_nlopt(x::Vector, grad::Vector)
    if length(grad) != 0
        ForwardDiff.gradient!(grad, x -> berry_obj(x, data_processed, u_m0, u_mIm, NumEntryObs, uniqueCityCode, NumPotenHos_vec), x)
    end
    return berry_obj(x, data_processed, u_m0, u_mIm, NumEntryObs, uniqueCityCode, NumPotenHos_vec)
end

param_init = [
    -0.612340533,   -5.525423772,   -0.505275676,   
    -0.32531026,    -1.04162392,    -0.991878025,   
    -3.87040966,    -1.272714254,   2.684741676,    
    0.040555764,    0.426448612,    -1.399627382,   
    0.990975782,    0.958075433
];
# param_init = vcat(repeat([0.0], 13), 0.95)

opt = NLopt.Opt(:LN_NELDERMEAD, length(param_init))
opt.lower_bounds = [repeat([-Inf], 13); -1.0]
opt.upper_bounds = [repeat([Inf], 13); 1.0]
# opt.xtol_rel = 1e-8

opt.min_objective = test_nlopt
@time (minf, minx, ret) = NLopt.optimize(opt, param_init)

[param_init minx]
```


## 6.2

```{julia}
function entry_sim(df, delta, prof_excl_comp)
    N = nrow(df);
    n = ones(ns);
    EntryCond = zeros(Int64, N, ns);
    
    for i = 1:N
        net_prof = prof_excl_comp[i, :] .- delta * log.(n);
        EntryCond[i, net_prof .> 0.0] .= 1;
        n[net_prof .> 0.0] .+= 1;
    end

    return vec(mean(EntryCond, dims = 2))
end

berry_est = minx;
alpha_est = berry_est[1:8];
beta_est = berry_est[9:12];
delta_est = berry_est[13];
rho_est = berry_est[14];

var_profit = Matrix(data_processed[:, [:Const, :Menseki, :LogPop, :LogIncome]]) * beta_est .+ 
    rho_est .* u_m0;
fixed_cost = Matrix(data_processed[:, [:Kyukyu, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :LogNumBeds, :ZeroBedDum, :DaigakuDum]]) * alpha_est .-
    (sqrt.(1.0 - rho_est^2) .* u_mIm);

prof_excl_comp = var_profit - fixed_cost;

EntryProb = map(
    i -> entry_sim(data_processed[data_processed.CityCode .== i, :], delta_est, prof_excl_comp[data_processed.CityCode .== i, :]), 
    uniqueCityCode
);
```

```{julia}
EntryPred = reduce(vcat, EntryProb) .> 0.5;
data_predicted = copy(data_processed);
data_predicted[!, :EntryProb] = reduce(vcat, EntryProb);
data_predicted[!, :EntryPred] = EntryPred;
data_predicted_agg = combine(
    groupby(data_predicted, :CityCode),
    :MRIOwnDum => sum => :Actual,
    :EntryPred => sum => :Predict
);

data_predicted_agg = stack(data_predicted_agg, [:Actual, :Predict]);
data_predicted_sum = combine(groupby(data_predicted_agg, [:variable, :value]), nrow);
sort!(data_predicted_sum, [:variable, :value]);
groupedbar(
    data_predicted_sum.nrow, 
    group = data_predicted_sum.variable,
    xlabel = "value", 
    ylabel = "count",
    bar_width = 0.67,
    xticks = (1:5, 0:4),
    lw = 0
)
```

```{julia}
#| echo: false
#| eval: false
 
# var_list = [:Kyukyu, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :DaigakuDum, :ZeroBedDum]
# actual_pred_MRI = map(x -> combine(data_predicted[data_predicted[:, x] .== 1, [:MRIOwnDum, :EntryPred]], All() .=> sum), var_list);
# actual_pred_MRI = vcat(
#     combine(data_predicted[:, [:MRIOwnDum, :EntryPred]], All() .=> sum),
#     reduce(vcat, actual_pred_MRI),
#     combine(data_predicted[data_predicted[:, :LogNumBeds] .>= log(1.2), [:MRIOwnDum, :EntryPred]], All() .=> sum)
# )
# groupedbar(
#     Matrix(actual_pred_MRI), 
#     bar_position = :dodge, 
#     bar_width = 0.7,
#     xticks = (1:9, 1:9),

# )
# var_list = [:DepNeurology, :DepNeurosurgery, :ZeroBedDum, :DaigakuDum]
# DataFrame(
#     category = ["Total", "DepNeurology", "DepNeurosurgery", "ZeroBedDum", "DaigakuDum"],
#     mse = [
#         msd(data_predicted[:, :MRIOwnDum] * 1.0, data_predicted[:, :EntryProb]);
#         map(i -> msd(data_predicted[data_predicted[:, i] .== 1, :MRIOwnDum] * 1.0, data_predicted[data_predicted[:, i] .== 1, :EntryProb]), var_list)
#             ]
# )
```

## 7

```{julia}
data_cf = copy(data_processed);
sort!(data_cf, [:CityCode, :DepNeurology, :DepNeurosurgery, :LogNumBeds, :TieEntryOrder], rev = [false, true, true, true, true]);
transform!(groupby(data_cf, :CityCode), :NumPotenHos => (x -> 1:length(x)) => :EntryOrderId);
var_profit_cf = Matrix(data_cf[:, [:Const, :Menseki, :LogPop, :LogIncome]]) * beta_est .+ 
    rho_est .* u_m0;
fixed_cost_cf = Matrix(data_cf[:, [:Kyukyu, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :LogNumBeds, :ZeroBedDum, :DaigakuDum]]) * alpha_est .-
    (sqrt.(1.0 - rho_est^2) .* u_mIm);

prof_excl_comp_cf = var_profit_cf - fixed_cost_cf;
prof_excl_comp_cf[(data_cf.DepNeurology .== 1) .| (data_cf.DepNeurosurgery .== 1), :] .= 1e+5;
```

```{julia}
EntryProb_cf = map(
    i -> entry_sim(data_cf[data_cf.CityCode .== i, :], delta_est, prof_excl_comp_cf[data_cf.CityCode .== i, :]), 
    uniqueCityCode
);
```

```{julia}
EntryPred_cf = reduce(vcat, EntryProb_cf) .> 0.5;
data_predicted_cf = copy(data_processed);
data_predicted_cf[!, :EntryProb] = reduce(vcat, EntryProb_cf);
data_predicted_cf[!, :EntryPred] = EntryPred_cf;
data_predicted_cf_agg = combine(
    groupby(data_predicted_cf, :CityCode),
    :MRIOwnDum => sum => :Actual,
    :EntryPred => sum => :CounterFactual
);

data_predicted_cf_agg = stack(data_predicted_cf_agg, [:Actual, :CounterFactual]);
data_predicted_cf_sum = combine(groupby(
    vcat(data_predicted_agg, data_predicted_cf_agg[data_predicted_cf_agg.variable .== "CounterFactual", :]),
    [:variable, :value]
    ), nrow);

transform!(
    data_predicted_cf_sum, 
    :variable => 
    (x -> categorical(x; ordered = true, levels = ["Actual", "Predict", "CounterFactual"])) => 
    :variable
    )
sort!(data_predicted_cf_sum, [:variable, :value]);
groupedbar(
    data_predicted_cf_sum.nrow, 
    group = data_predicted_cf_sum.variable,
    xlabel = "value", 
    ylabel = "count",
    bar_width = 0.67,
    xticks = (1:5, 0:4),
    lw = 0
)
```

```{julia}
vcat(
    combine(groupby(
        data_predicted_agg, :variable
        ), :value => sum),
    combine(groupby(
        data_predicted_cf_agg, :variable
        ), :value => sum) |> 
        filter(:variable => (x -> x .== "CounterFactual"))
)
```

```{julia}
data_predicted_agg_wo_neuro = combine(
    groupby(
        filter([:DepNeurology, :DepNeurosurgery] => ((d1, d2) -> (d1 .== 1) .& (d2 .== 1)), data_predicted),
        :CityCode
        ),
    :MRIOwnDum => sum => :Actual,
    :EntryPred => sum => :Predict
);

data_predicted_agg_wo_neuro = stack(data_predicted_agg_wo_neuro, [:Actual, :Predict]);
data_predicted_sum_wo_neuro = combine(groupby(data_predicted_agg_wo_neuro, [:variable, :value]), nrow);

data_predicted_cf_agg_wo_neuro = combine(
    groupby(
        # data_predicted_cf, 
        filter([:DepNeurology, :DepNeurosurgery] => ((d1, d2) -> (d1 .== 1) .& (d2 .== 1)), data_predicted_cf),
        :CityCode
        ),
    :MRIOwnDum => sum => :Actual,
    :EntryPred => sum => :CounterFactual
);

data_predicted_cf_agg_wo_neuro = stack(data_predicted_cf_agg_wo_neuro, [:Actual, :CounterFactual]);

data_predicted_cf_sum_wo_neuro = combine(groupby(
    vcat(
        data_predicted_agg_wo_neuro, 
        data_predicted_cf_agg_wo_neuro[data_predicted_cf_agg_wo_neuro.variable .== "CounterFactual", :]
        ),
    [:variable, :value]
    ), nrow)

transform!(
    data_predicted_cf_sum_wo_neuro, 
    :variable => 
    (x -> categorical(x; ordered = true, levels = ["Actual", "Predict", "CounterFactual"])) => 
    :variable
    )
sort!(data_predicted_cf_sum_wo_neuro, [:variable, :value]);
groupedbar(
    data_predicted_cf_sum_wo_neuro.nrow, 
    group = data_predicted_cf_sum_wo_neuro.variable,
    xlabel = "value", 
    ylabel = "count",
    bar_width = 0.67,
    xticks = (1:5, 0:4),
    lw = 0
)
```

```{julia}
vcat(
    combine(groupby(
        data_predicted_agg_wo_neuro, :variable
        ), :value => sum),
    combine(groupby(
        data_predicted_cf_agg_wo_neuro, :variable
        ), :value => sum) |> 
        filter(:variable => (x -> x .== "CounterFactual"))
)
```

```{julia}
#| echo: false
#| eval: false

# EntryPred_cf = reduce(vcat, EntryProb_cf) .> 0.5;
# data_cf[!, :EntryProb] = reduce(vcat, EntryProb_cf);
# data_cf[!, :EntryPred] = EntryPred_cf;
# var_list = [:Kyukyu, :Sien, :Hyoka, :DepNeurology, :DepNeurosurgery, :DaigakuDum, :ZeroBedDum]
# actual_pred_MRI_cf = map(x -> combine(data_cf[data_cf[:, x] .== 1, [:MRIOwnDum, :EntryPred]], All() .=> sum), var_list);
# actual_pred_MRI_cf = vcat(
#     combine(data_cf[:, [:MRIOwnDum, :EntryPred]], All() .=> sum),
#     reduce(vcat, actual_pred_MRI_cf),
#     combine(data_cf[data_cf[:, :LogNumBeds] .>= log(1.2), [:MRIOwnDum, :EntryPred]], All() .=> sum),
#     combine(data_cf[(data_cf[:, :DepNeurology] .== 0) .& (data_cf[:, :DepNeurosurgery] .== 0), [:MRIOwnDum, :EntryPred]], All() .=> sum)
# )

# [actual_pred_MRI.EntryPred_sum actual_pred_MRI_cf.EntryPred_sum]
```

