---
title: "基礎編 2"
format:
  html:
    toc: true
    html-math-method: katex
jupyter: julia-1.9
---

```{julia}
using CSV
using DataFrames
using StringEncodings
using FixedEffectModels
using RegressionTables
using Plots
using LinearAlgebra
using Statistics
using Optim
using Printf
using ForwardDiff
using Random
using GLM
using Serialization
```

```{julia}
mutable struct datalist_struct
    X1::Array{Float64,2};
    X2::Array{Float64,2};
    Z::Array{Float64,2};
    ShareVec::Vector{Float64};
    marketIndex::Vector{Int64};
    logitshare::Vector{Float64};
    randomDrawMat::Array{Float64,2};
    marketIndexMat::BitMatrix
end

```

```{julia}
for file in readdir("functions/demand_estimation")
    include("functions/demand_estimation/" * file)
end
```

## 加工済みデータの読み込み

```{julia}
data = CSV.read("tmp/demand_estimation_1/data.csv", DataFrame);
```

## データの準備

```{julia}
NIPPYOautoIDvec = [
    260, 4, 76, 104, 64, 54, 152, 153, 71, 197,
    42, 45, 114, 208, 209, 77, 236, 58, 127, 187,
    79, 175, 19, 117, 216, 112, 256, 119, 37, 158
];

dataNIPPYO = data[
    in(NIPPYOautoIDvec).(data[:, :NameID]), 
    [:year, :share, :NameID, :Sales, :price, :hppw, :FuelEfficiency, :size, :Name]
    ];
dataNIPPYO[!, :log_sales] = log.(dataNIPPYO[:, :Sales]);
dataNIPPYO[!, :log_price] = log.(dataNIPPYO[:, :price]);
dataNIPPYO[!, :log10_sales] = log10.(dataNIPPYO[:, :Sales]);
dataNIPPYO[!, :log10_price] = log10.(dataNIPPYO[:, :price]);
```

## Logitモデルにおける価格弾力性行列の作成

```{julia}
data[!, :logit_share] = log.(data[:, :share]) .- log.(data[:, :share0]);

resultGH = reg(
    data, 
    @formula(logit_share ~ (
        price ~ iv_GH_own_hppw + iv_GH_own_FuelEfficiency + iv_GH_own_size + 
            iv_GH_other_hppw + iv_GH_other_FuelEfficiency + iv_GH_other_size
    ) + hppw + FuelEfficiency + size),
    Vcov.robust(),
    save = true
);

data2016 = dataNIPPYO[
    dataNIPPYO.year .== 2016, 
    [:price, :share, :NameID, :Name]
    ];
numCars2016 = nrow(data2016);

ownElasticity = (
    resultGH.coef[resultGH.coefnames .== "price"][1] .* 
    data2016.price .* 
    (1.0 .- data2016.share)
);
crossElasticity = (
    - resultGH.coef[resultGH.coefnames .== "price"][1] .* 
    data2016.price .* 
    data2016.share
);

elasticityMat = reduce(
    hcat, 
    [crossElasticity for car = 1:numCars2016]
    );
elasticityMat[diagind(elasticityMat)] = ownElasticity;

elasticityMat[[12, 13, 10, 1], [12, 13, 10, 1]]


```

## 入れ子型ロジット推定のためのBLP操作変数の作成

```{julia}
transform!(
    groupby(data, [:year, :Maker, :Type]),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        sum .=> 
        [:hppw_sum_own, :FuelEfficiency_sum_own, :size_sum_own]
    ),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        (x -> sum(x.^2)) .=> 
        [:hppw_sqr_sum_own, :FuelEfficiency_sqr_sum_own, :size_sqr_sum_own]
    ),
    nrow => :group_n
);
transform!(
    groupby(data, [:year, :Type]),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        sum .=> 
        [:hppw_sum_mkt, :FuelEfficiency_sum_mkt, :size_sum_mkt]
    ),
    (
        [:hppw, :FuelEfficiency, :size] .=> 
        (x -> sum(x.^2)) .=> 
        [:hppw_sqr_sum_mkt, :FuelEfficiency_sqr_sum_mkt, :size_sqr_sum_mkt]
    ),
    nrow => :mkt_n
);

for variable in ["hppw", "FuelEfficiency", "size"]
    addIVColumnsForNestedLogit!(data, variable)
end

data[!, :iv_BLP_own_num_nest] = data[:, :group_n] .- 1;
data[!, :iv_BLP_other_num_nest] = data[:, :mkt_n] .- data[:, :group_n];

```

## 入れ子型ロジットモデルの推定

```{julia}
data = transform(
    groupby(data, [:year, :Type]),
    :Sales => sum => :sum_year_body
);
data[!, :inside_share] = data.Sales ./ data.sum_year_body;
data[!, :log_inside_share] = log.(data.Sales ./ data.sum_year_body);
resultOLS = reg(
    data, 
    @formula(
        logit_share ~ 
        price + log_inside_share + hppw + FuelEfficiency + size
        )
    );

resultBLPNested = reg(
    data, 
    @formula(logit_share ~ (
        price + log_inside_share ~ iv_BLP_own_hppw_nest + iv_BLP_own_FuelEfficiency_nest + iv_BLP_own_size_nest + 
            iv_BLP_other_hppw_nest + iv_BLP_other_FuelEfficiency_nest + iv_BLP_other_size_nest +
            iv_BLP_own_num_nest + iv_BLP_other_num_nest
    ) + hppw + FuelEfficiency + size),
    Vcov.robust()
);

regtable(resultOLS, resultBLPNested)
```

## 入れ子型ロジットモデルにおける自己価格弾力性の計算

```{julia}
alpha1 = resultOLS.coef[resultOLS.coefnames .== "price"][1]
sigma1 = resultOLS.coef[resultOLS.coefnames .== "log_inside_share"][1]

alpha2 = resultBLPNested.coef[resultBLPNested.coefnames .== "price"][1]
sigma2 = resultBLPNested.coef[resultBLPNested.coefnames .== "log_inside_share"][1]

data[!, :own_elas_ols] = alpha1 .* data[:, :price] .* (
    1.0 .- sigma1 .* data[:, :inside_share] .- 
    (1.0 .- sigma1) .* data[:, :share]
) ./ (1.0 .- sigma1);
data[!, :own_elas_ivblp_nested] = alpha2 .* data[:, :price] .* (
    1.0 .- sigma2 .* data[:, :inside_share] .- 
    (1.0 .- sigma2) .* data[:, :share]
) ./ (1.0 .- sigma2);

describe(data[:, r"^own_elas"], :mean, :std, :median, :min, :max)
```

```{julia}
dataNIPPYO = data[
    in(NIPPYOautoIDvec).(data[:, :NameID]), 
    [
        :year, :share, :Type, :inside_share, 
        :NameID, :Sales, :price, :hppw, :FuelEfficiency, :size, :Name
        ]
    ];
dataNIPPYO[!, :log_sales] = log.(dataNIPPYO[:, :Sales]);
dataNIPPYO[!, :log_price] = log.(dataNIPPYO[:, :price]);

data2016 = dataNIPPYO[
    dataNIPPYO.year .== 2016, 
    [:price, :Type, :share, :inside_share, :NameID, :Name]
    ];
numCars2016 = nrow(data2016);

ownElasticityNestedLogit = (
    alpha2 .* 
    data2016.price .* 
    (
        1.0 .- sigma2 .* 
        data2016.inside_share .- 
        (1.0 .- sigma2) .* 
        data2016.share
        ) ./ 
    (1.0 .- sigma2)
);
crossElasticityOtherGroup = (
    - alpha2 .* 
    data2016.price .* 
    data2016.share
);

crossElasticityOtherGroup = reduce(
    hcat, 
    [crossElasticityOtherGroup for car = 1:numCars2016]
    );
crossElasticityOtherGroup[
    diagind(crossElasticityOtherGroup)
    ] = ownElasticityNestedLogit;

```

```{julia}

crossElasticitySameGroup = reduce(
    hcat,
    [
        - alpha2 .* data2016.price .* (
            sigma2 .* data2016.inside_share .+ (1.0 .- sigma2) .* data2016.share
        ) ./ (1.0 .- sigma2)
    for car in 1:numCars2016]
);

sameGroupIndicatorMat = (
    reduce(hcat, [data2016.Type for car = 1:numCars2016]) .==
    permutedims(reduce(hcat, [data2016.Type for car = 1:numCars2016]))
);
otherGroupIndicatorMat = (sameGroupIndicatorMat .== 0);

elasticityNestedLogitMat = (
    crossElasticitySameGroup .* 
    sameGroupIndicatorMat .+ 
    crossElasticityOtherGroup .* 
    otherGroupIndicatorMat
);
elasticityNestedLogitMat[
    diagind(elasticityNestedLogitMat)
    ] = ownElasticityNestedLogit;

elasticityNestedLogitMat[[12, 13, 10, 1], [12, 13, 10, 1]]
```

## ランダム係数ロジットモデルの推定

### 下準備

```{julia}
sort!(data, [:year, :NameID]);

N = nrow(data);
T = length(unique(data.year));

X1 = hcat(ones(N), Matrix(data[:, [:price, :FuelEfficiency, :hppw, :size]]));
X2 = hcat(data.price, ones(N), data.size);
Z = hcat(
    ones(N),
    Matrix(data[:, [:FuelEfficiency, :hppw, :size]]),
    Matrix(data[:, r"^iv_GH.*(?<!nest)$"])
    );

Random.seed!(123);
Nsim = 500;

```

```{julia}

randomDrawMat = randn(size(X2)[2], Nsim);

marketIndex = data.year;

uniqueMarketIndex = sort(unique(data.year));
marketIndexMat = reduce(
    hcat, 
    [marketIndex .== market for market in uniqueMarketIndex]
    );

datalist = datalist_struct(
    X1, 
    X2, 
    Z, 
    data.share, 
    marketIndex, 
    data.logit_share, 
    randomDrawMat, 
    marketIndexMat
    );
```

```{julia}
#| eval: false
#| echo: false
@time calculateMarketShare([0.01, 0.01, 0.01], datalist, data.logit_share);
```

```{julia}
#| echo: false
#| eval: false
@time calculateMeanUtil([0.001, 0.001, 0.001], datalist, data.logit_share);
```

```{julia}
#| echo: false
#| eval: false
@time calculateGMMObjective([0.1, 0.01, 0.01], datalist, datalist.logitshare);
```

### 推定

```{julia}
initial_x = [0.3, 18, 0.01];
delta_ini = calculateMeanUtil(initial_x, datalist, datalist.logitshare);
```

```{julia}
#| eval: false

objFunc_for_Optim = OnceDifferentiable(
    x -> calculateGMMObjective(x, datalist, delta_ini),
    initial_x;
    autodiff = :forward
    );
@time resultGMM = optimize(
    objFunc_for_Optim,
    [0.0, 0.0, 0.0],
    [Inf, Inf, Inf],
    initial_x,
    Fminbox(LBFGS()),
    Optim.Options(show_trace = false)
);

```

```{julia}
#| eval: false
#| echo: false

objFunc_for_Optim = TwiceDifferentiable(
    x -> calculateGMMObjective(x, datalist, delta_ini),
    initial_x;
    autodiff = :forward
    );
@time resultGMM = optimize(
    objFunc_for_Optim,
    [0.0, 0.00, 0.00],
    [Inf, Inf, Inf],
    initial_x,
    Optim.Options(show_trace = true)
)

```

```{julia}
#| echo: false
#| eval: false
serialize("tmp/demand_estimation_2/resultGMM.ser", resultGMM);
```

```{julia}
#| echo: false
resultGMM = deserialize("tmp/demand_estimation_2/resultGMM.ser");
```

```{julia}
resultGMM.minimizer
```

```{julia}
W = inv(datalist.Z' * datalist.Z);    
delta = calculateMeanUtil(resultGMM.minimizer, datalist, delta_ini);
beta_hat = (
    (datalist.X1' * datalist.Z * W * datalist.Z' * datalist.X1) \ 
    (datalist.X1' * datalist.Z * W * datalist.Z' * delta)
);

beta_hat
```

### 標準誤差の計算

```{julia}
Xi = delta - X1 * beta_hat;
Omega_hat = reduce(+, Z[i,:] * Z[i,:]' .* Xi[i]^2 ./ N for i = 1:N);
Ddelta = ForwardDiff.jacobian(
    x -> calculateMeanUtil(x, datalist, delta), 
    resultGMM.minimizer
    );
G = Z' * hcat(- X1, Ddelta) ./ N;
AsyVarMat = (G' * W * G) \ G' * W * Omega_hat * W * G * inv(G' * W * G);
Ase = sqrt.(diag(AsyVarMat) ./ N);

DataFrame(
    Var = [
        "Const", "Price", "Fuel Efficiency", "hppw", 
        "size", "random_price", "random_constant", "random_size"
        ],
    Est = vcat(beta_hat, resultGMM.minimizer),
    se = Ase
)
```

## 価格弾力性行列の計算

```{julia}

market2016Index = data.year .== 2016;

elasmat = calculateElasticity(
    data[market2016Index, :].price,
    X2[market2016Index, :],
    beta_hat,
    resultGMM.minimizer,
    randomDrawMat,
    delta[market2016Index, :]
)

elasmat[[59, 80, 102, 113], [59, 80, 102, 113]]

```

## 応用: プライシング

```{julia}
price_range = range(1.8, 4.0, step = 0.05);
ownpi_res = calculateRevenue.(
    price_range, 
    Ref(data), Ref(datalist), Ref(delta), Ref(beta_hat), Ref(resultGMM.minimizer),
    "ownpi"
);

plot(price_range, ownpi_res, legend = false)
xlabel!("Price")
ylabel!("Revenue")

```

```{julia}
price_range = range(1.8, 4.0, step = 0.05);
totalpi_res = calculateRevenue.(
    price_range, 
    Ref(data), Ref(datalist), Ref(delta), Ref(beta_hat), Ref(resultGMM.minimizer),
    "totalpi"
);

plot(price_range, totalpi_res, legend = false)
xlabel!("Price")
ylabel!("Revenue")

```

```{julia}
ownpi_optim_res = optimize(
    x -> - calculateRevenue(
        x[1], data, datalist, delta, 
        beta_hat, resultGMM.minimizer, "ownpi"
        ),
    [3.0]
);

@printf("Revenue-maximizing price: %.3f \n", ownpi_optim_res.minimizer[1])
@printf("Maximized revenue : %.3f", -ownpi_optim_res.minimum)
```

```{julia}
totalpi_optim_res = optimize(
    x -> - calculateRevenue(
        x[1], data, datalist, delta, 
        beta_hat, resultGMM.minimizer, "totalpi"
        ),
    [3.0]
);

@printf("Revenue-maximizing price: %.3f \n", totalpi_optim_res.minimizer[1])
@printf("Maximized revenue : %.3f", -totalpi_optim_res.minimum)
```

```{julia}
calculateRevenue(
    ownpi_optim_res.minimizer[1], 
    data,
    datalist,
    delta,
    beta_hat,
    resultGMM.minimizer,
    "totalpi"
    )

```

